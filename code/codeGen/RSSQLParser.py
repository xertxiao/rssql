# Generated from RSSQLParser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00c3")
        buf.write("\u080a\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\3\2\7\2\u00e6\n\2\f\2\16\2\u00e9\13\2\3\2\3")
        buf.write("\2\3\3\7\3\u00ee\n\3\f\3\16\3\u00f1\13\3\3\3\3\3\6\3\u00f5")
        buf.write("\n\3\r\3\16\3\u00f6\3\3\7\3\u00fa\n\3\f\3\16\3\u00fd\13")
        buf.write("\3\3\3\7\3\u0100\n\3\f\3\16\3\u0103\13\3\3\4\3\4\3\4\5")
        buf.write("\4\u0108\n\4\5\4\u010a\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\5\4\u0124\n\4\3\5\3\5\3\5\3\5\3\5\5\5\u012b")
        buf.write("\n\5\3\5\3\5\3\5\3\5\3\5\5\5\u0132\n\5\3\5\3\5\3\5\3\5")
        buf.write("\5\5\u0138\n\5\3\5\3\5\5\5\u013c\n\5\3\5\3\5\3\5\5\5\u0141")
        buf.write("\n\5\3\5\5\5\u0144\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u014b\n")
        buf.write("\6\3\6\5\6\u014e\n\6\3\7\3\7\5\7\u0152\n\7\3\7\3\7\3\7")
        buf.write("\3\7\3\b\3\b\5\b\u015a\n\b\3\b\3\b\5\b\u015e\n\b\5\b\u0160")
        buf.write("\n\b\3\t\3\t\5\t\u0164\n\t\3\n\3\n\5\n\u0168\n\n\3\n\3")
        buf.write("\n\5\n\u016c\n\n\3\n\5\n\u016f\n\n\3\13\3\13\3\13\3\f")
        buf.write("\3\f\5\f\u0176\n\f\3\f\3\f\3\r\3\r\5\r\u017c\n\r\3\r\3")
        buf.write("\r\3\r\3\r\5\r\u0182\n\r\3\r\3\r\3\r\5\r\u0187\n\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u0190\n\r\f\r\16\r\u0193")
        buf.write("\13\r\3\r\3\r\3\r\5\r\u0198\n\r\3\16\3\16\5\16\u019c\n")
        buf.write("\16\3\16\3\16\5\16\u01a0\n\16\3\16\5\16\u01a3\n\16\3\17")
        buf.write("\3\17\5\17\u01a7\n\17\3\17\3\17\3\17\3\17\5\17\u01ad\n")
        buf.write("\17\3\17\3\17\3\17\5\17\u01b2\n\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\7\17\u01b9\n\17\f\17\16\17\u01bc\13\17\3\17\3\17")
        buf.write("\7\17\u01c0\n\17\f\17\16\17\u01c3\13\17\3\17\3\17\3\17")
        buf.write("\5\17\u01c8\n\17\3\17\3\17\5\17\u01cc\n\17\3\20\3\20\5")
        buf.write("\20\u01d0\n\20\3\20\7\20\u01d3\n\20\f\20\16\20\u01d6\13")
        buf.write("\20\3\21\6\21\u01d9\n\21\r\21\16\21\u01da\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u01e7\n\21")
        buf.write("\3\22\3\22\5\22\u01eb\n\22\3\22\3\22\3\22\5\22\u01f0\n")
        buf.write("\22\3\22\5\22\u01f3\n\22\3\22\5\22\u01f6\n\22\3\22\5\22")
        buf.write("\u01f9\n\22\3\22\3\22\5\22\u01fd\n\22\3\22\5\22\u0200")
        buf.write("\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\5\22\u020e\n\22\3\22\3\22\3\22\3\22\3\22\5")
        buf.write("\22\u0215\n\22\3\22\3\22\3\22\3\22\3\22\5\22\u021c\n\22")
        buf.write("\5\22\u021e\n\22\3\23\5\23\u0221\n\23\3\23\3\23\3\24\3")
        buf.write("\24\5\24\u0227\n\24\3\24\3\24\3\24\5\24\u022c\n\24\3\24")
        buf.write("\3\24\3\24\3\24\7\24\u0232\n\24\f\24\16\24\u0235\13\24")
        buf.write("\3\24\3\24\5\24\u0239\n\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\7\24\u0246\n\24\f\24\16\24")
        buf.write("\u0249\13\24\3\24\3\24\3\24\5\24\u024e\n\24\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\7\25\u0256\n\25\f\25\16\25\u0259")
        buf.write("\13\25\3\25\3\25\5\25\u025d\n\25\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\5\25\u0267\n\25\3\25\3\25\7\25\u026b")
        buf.write("\n\25\f\25\16\25\u026e\13\25\3\25\5\25\u0271\n\25\3\25")
        buf.write("\3\25\3\25\5\25\u0276\n\25\5\25\u0278\n\25\3\26\3\26\3")
        buf.write("\26\3\26\3\27\3\27\5\27\u0280\n\27\3\27\3\27\3\27\3\27")
        buf.write("\5\27\u0286\n\27\3\27\3\27\3\27\5\27\u028b\n\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\5\27\u0292\n\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\7\27\u029b\n\27\f\27\16\27\u029e\13\27")
        buf.write("\5\27\u02a0\n\27\5\27\u02a2\n\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\5\27\u02a9\n\27\3\27\3\27\5\27\u02ad\n\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\5\27\u02b4\n\27\3\27\3\27\6\27\u02b8\n")
        buf.write("\27\r\27\16\27\u02b9\3\27\3\27\3\30\3\30\5\30\u02c0\n")
        buf.write("\30\3\30\3\30\3\30\3\30\5\30\u02c6\n\30\3\30\3\30\3\30")
        buf.write("\5\30\u02cb\n\30\3\30\3\30\3\30\3\30\3\30\7\30\u02d2\n")
        buf.write("\30\f\30\16\30\u02d5\13\30\3\30\3\30\5\30\u02d9\n\30\3")
        buf.write("\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u02e4")
        buf.write("\n\31\3\31\3\31\3\31\5\31\u02e9\n\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\7\31\u02f2\n\31\f\31\16\31\u02f5\13")
        buf.write("\31\3\31\3\31\5\31\u02f9\n\31\3\32\3\32\5\32\u02fd\n\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\7\32\u030b\n\32\f\32\16\32\u030e\13\32\3\33\3\33")
        buf.write("\3\33\3\33\3\33\7\33\u0315\n\33\f\33\16\33\u0318\13\33")
        buf.write("\3\33\3\33\5\33\u031c\n\33\3\34\3\34\3\34\3\34\3\34\3")
        buf.write("\34\5\34\u0324\n\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35")
        buf.write("\3\35\7\35\u032e\n\35\f\35\16\35\u0331\13\35\3\35\3\35")
        buf.write("\5\35\u0335\n\35\3\35\3\35\3\35\3\35\3\35\3\36\5\36\u033d")
        buf.write("\n\36\3\36\3\36\3\36\3\36\3\36\5\36\u0344\n\36\3\36\5")
        buf.write("\36\u0347\n\36\3\37\5\37\u034a\n\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\5\37\u0351\n\37\3\37\5\37\u0354\n\37\3\37\5\37\u0357")
        buf.write("\n\37\3\37\5\37\u035a\n\37\3 \3 \5 \u035e\n \3 \3 \3!")
        buf.write("\3!\3!\3!\5!\u0366\n!\3!\3!\3!\5!\u036b\n!\3!\3!\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\5\"\u0375\n\"\3\"\3\"\3\"\5\"\u037a")
        buf.write("\n\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0383\n\"\3\"\3\"")
        buf.write("\3\"\7\"\u0388\n\"\f\"\16\"\u038b\13\"\3\"\5\"\u038e\n")
        buf.write("\"\3\"\3\"\5\"\u0392\n\"\3\"\5\"\u0395\n\"\3\"\3\"\3\"")
        buf.write("\3\"\7\"\u039b\n\"\f\"\16\"\u039e\13\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u03aa\n\"\3\"\5\"\u03ad\n")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u03b5\n\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\6\"\u03bc\n\"\r\"\16\"\u03bd\3\"\3\"\5\"\u03c2")
        buf.write("\n\"\3\"\3\"\3\"\5\"\u03c7\n\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u03e5\n\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u03f1\n\"\3\"\3")
        buf.write("\"\3\"\5\"\u03f6\n\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\5\"\u0402\n\"\3\"\3\"\3\"\3\"\5\"\u0408\n\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\5\"\u040f\n\"\3\"\3\"\5\"\u0413\n\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\7\"\u041b\n\"\f\"\16\"\u041e\13")
        buf.write("\"\5\"\u0420\n\"\3\"\3\"\3\"\3\"\5\"\u0426\n\"\3\"\3\"")
        buf.write("\3\"\3\"\5\"\u042c\n\"\3\"\3\"\3\"\3\"\3\"\7\"\u0433\n")
        buf.write("\"\f\"\16\"\u0436\13\"\5\"\u0438\n\"\3\"\3\"\5\"\u043c")
        buf.write("\n\"\7\"\u043e\n\"\f\"\16\"\u0441\13\"\3#\3#\3#\3#\3#")
        buf.write("\3#\5#\u0449\n#\3#\3#\3$\3$\3%\3%\3%\3%\7%\u0453\n%\f")
        buf.write("%\16%\u0456\13%\3%\3%\3&\3&\3&\3&\7&\u045e\n&\f&\16&\u0461")
        buf.write("\13&\3\'\5\'\u0464\n\'\3\'\3\'\3\'\3\'\3\'\5\'\u046b\n")
        buf.write("\'\3\'\3\'\3\'\3\'\5\'\u0471\n\'\3\'\3\'\3\'\5\'\u0476")
        buf.write("\n\'\3\'\3\'\3\'\3\'\7\'\u047c\n\'\f\'\16\'\u047f\13\'")
        buf.write("\3\'\3\'\5\'\u0483\n\'\3\'\3\'\5\'\u0487\n\'\3\'\5\'\u048a")
        buf.write("\n\'\3\'\3\'\5\'\u048e\n\'\3\'\5\'\u0491\n\'\3(\3(\3(")
        buf.write("\3(\7(\u0497\n(\f(\16(\u049a\13(\3)\3)\3)\3)\3)\3)\7)")
        buf.write("\u04a2\n)\f)\16)\u04a5\13)\3)\3)\3)\5)\u04aa\n)\5)\u04ac")
        buf.write("\n)\3)\3)\3)\3)\3)\3)\5)\u04b4\n)\3)\3)\3)\3)\3)\5)\u04bb")
        buf.write("\n)\3)\3)\3)\7)\u04c0\n)\f)\16)\u04c3\13)\3)\3)\5)\u04c7")
        buf.write("\n)\5)\u04c9\n)\3*\3*\3*\3*\5*\u04cf\n*\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\5*\u04d8\n*\3+\3+\3+\5+\u04dd\n+\3,\3,\3,\3,\3")
        buf.write(",\5,\u04e4\n,\3,\3,\5,\u04e8\n,\5,\u04ea\n,\3-\5-\u04ed")
        buf.write("\n-\3-\3-\3-\3-\7-\u04f3\n-\f-\16-\u04f6\13-\3-\5-\u04f9")
        buf.write("\n-\3-\5-\u04fc\n-\3.\3.\3.\3.\5.\u0502\n.\7.\u0504\n")
        buf.write(".\f.\16.\u0507\13.\3/\3/\5/\u050b\n/\3/\3/\3/\7/\u0510")
        buf.write("\n/\f/\16/\u0513\13/\3/\3/\3/\3/\7/\u0519\n/\f/\16/\u051c")
        buf.write("\13/\3/\5/\u051f\n/\5/\u0521\n/\3/\3/\5/\u0525\n/\3/\3")
        buf.write("/\3/\3/\3/\7/\u052c\n/\f/\16/\u052f\13/\3/\3/\5/\u0533")
        buf.write("\n/\5/\u0535\n/\3/\3/\3/\3/\3/\3/\3/\3/\3/\7/\u0540\n")
        buf.write("/\f/\16/\u0543\13/\5/\u0545\n/\3/\5/\u0548\n/\3\60\3\60")
        buf.write("\3\61\5\61\u054d\n\61\3\61\3\61\5\61\u0551\n\61\3\61\5")
        buf.write("\61\u0554\n\61\3\62\5\62\u0557\n\62\3\62\3\62\3\62\5\62")
        buf.write("\u055c\n\62\3\62\3\62\5\62\u0560\n\62\3\62\6\62\u0563")
        buf.write("\n\62\r\62\16\62\u0564\3\62\5\62\u0568\n\62\3\62\5\62")
        buf.write("\u056b\n\62\3\63\3\63\3\63\5\63\u0570\n\63\3\63\3\63\5")
        buf.write("\63\u0574\n\63\3\63\5\63\u0577\n\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\5\63\u057e\n\63\3\63\3\63\3\63\5\63\u0583\n\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\7\63\u058a\n\63\f\63\16\63\u058d")
        buf.write("\13\63\3\63\3\63\5\63\u0591\n\63\3\63\5\63\u0594\n\63")
        buf.write("\3\63\3\63\3\63\3\63\7\63\u059a\n\63\f\63\16\63\u059d")
        buf.write("\13\63\3\63\5\63\u05a0\n\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\5\63\u05a8\n\63\3\63\5\63\u05ab\n\63\5\63\u05ad\n")
        buf.write("\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u05b6\n\64")
        buf.write("\3\64\5\64\u05b9\n\64\5\64\u05bb\n\64\3\65\3\65\5\65\u05bf")
        buf.write("\n\65\3\65\3\65\5\65\u05c3\n\65\3\65\3\65\5\65\u05c7\n")
        buf.write("\65\3\65\5\65\u05ca\n\65\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\7\66\u05d3\n\66\f\66\16\66\u05d6\13\66\3\66\3\66")
        buf.write("\5\66\u05da\n\66\3\67\3\67\5\67\u05de\n\67\3\67\3\67\5")
        buf.write("\67\u05e2\n\67\38\58\u05e5\n8\38\38\38\58\u05ea\n8\38")
        buf.write("\38\38\38\58\u05f0\n8\38\38\38\38\38\58\u05f7\n8\38\3")
        buf.write("8\38\78\u05fc\n8\f8\168\u05ff\138\38\38\38\38\78\u0605")
        buf.write("\n8\f8\168\u0608\138\38\58\u060b\n8\58\u060d\n8\38\38")
        buf.write("\58\u0611\n8\38\58\u0614\n8\39\39\39\39\79\u061a\n9\f")
        buf.write("9\169\u061d\139\39\39\3:\5:\u0622\n:\3:\3:\3:\5:\u0627")
        buf.write("\n:\3:\3:\3:\3:\5:\u062d\n:\3:\3:\3:\3:\3:\5:\u0634\n")
        buf.write(":\3:\3:\3:\7:\u0639\n:\f:\16:\u063c\13:\3:\3:\5:\u0640")
        buf.write("\n:\3:\5:\u0643\n:\3:\5:\u0646\n:\3:\5:\u0649\n:\3;\3")
        buf.write(";\3;\5;\u064e\n;\3;\3;\3;\5;\u0653\n;\3;\3;\3;\3;\3;\5")
        buf.write(";\u065a\n;\3<\3<\5<\u065e\n<\3<\3<\5<\u0662\n<\3=\3=\3")
        buf.write("=\3=\3=\3=\3>\3>\5>\u066c\n>\3>\3>\3>\3>\3>\7>\u0673\n")
        buf.write(">\f>\16>\u0676\13>\5>\u0678\n>\3>\3>\3>\3>\3>\7>\u067f")
        buf.write("\n>\f>\16>\u0682\13>\3>\5>\u0685\n>\3>\3>\3?\3?\3?\3?")
        buf.write("\5?\u068d\n?\3?\3?\3?\3?\3?\7?\u0694\n?\f?\16?\u0697\13")
        buf.write("?\5?\u0699\n?\3?\3?\3?\3?\3?\7?\u06a0\n?\f?\16?\u06a3")
        buf.write("\13?\5?\u06a5\n?\3?\5?\u06a8\n?\3?\5?\u06ab\n?\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\5@\u06b5\n@\5@\u06b7\n@\3A\3A\3A\3A\3")
        buf.write("A\3A\3A\5A\u06c0\nA\3B\3B\3B\3B\3B\7B\u06c7\nB\fB\16B")
        buf.write("\u06ca\13B\3B\5B\u06cd\nB\3B\3B\3C\3C\3C\5C\u06d4\nC\3")
        buf.write("C\3C\3C\7C\u06d9\nC\fC\16C\u06dc\13C\3C\5C\u06df\nC\3")
        buf.write("C\3C\5C\u06e3\nC\3D\3D\3D\3D\3D\7D\u06ea\nD\fD\16D\u06ed")
        buf.write("\13D\3D\5D\u06f0\nD\3D\3D\5D\u06f4\nD\3D\3D\3D\5D\u06f9")
        buf.write("\nD\3E\3E\5E\u06fd\nE\3E\3E\3E\7E\u0702\nE\fE\16E\u0705")
        buf.write("\13E\3F\3F\3F\3F\3F\7F\u070c\nF\fF\16F\u070f\13F\3G\3")
        buf.write("G\3G\3G\5G\u0715\nG\3H\3H\3H\5H\u071a\nH\3H\5H\u071d\n")
        buf.write("H\3H\3H\5H\u0721\nH\3I\3I\3J\3J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\5J\u072f\nJ\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u073b\n")
        buf.write("K\3L\3L\3L\3L\3L\3L\3L\5L\u0744\nL\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\5M\u074d\nM\3M\3M\5M\u0751\nM\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\5M\u075b\nM\3M\5M\u075e\nM\3M\3M\3M\3M\3M\3M\3M\5M\u0767")
        buf.write("\nM\3M\3M\3M\3M\3M\3M\3M\5M\u0770\nM\3M\5M\u0773\nM\3")
        buf.write("M\3M\3M\3M\5M\u0779\nM\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\5M\u0787\nM\3M\3M\5M\u078b\nM\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\5M\u0796\nM\3M\3M\3M\5M\u079b\nM\3N\3N\3N\3O\3")
        buf.write("O\3O\3P\3P\3P\6P\u07a6\nP\rP\16P\u07a7\3Q\3Q\3Q\6Q\u07ad")
        buf.write("\nQ\rQ\16Q\u07ae\3R\3R\3R\3R\3S\3S\5S\u07b7\nS\3S\3S\3")
        buf.write("S\5S\u07bc\nS\7S\u07be\nS\fS\16S\u07c1\13S\3T\3T\3U\3")
        buf.write("U\3V\3V\3W\3W\3X\3X\5X\u07cd\nX\3Y\3Y\3Z\3Z\3[\3[\3\\")
        buf.write("\3\\\3]\3]\3^\3^\3_\3_\3`\3`\3a\3a\3b\3b\3c\3c\3d\3d\3")
        buf.write("e\3e\3f\3f\3g\3g\3h\3h\3i\3i\3j\3j\3k\3k\3l\3l\3m\3m\3")
        buf.write("n\3n\3o\3o\3p\3p\3q\3q\3r\3r\3r\3r\3r\3r\3r\5r\u0808\n")
        buf.write("r\3r\4\u01ba\u01da\3Bs\2\4\6\b\n\f\16\20\22\24\26\30\32")
        buf.write("\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfh")
        buf.write("jlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\2\36\5\2<<")
        buf.write("GGTT\4\2\61\61DD\3\2\u0087\u0088\4\2\u0094\u0094\u00ad")
        buf.write("\u00ad\3\2\n\13\4\2==\u008f\u008f\4\2::jj\4\2<<TT\7\2")
        buf.write("\33\33JJSS||\u0080\u0080\6\2VV\u0086\u0086\u008c\u008c")
        buf.write("\u0093\u0093\4\2\t\t\16\17\3\2\20\23\3\2\24\27\6\2OOc")
        buf.write("ceexx\5\2\33\33JJ\u0080\u0080\7\2\668jj\u00ae\u00af\u00bc")
        buf.write("\u00bc\u00be\u00bf\4\2\37\37@@\5\2\u0082\u0082\u009c\u009c")
        buf.write("\u00b5\u00b5\4\2\7\7ll\3\2\u00b2\u00b3\4\2$$>>\4\2\u0099")
        buf.write("\u0099\u00a4\u00a4\4\2\u00a1\u00a1\u00a8\u00a8\4\2\u00a2")
        buf.write("\u00a2\u00a9\u00aa\4\2\u00a3\u00a3\u00a5\u00a5\4\2\n\f")
        buf.write("hh\4\2\u00bb\u00bb\u00be\u00be\4\2\33}\177\u00b6\2\u0924")
        buf.write("\2\u00e7\3\2\2\2\4\u00ef\3\2\2\2\6\u0109\3\2\2\2\b\u0125")
        buf.write("\3\2\2\2\n\u0145\3\2\2\2\f\u014f\3\2\2\2\16\u0157\3\2")
        buf.write("\2\2\20\u0161\3\2\2\2\22\u0165\3\2\2\2\24\u0170\3\2\2")
        buf.write("\2\26\u0173\3\2\2\2\30\u0179\3\2\2\2\32\u019b\3\2\2\2")
        buf.write("\34\u01a4\3\2\2\2\36\u01cd\3\2\2\2 \u01d8\3\2\2\2\"\u01ea")
        buf.write("\3\2\2\2$\u0220\3\2\2\2&\u0226\3\2\2\2(\u024f\3\2\2\2")
        buf.write("*\u0279\3\2\2\2,\u027d\3\2\2\2.\u02bd\3\2\2\2\60\u02dd")
        buf.write("\3\2\2\2\62\u02fa\3\2\2\2\64\u030f\3\2\2\2\66\u031d\3")
        buf.write("\2\2\28\u0328\3\2\2\2:\u033c\3\2\2\2<\u0349\3\2\2\2>\u035b")
        buf.write("\3\2\2\2@\u0361\3\2\2\2B\u03c6\3\2\2\2D\u0442\3\2\2\2")
        buf.write("F\u044c\3\2\2\2H\u044e\3\2\2\2J\u0459\3\2\2\2L\u0463\3")
        buf.write("\2\2\2N\u0492\3\2\2\2P\u049b\3\2\2\2R\u04ca\3\2\2\2T\u04dc")
        buf.write("\3\2\2\2V\u04de\3\2\2\2X\u04ec\3\2\2\2Z\u04fd\3\2\2\2")
        buf.write("\\\u0547\3\2\2\2^\u0549\3\2\2\2`\u054c\3\2\2\2b\u0556")
        buf.write("\3\2\2\2d\u05ac\3\2\2\2f\u05ba\3\2\2\2h\u05c9\3\2\2\2")
        buf.write("j\u05d9\3\2\2\2l\u05e1\3\2\2\2n\u05e4\3\2\2\2p\u0615\3")
        buf.write("\2\2\2r\u0621\3\2\2\2t\u064d\3\2\2\2v\u065b\3\2\2\2x\u0663")
        buf.write("\3\2\2\2z\u0669\3\2\2\2|\u0688\3\2\2\2~\u06ac\3\2\2\2")
        buf.write("\u0080\u06b8\3\2\2\2\u0082\u06c1\3\2\2\2\u0084\u06d0\3")
        buf.write("\2\2\2\u0086\u06e4\3\2\2\2\u0088\u06fa\3\2\2\2\u008a\u0706")
        buf.write("\3\2\2\2\u008c\u0710\3\2\2\2\u008e\u0716\3\2\2\2\u0090")
        buf.write("\u0722\3\2\2\2\u0092\u072e\3\2\2\2\u0094\u073a\3\2\2\2")
        buf.write("\u0096\u0743\3\2\2\2\u0098\u079a\3\2\2\2\u009a\u079c\3")
        buf.write("\2\2\2\u009c\u079f\3\2\2\2\u009e\u07a2\3\2\2\2\u00a0\u07a9")
        buf.write("\3\2\2\2\u00a2\u07b0\3\2\2\2\u00a4\u07b4\3\2\2\2\u00a6")
        buf.write("\u07c2\3\2\2\2\u00a8\u07c4\3\2\2\2\u00aa\u07c6\3\2\2\2")
        buf.write("\u00ac\u07c8\3\2\2\2\u00ae\u07cc\3\2\2\2\u00b0\u07ce\3")
        buf.write("\2\2\2\u00b2\u07d0\3\2\2\2\u00b4\u07d2\3\2\2\2\u00b6\u07d4")
        buf.write("\3\2\2\2\u00b8\u07d6\3\2\2\2\u00ba\u07d8\3\2\2\2\u00bc")
        buf.write("\u07da\3\2\2\2\u00be\u07dc\3\2\2\2\u00c0\u07de\3\2\2\2")
        buf.write("\u00c2\u07e0\3\2\2\2\u00c4\u07e2\3\2\2\2\u00c6\u07e4\3")
        buf.write("\2\2\2\u00c8\u07e6\3\2\2\2\u00ca\u07e8\3\2\2\2\u00cc\u07ea")
        buf.write("\3\2\2\2\u00ce\u07ec\3\2\2\2\u00d0\u07ee\3\2\2\2\u00d2")
        buf.write("\u07f0\3\2\2\2\u00d4\u07f2\3\2\2\2\u00d6\u07f4\3\2\2\2")
        buf.write("\u00d8\u07f6\3\2\2\2\u00da\u07f8\3\2\2\2\u00dc\u07fa\3")
        buf.write("\2\2\2\u00de\u07fc\3\2\2\2\u00e0\u07fe\3\2\2\2\u00e2\u0807")
        buf.write("\3\2\2\2\u00e4\u00e6\5\4\3\2\u00e5\u00e4\3\2\2\2\u00e6")
        buf.write("\u00e9\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2")
        buf.write("\u00e8\u00ea\3\2\2\2\u00e9\u00e7\3\2\2\2\u00ea\u00eb\7")
        buf.write("\2\2\3\u00eb\3\3\2\2\2\u00ec\u00ee\7\3\2\2\u00ed\u00ec")
        buf.write("\3\2\2\2\u00ee\u00f1\3\2\2\2\u00ef\u00ed\3\2\2\2\u00ef")
        buf.write("\u00f0\3\2\2\2\u00f0\u00f2\3\2\2\2\u00f1\u00ef\3\2\2\2")
        buf.write("\u00f2\u00fb\5\6\4\2\u00f3\u00f5\7\3\2\2\u00f4\u00f3\3")
        buf.write("\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f6\u00f7")
        buf.write("\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00fa\5\6\4\2\u00f9")
        buf.write("\u00f4\3\2\2\2\u00fa\u00fd\3\2\2\2\u00fb\u00f9\3\2\2\2")
        buf.write("\u00fb\u00fc\3\2\2\2\u00fc\u0101\3\2\2\2\u00fd\u00fb\3")
        buf.write("\2\2\2\u00fe\u0100\7\3\2\2\u00ff\u00fe\3\2\2\2\u0100\u0103")
        buf.write("\3\2\2\2\u0101\u00ff\3\2\2\2\u0101\u0102\3\2\2\2\u0102")
        buf.write("\5\3\2\2\2\u0103\u0101\3\2\2\2\u0104\u0107\7I\2\2\u0105")
        buf.write("\u0106\7t\2\2\u0106\u0108\7q\2\2\u0107\u0105\3\2\2\2\u0107")
        buf.write("\u0108\3\2\2\2\u0108\u010a\3\2\2\2\u0109\u0104\3\2\2\2")
        buf.write("\u0109\u010a\3\2\2\2\u010a\u0123\3\2\2\2\u010b\u0124\5")
        buf.write("\b\5\2\u010c\u0124\5\n\6\2\u010d\u0124\5\f\7\2\u010e\u0124")
        buf.write("\5\16\b\2\u010f\u0124\5\20\t\2\u0110\u0124\5\30\r\2\u0111")
        buf.write("\u0124\5\34\17\2\u0112\u0124\5,\27\2\u0113\u0124\5.\30")
        buf.write("\2\u0114\u0124\5\60\31\2\u0115\u0124\5:\36\2\u0116\u0124")
        buf.write("\5<\37\2\u0117\u0124\5> \2\u0118\u0124\5@!\2\u0119\u0124")
        buf.write("\5L\'\2\u011a\u0124\5R*\2\u011b\u0124\5V,\2\u011c\u0124")
        buf.write("\5\26\f\2\u011d\u0124\5\22\n\2\u011e\u0124\5\24\13\2\u011f")
        buf.write("\u0124\5X-\2\u0120\u0124\5n8\2\u0121\u0124\5r:\2\u0122")
        buf.write("\u0124\5v<\2\u0123\u010b\3\2\2\2\u0123\u010c\3\2\2\2\u0123")
        buf.write("\u010d\3\2\2\2\u0123\u010e\3\2\2\2\u0123\u010f\3\2\2\2")
        buf.write("\u0123\u0110\3\2\2\2\u0123\u0111\3\2\2\2\u0123\u0112\3")
        buf.write("\2\2\2\u0123\u0113\3\2\2\2\u0123\u0114\3\2\2\2\u0123\u0115")
        buf.write("\3\2\2\2\u0123\u0116\3\2\2\2\u0123\u0117\3\2\2\2\u0123")
        buf.write("\u0118\3\2\2\2\u0123\u0119\3\2\2\2\u0123\u011a\3\2\2\2")
        buf.write("\u0123\u011b\3\2\2\2\u0123\u011c\3\2\2\2\u0123\u011d\3")
        buf.write("\2\2\2\u0123\u011e\3\2\2\2\u0123\u011f\3\2\2\2\u0123\u0120")
        buf.write("\3\2\2\2\u0123\u0121\3\2\2\2\u0123\u0122\3\2\2\2\u0124")
        buf.write("\7\3\2\2\2\u0125\u0126\7 \2\2\u0126\u012a\7\u0086\2\2")
        buf.write("\u0127\u0128\5\u00b8]\2\u0128\u0129\7\4\2\2\u0129\u012b")
        buf.write("\3\2\2\2\u012a\u0127\3\2\2\2\u012a\u012b\3\2\2\2\u012b")
        buf.write("\u012c\3\2\2\2\u012c\u0143\5\u00ba^\2\u012d\u0137\7{\2")
        buf.write("\2\u012e\u012f\7\u008a\2\2\u012f\u0138\5\u00ba^\2\u0130")
        buf.write("\u0132\7\60\2\2\u0131\u0130\3\2\2\2\u0131\u0132\3\2\2")
        buf.write("\2\u0132\u0133\3\2\2\2\u0133\u0134\5\u00be`\2\u0134\u0135")
        buf.write("\7\u008a\2\2\u0135\u0136\5\u00be`\2\u0136\u0138\3\2\2")
        buf.write("\2\u0137\u012e\3\2\2\2\u0137\u0131\3\2\2\2\u0138\u0144")
        buf.write("\3\2\2\2\u0139\u013b\7\35\2\2\u013a\u013c\7\60\2\2\u013b")
        buf.write("\u013a\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013d\3\2\2\2")
        buf.write("\u013d\u0144\5\36\20\2\u013e\u0140\7A\2\2\u013f\u0141")
        buf.write("\7\60\2\2\u0140\u013f\3\2\2\2\u0140\u0141\3\2\2\2\u0141")
        buf.write("\u0142\3\2\2\2\u0142\u0144\5\u00be`\2\u0143\u012d\3\2")
        buf.write("\2\2\u0143\u0139\3\2\2\2\u0143\u013e\3\2\2\2\u0144\t\3")
        buf.write("\2\2\2\u0145\u014d\7!\2\2\u0146\u014e\5\u00b8]\2\u0147")
        buf.write("\u0148\5\u00b8]\2\u0148\u0149\7\4\2\2\u0149\u014b\3\2")
        buf.write("\2\2\u014a\u0147\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014c")
        buf.write("\3\2\2\2\u014c\u014e\5\u00bc_\2\u014d\u0146\3\2\2\2\u014d")
        buf.write("\u014a\3\2\2\2\u014d\u014e\3\2\2\2\u014e\13\3\2\2\2\u014f")
        buf.write("\u0151\7%\2\2\u0150\u0152\79\2\2\u0151\u0150\3\2\2\2\u0151")
        buf.write("\u0152\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0154\5B\"\2")
        buf.write("\u0154\u0155\7#\2\2\u0155\u0156\5\u00b8]\2\u0156\r\3\2")
        buf.write("\2\2\u0157\u0159\7(\2\2\u0158\u015a\t\2\2\2\u0159\u0158")
        buf.write("\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015f\3\2\2\2\u015b")
        buf.write("\u015d\7\u008b\2\2\u015c\u015e\5\u00d2j\2\u015d\u015c")
        buf.write("\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u0160\3\2\2\2\u015f")
        buf.write("\u015b\3\2\2\2\u015f\u0160\3\2\2\2\u0160\17\3\2\2\2\u0161")
        buf.write("\u0163\t\3\2\2\u0162\u0164\7\u008b\2\2\u0163\u0162\3\2")
        buf.write("\2\2\u0163\u0164\3\2\2\2\u0164\21\3\2\2\2\u0165\u0167")
        buf.write("\7\u0080\2\2\u0166\u0168\7\u008b\2\2\u0167\u0166\3\2\2")
        buf.write("\2\u0167\u0168\3\2\2\2\u0168\u016e\3\2\2\2\u0169\u016b")
        buf.write("\7\u008a\2\2\u016a\u016c\7\u0083\2\2\u016b\u016a\3\2\2")
        buf.write("\2\u016b\u016c\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u016f")
        buf.write("\5\u00ceh\2\u016e\u0169\3\2\2\2\u016e\u016f\3\2\2\2\u016f")
        buf.write("\23\3\2\2\2\u0170\u0171\7\u0083\2\2\u0171\u0172\5\u00ce")
        buf.write("h\2\u0172\25\3\2\2\2\u0173\u0175\7z\2\2\u0174\u0176\7")
        buf.write("\u0083\2\2\u0175\u0174\3\2\2\2\u0175\u0176\3\2\2\2\u0176")
        buf.write("\u0177\3\2\2\2\u0177\u0178\5\u00ceh\2\u0178\27\3\2\2\2")
        buf.write("\u0179\u017b\7\64\2\2\u017a\u017c\7\u008e\2\2\u017b\u017a")
        buf.write("\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u017d\3\2\2\2\u017d")
        buf.write("\u0181\7V\2\2\u017e\u017f\7R\2\2\u017f\u0180\7h\2\2\u0180")
        buf.write("\u0182\7H\2\2\u0181\u017e\3\2\2\2\u0181\u0182\3\2\2\2")
        buf.write("\u0182\u0186\3\2\2\2\u0183\u0184\5\u00b8]\2\u0184\u0185")
        buf.write("\7\4\2\2\u0185\u0187\3\2\2\2\u0186\u0183\3\2\2\2\u0186")
        buf.write("\u0187\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u0189\5\u00c4")
        buf.write("c\2\u0189\u018a\7m\2\2\u018a\u018b\5\u00ba^\2\u018b\u018c")
        buf.write("\7\5\2\2\u018c\u0191\5\32\16\2\u018d\u018e\7\7\2\2\u018e")
        buf.write("\u0190\5\32\16\2\u018f\u018d\3\2\2\2\u0190\u0193\3\2\2")
        buf.write("\2\u0191\u018f\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0194")
        buf.write("\3\2\2\2\u0193\u0191\3\2\2\2\u0194\u0197\7\6\2\2\u0195")
        buf.write("\u0196\7\u0096\2\2\u0196\u0198\5B\"\2\u0197\u0195\3\2")
        buf.write("\2\2\u0197\u0198\3\2\2\2\u0198\31\3\2\2\2\u0199\u019c")
        buf.write("\5\u00be`\2\u019a\u019c\5B\"\2\u019b\u0199\3\2\2\2\u019b")
        buf.write("\u019a\3\2\2\2\u019c\u019f\3\2\2\2\u019d\u019e\7/\2\2")
        buf.write("\u019e\u01a0\5\u00c0a\2\u019f\u019d\3\2\2\2\u019f\u01a0")
        buf.write("\3\2\2\2\u01a0\u01a2\3\2\2\2\u01a1\u01a3\5\u0090I\2\u01a2")
        buf.write("\u01a1\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\33\3\2\2\2\u01a4")
        buf.write("\u01a6\7\64\2\2\u01a5\u01a7\t\4\2\2\u01a6\u01a5\3\2\2")
        buf.write("\2\u01a6\u01a7\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01ac")
        buf.write("\7\u0086\2\2\u01a9\u01aa\7R\2\2\u01aa\u01ab\7h\2\2\u01ab")
        buf.write("\u01ad\7H\2\2\u01ac\u01a9\3\2\2\2\u01ac\u01ad\3\2\2\2")
        buf.write("\u01ad\u01b1\3\2\2\2\u01ae\u01af\5\u00b8]\2\u01af\u01b0")
        buf.write("\7\4\2\2\u01b0\u01b2\3\2\2\2\u01b1\u01ae\3\2\2\2\u01b1")
        buf.write("\u01b2\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01cb\5\u00ba")
        buf.write("^\2\u01b4\u01b5\7\5\2\2\u01b5\u01ba\5\36\20\2\u01b6\u01b7")
        buf.write("\7\7\2\2\u01b7\u01b9\5\36\20\2\u01b8\u01b6\3\2\2\2\u01b9")
        buf.write("\u01bc\3\2\2\2\u01ba\u01bb\3\2\2\2\u01ba\u01b8\3\2\2\2")
        buf.write("\u01bb\u01c1\3\2\2\2\u01bc\u01ba\3\2\2\2\u01bd\u01be\7")
        buf.write("\7\2\2\u01be\u01c0\5&\24\2\u01bf\u01bd\3\2\2\2\u01c0\u01c3")
        buf.write("\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2")
        buf.write("\u01c4\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c4\u01c7\7\6\2\2")
        buf.write("\u01c5\u01c6\7\u0098\2\2\u01c6\u01c8\7\u00bb\2\2\u01c7")
        buf.write("\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01cc\3\2\2\2")
        buf.write("\u01c9\u01ca\7#\2\2\u01ca\u01cc\5X-\2\u01cb\u01b4\3\2")
        buf.write("\2\2\u01cb\u01c9\3\2\2\2\u01cc\35\3\2\2\2\u01cd\u01cf")
        buf.write("\5\u00be`\2\u01ce\u01d0\5 \21\2\u01cf\u01ce\3\2\2\2\u01cf")
        buf.write("\u01d0\3\2\2\2\u01d0\u01d4\3\2\2\2\u01d1\u01d3\5\"\22")
        buf.write("\2\u01d2\u01d1\3\2\2\2\u01d3\u01d6\3\2\2\2\u01d4\u01d2")
        buf.write("\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\37\3\2\2\2\u01d6\u01d4")
        buf.write("\3\2\2\2\u01d7\u01d9\5\u00b4[\2\u01d8\u01d7\3\2\2\2\u01d9")
        buf.write("\u01da\3\2\2\2\u01da\u01db\3\2\2\2\u01da\u01d8\3\2\2\2")
        buf.write("\u01db\u01e6\3\2\2\2\u01dc\u01dd\7\5\2\2\u01dd\u01de\5")
        buf.write("$\23\2\u01de\u01df\7\6\2\2\u01df\u01e7\3\2\2\2\u01e0\u01e1")
        buf.write("\7\5\2\2\u01e1\u01e2\5$\23\2\u01e2\u01e3\7\7\2\2\u01e3")
        buf.write("\u01e4\5$\23\2\u01e4\u01e5\7\6\2\2\u01e5\u01e7\3\2\2\2")
        buf.write("\u01e6\u01dc\3\2\2\2\u01e6\u01e0\3\2\2\2\u01e6\u01e7\3")
        buf.write("\2\2\2\u01e7!\3\2\2\2\u01e8\u01e9\7\63\2\2\u01e9\u01eb")
        buf.write("\5\u00b4[\2\u01ea\u01e8\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb")
        buf.write("\u021d\3\2\2\2\u01ec\u01ed\7s\2\2\u01ed\u01ef\7a\2\2\u01ee")
        buf.write("\u01f0\5\u0090I\2\u01ef\u01ee\3\2\2\2\u01ef\u01f0\3\2")
        buf.write("\2\2\u01f0\u01f2\3\2\2\2\u01f1\u01f3\5*\26\2\u01f2\u01f1")
        buf.write("\3\2\2\2\u01f2\u01f3\3\2\2\2\u01f3\u01f5\3\2\2\2\u01f4")
        buf.write("\u01f6\7&\2\2\u01f5\u01f4\3\2\2\2\u01f5\u01f6\3\2\2\2")
        buf.write("\u01f6\u021e\3\2\2\2\u01f7\u01f9\7h\2\2\u01f8\u01f7\3")
        buf.write("\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fd")
        buf.write("\7j\2\2\u01fb\u01fd\7\u008e\2\2\u01fc\u01f8\3\2\2\2\u01fc")
        buf.write("\u01fb\3\2\2\2\u01fd\u01ff\3\2\2\2\u01fe\u0200\5*\26\2")
        buf.write("\u01ff\u01fe\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u021e\3")
        buf.write("\2\2\2\u0201\u0202\7.\2\2\u0202\u0203\7\5\2\2\u0203\u0204")
        buf.write("\5B\"\2\u0204\u0205\7\6\2\2\u0205\u021e\3\2\2\2\u0206")
        buf.write("\u020d\7:\2\2\u0207\u020e\5$\23\2\u0208\u020e\5F$\2\u0209")
        buf.write("\u020a\7\5\2\2\u020a\u020b\5B\"\2\u020b\u020c\7\6\2\2")
        buf.write("\u020c\u020e\3\2\2\2\u020d\u0207\3\2\2\2\u020d\u0208\3")
        buf.write("\2\2\2\u020d\u0209\3\2\2\2\u020e\u021e\3\2\2\2\u020f\u0210")
        buf.write("\7/\2\2\u0210\u021e\5\u00c0a\2\u0211\u021e\5(\25\2\u0212")
        buf.write("\u0213\7\u00ab\2\2\u0213\u0215\7\u00ac\2\2\u0214\u0212")
        buf.write("\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u0216\3\2\2\2\u0216")
        buf.write("\u0217\7#\2\2\u0217\u0218\7\5\2\2\u0218\u0219\5B\"\2\u0219")
        buf.write("\u021b\7\6\2\2\u021a\u021c\t\5\2\2\u021b\u021a\3\2\2\2")
        buf.write("\u021b\u021c\3\2\2\2\u021c\u021e\3\2\2\2\u021d\u01ec\3")
        buf.write("\2\2\2\u021d\u01fc\3\2\2\2\u021d\u0201\3\2\2\2\u021d\u0206")
        buf.write("\3\2\2\2\u021d\u020f\3\2\2\2\u021d\u0211\3\2\2\2\u021d")
        buf.write("\u0214\3\2\2\2\u021e#\3\2\2\2\u021f\u0221\t\6\2\2\u0220")
        buf.write("\u021f\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0222\3\2\2\2")
        buf.write("\u0222\u0223\7\u00bc\2\2\u0223%\3\2\2\2\u0224\u0225\7")
        buf.write("\63\2\2\u0225\u0227\5\u00b4[\2\u0226\u0224\3\2\2\2\u0226")
        buf.write("\u0227\3\2\2\2\u0227\u024d\3\2\2\2\u0228\u0229\7s\2\2")
        buf.write("\u0229\u022c\7a\2\2\u022a\u022c\7\u008e\2\2\u022b\u0228")
        buf.write("\3\2\2\2\u022b\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d")
        buf.write("\u022e\7\5\2\2\u022e\u0233\5\32\16\2\u022f\u0230\7\7\2")
        buf.write("\2\u0230\u0232\5\32\16\2\u0231\u022f\3\2\2\2\u0232\u0235")
        buf.write("\3\2\2\2\u0233\u0231\3\2\2\2\u0233\u0234\3\2\2\2\u0234")
        buf.write("\u0236\3\2\2\2\u0235\u0233\3\2\2\2\u0236\u0238\7\6\2\2")
        buf.write("\u0237\u0239\5*\26\2\u0238\u0237\3\2\2\2\u0238\u0239\3")
        buf.write("\2\2\2\u0239\u024e\3\2\2\2\u023a\u023b\7.\2\2\u023b\u023c")
        buf.write("\7\5\2\2\u023c\u023d\5B\"\2\u023d\u023e\7\6\2\2\u023e")
        buf.write("\u024e\3\2\2\2\u023f\u0240\7L\2\2\u0240\u0241\7a\2\2\u0241")
        buf.write("\u0242\7\5\2\2\u0242\u0247\5\u00be`\2\u0243\u0244\7\7")
        buf.write("\2\2\u0244\u0246\5\u00be`\2\u0245\u0243\3\2\2\2\u0246")
        buf.write("\u0249\3\2\2\2\u0247\u0245\3\2\2\2\u0247\u0248\3\2\2\2")
        buf.write("\u0248\u024a\3\2\2\2\u0249\u0247\3\2\2\2\u024a\u024b\7")
        buf.write("\6\2\2\u024b\u024c\5(\25\2\u024c\u024e\3\2\2\2\u024d\u022b")
        buf.write("\3\2\2\2\u024d\u023a\3\2\2\2\u024d\u023f\3\2\2\2\u024e")
        buf.write("\'\3\2\2\2\u024f\u0250\7w\2\2\u0250\u025c\5\u00c2b\2\u0251")
        buf.write("\u0252\7\5\2\2\u0252\u0257\5\u00be`\2\u0253\u0254\7\7")
        buf.write("\2\2\u0254\u0256\5\u00be`\2\u0255\u0253\3\2\2\2\u0256")
        buf.write("\u0259\3\2\2\2\u0257\u0255\3\2\2\2\u0257\u0258\3\2\2\2")
        buf.write("\u0258\u025a\3\2\2\2\u0259\u0257\3\2\2\2\u025a\u025b\7")
        buf.write("\6\2\2\u025b\u025d\3\2\2\2\u025c\u0251\3\2\2\2\u025c\u025d")
        buf.write("\3\2\2\2\u025d\u026c\3\2\2\2\u025e\u025f\7m\2\2\u025f")
        buf.write("\u0266\t\7\2\2\u0260\u0261\7\u0085\2\2\u0261\u0267\t\b")
        buf.write("\2\2\u0262\u0267\7+\2\2\u0263\u0267\7}\2\2\u0264\u0265")
        buf.write("\7g\2\2\u0265\u0267\7\34\2\2\u0266\u0260\3\2\2\2\u0266")
        buf.write("\u0262\3\2\2\2\u0266\u0263\3\2\2\2\u0266\u0264\3\2\2\2")
        buf.write("\u0267\u026b\3\2\2\2\u0268\u0269\7e\2\2\u0269\u026b\5")
        buf.write("\u00b4[\2\u026a\u025e\3\2\2\2\u026a\u0268\3\2\2\2\u026b")
        buf.write("\u026e\3\2\2\2\u026c\u026a\3\2\2\2\u026c\u026d\3\2\2\2")
        buf.write("\u026d\u0277\3\2\2\2\u026e\u026c\3\2\2\2\u026f\u0271\7")
        buf.write("h\2\2\u0270\u026f\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0272")
        buf.write("\3\2\2\2\u0272\u0275\7;\2\2\u0273\u0274\7X\2\2\u0274\u0276")
        buf.write("\t\t\2\2\u0275\u0273\3\2\2\2\u0275\u0276\3\2\2\2\u0276")
        buf.write("\u0278\3\2\2\2\u0277\u0270\3\2\2\2\u0277\u0278\3\2\2\2")
        buf.write("\u0278)\3\2\2\2\u0279\u027a\7m\2\2\u027a\u027b\7\62\2")
        buf.write("\2\u027b\u027c\t\n\2\2\u027c+\3\2\2\2\u027d\u027f\7\64")
        buf.write("\2\2\u027e\u0280\t\4\2\2\u027f\u027e\3\2\2\2\u027f\u0280")
        buf.write("\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0285\7\u008c\2\2\u0282")
        buf.write("\u0283\7R\2\2\u0283\u0284\7h\2\2\u0284\u0286\7H\2\2\u0285")
        buf.write("\u0282\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u028a\3\2\2\2")
        buf.write("\u0287\u0288\5\u00b8]\2\u0288\u0289\7\4\2\2\u0289\u028b")
        buf.write("\3\2\2\2\u028a\u0287\3\2\2\2\u028a\u028b\3\2\2\2\u028b")
        buf.write("\u028c\3\2\2\2\u028c\u0291\5\u00c6d\2\u028d\u0292\7\'")
        buf.write("\2\2\u028e\u0292\7\36\2\2\u028f\u0290\7[\2\2\u0290\u0292")
        buf.write("\7k\2\2\u0291\u028d\3\2\2\2\u0291\u028e\3\2\2\2\u0291")
        buf.write("\u028f\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u02a1\3\2\2\2")
        buf.write("\u0293\u02a2\7=\2\2\u0294\u02a2\7Z\2\2\u0295\u029f\7\u008f")
        buf.write("\2\2\u0296\u0297\7k\2\2\u0297\u029c\5\u00be`\2\u0298\u0299")
        buf.write("\7\7\2\2\u0299\u029b\5\u00be`\2\u029a\u0298\3\2\2\2\u029b")
        buf.write("\u029e\3\2\2\2\u029c\u029a\3\2\2\2\u029c\u029d\3\2\2\2")
        buf.write("\u029d\u02a0\3\2\2\2\u029e\u029c\3\2\2\2\u029f\u0296\3")
        buf.write("\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a2\3\2\2\2\u02a1\u0293")
        buf.write("\3\2\2\2\u02a1\u0294\3\2\2\2\u02a1\u0295\3\2\2\2\u02a2")
        buf.write("\u02a3\3\2\2\2\u02a3\u02a4\7m\2\2\u02a4\u02a8\5\u00ba")
        buf.write("^\2\u02a5\u02a6\7K\2\2\u02a6\u02a7\7B\2\2\u02a7\u02a9")
        buf.write("\7\u0081\2\2\u02a8\u02a5\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9")
        buf.write("\u02ac\3\2\2\2\u02aa\u02ab\7\u0095\2\2\u02ab\u02ad\5B")
        buf.write("\"\2\u02ac\u02aa\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad\u02ae")
        buf.write("\3\2\2\2\u02ae\u02b7\7(\2\2\u02af\u02b4\5n8\2\u02b0\u02b4")
        buf.write("\5L\'\2\u02b1\u02b4\5:\36\2\u02b2\u02b4\5X-\2\u02b3\u02af")
        buf.write("\3\2\2\2\u02b3\u02b0\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b3")
        buf.write("\u02b2\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b6\7\3\2\2")
        buf.write("\u02b6\u02b8\3\2\2\2\u02b7\u02b3\3\2\2\2\u02b8\u02b9\3")
        buf.write("\2\2\2\u02b9\u02b7\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bb")
        buf.write("\3\2\2\2\u02bb\u02bc\7D\2\2\u02bc-\3\2\2\2\u02bd\u02bf")
        buf.write("\7\64\2\2\u02be\u02c0\t\4\2\2\u02bf\u02be\3\2\2\2\u02bf")
        buf.write("\u02c0\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02c5\7\u0093")
        buf.write("\2\2\u02c2\u02c3\7R\2\2\u02c3\u02c4\7h\2\2\u02c4\u02c6")
        buf.write("\7H\2\2\u02c5\u02c2\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6")
        buf.write("\u02ca\3\2\2\2\u02c7\u02c8\5\u00b8]\2\u02c8\u02c9\7\4")
        buf.write("\2\2\u02c9\u02cb\3\2\2\2\u02ca\u02c7\3\2\2\2\u02ca\u02cb")
        buf.write("\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02d8\5\u00c8e\2\u02cd")
        buf.write("\u02ce\7\5\2\2\u02ce\u02d3\5\u00be`\2\u02cf\u02d0\7\7")
        buf.write("\2\2\u02d0\u02d2\5\u00be`\2\u02d1\u02cf\3\2\2\2\u02d2")
        buf.write("\u02d5\3\2\2\2\u02d3\u02d1\3\2\2\2\u02d3\u02d4\3\2\2\2")
        buf.write("\u02d4\u02d6\3\2\2\2\u02d5\u02d3\3\2\2\2\u02d6\u02d7\7")
        buf.write("\6\2\2\u02d7\u02d9\3\2\2\2\u02d8\u02cd\3\2\2\2\u02d8\u02d9")
        buf.write("\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02db\7#\2\2\u02db")
        buf.write("\u02dc\5X-\2\u02dc/\3\2\2\2\u02dd\u02de\7\64\2\2\u02de")
        buf.write("\u02df\7\u0094\2\2\u02df\u02e3\7\u0086\2\2\u02e0\u02e1")
        buf.write("\7R\2\2\u02e1\u02e2\7h\2\2\u02e2\u02e4\7H\2\2\u02e3\u02e0")
        buf.write("\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02e8\3\2\2\2\u02e5")
        buf.write("\u02e6\5\u00b8]\2\u02e6\u02e7\7\4\2\2\u02e7\u02e9\3\2")
        buf.write("\2\2\u02e8\u02e5\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02ea")
        buf.write("\3\2\2\2\u02ea\u02eb\5\u00ba^\2\u02eb\u02ec\7\u0090\2")
        buf.write("\2\u02ec\u02f8\5\u00caf\2\u02ed\u02ee\7\5\2\2\u02ee\u02f3")
        buf.write("\5\u00aeX\2\u02ef\u02f0\7\7\2\2\u02f0\u02f2\5\u00aeX\2")
        buf.write("\u02f1\u02ef\3\2\2\2\u02f2\u02f5\3\2\2\2\u02f3\u02f1\3")
        buf.write("\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f6\3\2\2\2\u02f5\u02f3")
        buf.write("\3\2\2\2\u02f6\u02f7\7\6\2\2\u02f7\u02f9\3\2\2\2\u02f8")
        buf.write("\u02ed\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\61\3\2\2\2\u02fa")
        buf.write("\u02fc\7\u0097\2\2\u02fb\u02fd\7v\2\2\u02fc\u02fb\3\2")
        buf.write("\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u02ff")
        buf.write("\5\64\33\2\u02ff\u0300\7#\2\2\u0300\u0301\7\5\2\2\u0301")
        buf.write("\u0302\5X-\2\u0302\u030c\7\6\2\2\u0303\u0304\7\7\2\2\u0304")
        buf.write("\u0305\5\64\33\2\u0305\u0306\7#\2\2\u0306\u0307\7\5\2")
        buf.write("\2\u0307\u0308\5X-\2\u0308\u0309\7\6\2\2\u0309\u030b\3")
        buf.write("\2\2\2\u030a\u0303\3\2\2\2\u030b\u030e\3\2\2\2\u030c\u030a")
        buf.write("\3\2\2\2\u030c\u030d\3\2\2\2\u030d\63\3\2\2\2\u030e\u030c")
        buf.write("\3\2\2\2\u030f\u031b\5\u00ba^\2\u0310\u0311\7\5\2\2\u0311")
        buf.write("\u0316\5\u00be`\2\u0312\u0313\7\7\2\2\u0313\u0315\5\u00be")
        buf.write("`\2\u0314\u0312\3\2\2\2\u0315\u0318\3\2\2\2\u0316\u0314")
        buf.write("\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u0319\3\2\2\2\u0318")
        buf.write("\u0316\3\2\2\2\u0319\u031a\7\6\2\2\u031a\u031c\3\2\2\2")
        buf.write("\u031b\u0310\3\2\2\2\u031b\u031c\3\2\2\2\u031c\65\3\2")
        buf.write("\2\2\u031d\u031e\5\64\33\2\u031e\u031f\7#\2\2\u031f\u0320")
        buf.write("\7\5\2\2\u0320\u0321\5\u00a6T\2\u0321\u0323\7\u008d\2")
        buf.write("\2\u0322\u0324\7\37\2\2\u0323\u0322\3\2\2\2\u0323\u0324")
        buf.write("\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0326\5\u00a8U\2\u0326")
        buf.write("\u0327\7\6\2\2\u0327\67\3\2\2\2\u0328\u0334\5\u00ba^\2")
        buf.write("\u0329\u032a\7\5\2\2\u032a\u032f\5\u00be`\2\u032b\u032c")
        buf.write("\7\7\2\2\u032c\u032e\5\u00be`\2\u032d\u032b\3\2\2\2\u032e")
        buf.write("\u0331\3\2\2\2\u032f\u032d\3\2\2\2\u032f\u0330\3\2\2\2")
        buf.write("\u0330\u0332\3\2\2\2\u0331\u032f\3\2\2\2\u0332\u0333\7")
        buf.write("\6\2\2\u0333\u0335\3\2\2\2\u0334\u0329\3\2\2\2\u0334\u0335")
        buf.write("\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u0337\7#\2\2\u0337")
        buf.write("\u0338\7\5\2\2\u0338\u0339\5X-\2\u0339\u033a\7\6\2\2\u033a")
        buf.write("9\3\2\2\2\u033b\u033d\5\62\32\2\u033c\u033b\3\2\2\2\u033c")
        buf.write("\u033d\3\2\2\2\u033d\u033e\3\2\2\2\u033e\u033f\7=\2\2")
        buf.write("\u033f\u0340\7M\2\2\u0340\u0343\5t;\2\u0341\u0342\7\u0096")
        buf.write("\2\2\u0342\u0344\5B\"\2\u0343\u0341\3\2\2\2\u0343\u0344")
        buf.write("\3\2\2\2\u0344\u0346\3\2\2\2\u0345\u0347\5N(\2\u0346\u0345")
        buf.write("\3\2\2\2\u0346\u0347\3\2\2\2\u0347;\3\2\2\2\u0348\u034a")
        buf.write("\5\62\32\2\u0349\u0348\3\2\2\2\u0349\u034a\3\2\2\2\u034a")
        buf.write("\u034b\3\2\2\2\u034b\u034c\7=\2\2\u034c\u034d\7M\2\2\u034d")
        buf.write("\u0350\5t;\2\u034e\u034f\7\u0096\2\2\u034f\u0351\5B\"")
        buf.write("\2\u0350\u034e\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0353")
        buf.write("\3\2\2\2\u0352\u0354\5N(\2\u0353\u0352\3\2\2\2\u0353\u0354")
        buf.write("\3\2\2\2\u0354\u0359\3\2\2\2\u0355\u0357\5\u008aF\2\u0356")
        buf.write("\u0355\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u0358\3\2\2\2")
        buf.write("\u0358\u035a\5\u008cG\2\u0359\u0356\3\2\2\2\u0359\u035a")
        buf.write("\3\2\2\2\u035a=\3\2\2\2\u035b\u035d\7?\2\2\u035c\u035e")
        buf.write("\79\2\2\u035d\u035c\3\2\2\2\u035d\u035e\3\2\2\2\u035e")
        buf.write("\u035f\3\2\2\2\u035f\u0360\5\u00b8]\2\u0360?\3\2\2\2\u0361")
        buf.write("\u0362\7A\2\2\u0362\u0365\t\13\2\2\u0363\u0364\7R\2\2")
        buf.write("\u0364\u0366\7H\2\2\u0365\u0363\3\2\2\2\u0365\u0366\3")
        buf.write("\2\2\2\u0366\u036a\3\2\2\2\u0367\u0368\5\u00b8]\2\u0368")
        buf.write("\u0369\7\4\2\2\u0369\u036b\3\2\2\2\u036a\u0367\3\2\2\2")
        buf.write("\u036a\u036b\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036d\5")
        buf.write("\u00e2r\2\u036dA\3\2\2\2\u036e\u036f\b\"\1\2\u036f\u03c7")
        buf.write("\5F$\2\u0370\u03c7\7\u00bd\2\2\u0371\u0372\5\u00b8]\2")
        buf.write("\u0372\u0373\7\4\2\2\u0373\u0375\3\2\2\2\u0374\u0371\3")
        buf.write("\2\2\2\u0374\u0375\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0377")
        buf.write("\5\u00ba^\2\u0377\u0378\7\4\2\2\u0378\u037a\3\2\2\2\u0379")
        buf.write("\u0374\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037b\3\2\2\2")
        buf.write("\u037b\u03c7\5\u00be`\2\u037c\u037d\5\u00aaV\2\u037d\u037e")
        buf.write("\5B\"\27\u037e\u03c7\3\2\2\2\u037f\u0380\5\u00b6\\\2\u0380")
        buf.write("\u038d\7\5\2\2\u0381\u0383\7@\2\2\u0382\u0381\3\2\2\2")
        buf.write("\u0382\u0383\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u0389\5")
        buf.write("B\"\2\u0385\u0386\7\7\2\2\u0386\u0388\5B\"\2\u0387\u0385")
        buf.write("\3\2\2\2\u0388\u038b\3\2\2\2\u0389\u0387\3\2\2\2\u0389")
        buf.write("\u038a\3\2\2\2\u038a\u038e\3\2\2\2\u038b\u0389\3\2\2\2")
        buf.write("\u038c\u038e\7\t\2\2\u038d\u0382\3\2\2\2\u038d\u038c\3")
        buf.write("\2\2\2\u038d\u038e\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0391")
        buf.write("\7\6\2\2\u0390\u0392\5x=\2\u0391\u0390\3\2\2\2\u0391\u0392")
        buf.write("\3\2\2\2\u0392\u0394\3\2\2\2\u0393\u0395\5|?\2\u0394\u0393")
        buf.write("\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u03c7\3\2\2\2\u0396")
        buf.write("\u0397\7\5\2\2\u0397\u039c\5B\"\2\u0398\u0399\7\7\2\2")
        buf.write("\u0399\u039b\5B\"\2\u039a\u0398\3\2\2\2\u039b\u039e\3")
        buf.write("\2\2\2\u039c\u039a\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u039f")
        buf.write("\3\2\2\2\u039e\u039c\3\2\2\2\u039f\u03a0\7\6\2\2\u03a0")
        buf.write("\u03c7\3\2\2\2\u03a1\u03a2\7-\2\2\u03a2\u03a3\7\5\2\2")
        buf.write("\u03a3\u03a4\5B\"\2\u03a4\u03a5\7#\2\2\u03a5\u03a6\5 ")
        buf.write("\21\2\u03a6\u03a7\7\6\2\2\u03a7\u03c7\3\2\2\2\u03a8\u03aa")
        buf.write("\7h\2\2\u03a9\u03a8\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa")
        buf.write("\u03ab\3\2\2\2\u03ab\u03ad\7H\2\2\u03ac\u03a9\3\2\2\2")
        buf.write("\u03ac\u03ad\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03af\7")
        buf.write("\5\2\2\u03af\u03b0\5X-\2\u03b0\u03b1\7\6\2\2\u03b1\u03c7")
        buf.write("\3\2\2\2\u03b2\u03b4\7,\2\2\u03b3\u03b5\5B\"\2\u03b4\u03b3")
        buf.write("\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u03bb\3\2\2\2\u03b6")
        buf.write("\u03b7\7\u0095\2\2\u03b7\u03b8\5B\"\2\u03b8\u03b9\7\u0089")
        buf.write("\2\2\u03b9\u03ba\5B\"\2\u03ba\u03bc\3\2\2\2\u03bb\u03b6")
        buf.write("\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03bb\3\2\2\2\u03bd")
        buf.write("\u03be\3\2\2\2\u03be\u03c1\3\2\2\2\u03bf\u03c0\7C\2\2")
        buf.write("\u03c0\u03c2\5B\"\2\u03c1\u03bf\3\2\2\2\u03c1\u03c2\3")
        buf.write("\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03c4\7D\2\2\u03c4\u03c7")
        buf.write("\3\2\2\2\u03c5\u03c7\5D#\2\u03c6\u036e\3\2\2\2\u03c6\u0370")
        buf.write("\3\2\2\2\u03c6\u0379\3\2\2\2\u03c6\u037c\3\2\2\2\u03c6")
        buf.write("\u037f\3\2\2\2\u03c6\u0396\3\2\2\2\u03c6\u03a1\3\2\2\2")
        buf.write("\u03c6\u03ac\3\2\2\2\u03c6\u03b2\3\2\2\2\u03c6\u03c5\3")
        buf.write("\2\2\2\u03c7\u043f\3\2\2\2\u03c8\u03c9\f\26\2\2\u03c9")
        buf.write("\u03ca\7\r\2\2\u03ca\u043e\5B\"\27\u03cb\u03cc\f\25\2")
        buf.write("\2\u03cc\u03cd\t\f\2\2\u03cd\u043e\5B\"\26\u03ce\u03cf")
        buf.write("\f\24\2\2\u03cf\u03d0\t\6\2\2\u03d0\u043e\5B\"\25\u03d1")
        buf.write("\u03d2\f\23\2\2\u03d2\u03d3\t\r\2\2\u03d3\u043e\5B\"\24")
        buf.write("\u03d4\u03d5\f\22\2\2\u03d5\u03d6\t\16\2\2\u03d6\u043e")
        buf.write("\5B\"\23\u03d7\u03e4\f\21\2\2\u03d8\u03e5\7\b\2\2\u03d9")
        buf.write("\u03e5\7\30\2\2\u03da\u03e5\7\31\2\2\u03db\u03e5\7\32")
        buf.write("\2\2\u03dc\u03e5\7^\2\2\u03dd\u03de\7^\2\2\u03de\u03e5")
        buf.write("\7h\2\2\u03df\u03e5\7U\2\2\u03e0\u03e5\7c\2\2\u03e1\u03e5")
        buf.write("\7O\2\2\u03e2\u03e5\7e\2\2\u03e3\u03e5\7x\2\2\u03e4\u03d8")
        buf.write("\3\2\2\2\u03e4\u03d9\3\2\2\2\u03e4\u03da\3\2\2\2\u03e4")
        buf.write("\u03db\3\2\2\2\u03e4\u03dc\3\2\2\2\u03e4\u03dd\3\2\2\2")
        buf.write("\u03e4\u03df\3\2\2\2\u03e4\u03e0\3\2\2\2\u03e4\u03e1\3")
        buf.write("\2\2\2\u03e4\u03e2\3\2\2\2\u03e4\u03e3\3\2\2\2\u03e5\u03e6")
        buf.write("\3\2\2\2\u03e6\u043e\5B\"\22\u03e7\u03e8\f\20\2\2\u03e8")
        buf.write("\u03e9\7\"\2\2\u03e9\u043e\5B\"\21\u03ea\u03eb\f\17\2")
        buf.write("\2\u03eb\u03ec\7n\2\2\u03ec\u043e\5B\"\20\u03ed\u03ee")
        buf.write("\f\b\2\2\u03ee\u03f0\7^\2\2\u03ef\u03f1\7h\2\2\u03f0\u03ef")
        buf.write("\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2")
        buf.write("\u043e\5B\"\t\u03f3\u03f5\f\7\2\2\u03f4\u03f6\7h\2\2\u03f5")
        buf.write("\u03f4\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7\3\2\2\2")
        buf.write("\u03f7\u03f8\7)\2\2\u03f8\u03f9\5B\"\2\u03f9\u03fa\7\"")
        buf.write("\2\2\u03fa\u03fb\5B\"\b\u03fb\u043e\3\2\2\2\u03fc\u03fd")
        buf.write("\f\13\2\2\u03fd\u03fe\7/\2\2\u03fe\u043e\5\u00c0a\2\u03ff")
        buf.write("\u0401\f\n\2\2\u0400\u0402\7h\2\2\u0401\u0400\3\2\2\2")
        buf.write("\u0401\u0402\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u0404\t")
        buf.write("\17\2\2\u0404\u0407\5B\"\2\u0405\u0406\7E\2\2\u0406\u0408")
        buf.write("\5B\"\2\u0407\u0405\3\2\2\2\u0407\u0408\3\2\2\2\u0408")
        buf.write("\u043e\3\2\2\2\u0409\u040e\f\t\2\2\u040a\u040f\7_\2\2")
        buf.write("\u040b\u040f\7i\2\2\u040c\u040d\7h\2\2\u040d\u040f\7j")
        buf.write("\2\2\u040e\u040a\3\2\2\2\u040e\u040b\3\2\2\2\u040e\u040c")
        buf.write("\3\2\2\2\u040f\u043e\3\2\2\2\u0410\u0412\f\6\2\2\u0411")
        buf.write("\u0413\7h\2\2\u0412\u0411\3\2\2\2\u0412\u0413\3\2\2\2")
        buf.write("\u0413\u0414\3\2\2\2\u0414\u043b\7U\2\2\u0415\u041f\7")
        buf.write("\5\2\2\u0416\u0420\5X-\2\u0417\u041c\5B\"\2\u0418\u0419")
        buf.write("\7\7\2\2\u0419\u041b\5B\"\2\u041a\u0418\3\2\2\2\u041b")
        buf.write("\u041e\3\2\2\2\u041c\u041a\3\2\2\2\u041c\u041d\3\2\2\2")
        buf.write("\u041d\u0420\3\2\2\2\u041e\u041c\3\2\2\2\u041f\u0416\3")
        buf.write("\2\2\2\u041f\u0417\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0421")
        buf.write("\3\2\2\2\u0421\u043c\7\6\2\2\u0422\u0423\5\u00b8]\2\u0423")
        buf.write("\u0424\7\4\2\2\u0424\u0426\3\2\2\2\u0425\u0422\3\2\2\2")
        buf.write("\u0425\u0426\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u043c\5")
        buf.write("\u00ba^\2\u0428\u0429\5\u00b8]\2\u0429\u042a\7\4\2\2\u042a")
        buf.write("\u042c\3\2\2\2\u042b\u0428\3\2\2\2\u042b\u042c\3\2\2\2")
        buf.write("\u042c\u042d\3\2\2\2\u042d\u042e\5\u00e0q\2\u042e\u0437")
        buf.write("\7\5\2\2\u042f\u0434\5B\"\2\u0430\u0431\7\7\2\2\u0431")
        buf.write("\u0433\5B\"\2\u0432\u0430\3\2\2\2\u0433\u0436\3\2\2\2")
        buf.write("\u0434\u0432\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u0438\3")
        buf.write("\2\2\2\u0436\u0434\3\2\2\2\u0437\u042f\3\2\2\2\u0437\u0438")
        buf.write("\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043a\7\6\2\2\u043a")
        buf.write("\u043c\3\2\2\2\u043b\u0415\3\2\2\2\u043b\u0425\3\2\2\2")
        buf.write("\u043b\u042b\3\2\2\2\u043c\u043e\3\2\2\2\u043d\u03c8\3")
        buf.write("\2\2\2\u043d\u03cb\3\2\2\2\u043d\u03ce\3\2\2\2\u043d\u03d1")
        buf.write("\3\2\2\2\u043d\u03d4\3\2\2\2\u043d\u03d7\3\2\2\2\u043d")
        buf.write("\u03e7\3\2\2\2\u043d\u03ea\3\2\2\2\u043d\u03ed\3\2\2\2")
        buf.write("\u043d\u03f3\3\2\2\2\u043d\u03fc\3\2\2\2\u043d\u03ff\3")
        buf.write("\2\2\2\u043d\u0409\3\2\2\2\u043d\u0410\3\2\2\2\u043e\u0441")
        buf.write("\3\2\2\2\u043f\u043d\3\2\2\2\u043f\u0440\3\2\2\2\u0440")
        buf.write("C\3\2\2\2\u0441\u043f\3\2\2\2\u0442\u0443\7u\2\2\u0443")
        buf.write("\u0448\7\5\2\2\u0444\u0449\7S\2\2\u0445\u0446\t\20\2\2")
        buf.write("\u0446\u0447\7\7\2\2\u0447\u0449\5\u00acW\2\u0448\u0444")
        buf.write("\3\2\2\2\u0448\u0445\3\2\2\2\u0449\u044a\3\2\2\2\u044a")
        buf.write("\u044b\7\6\2\2\u044bE\3\2\2\2\u044c\u044d\t\21\2\2\u044d")
        buf.write("G\3\2\2\2\u044e\u044f\7\5\2\2\u044f\u0454\5B\"\2\u0450")
        buf.write("\u0451\7\7\2\2\u0451\u0453\5B\"\2\u0452\u0450\3\2\2\2")
        buf.write("\u0453\u0456\3\2\2\2\u0454\u0452\3\2\2\2\u0454\u0455\3")
        buf.write("\2\2\2\u0455\u0457\3\2\2\2\u0456\u0454\3\2\2\2\u0457\u0458")
        buf.write("\7\6\2\2\u0458I\3\2\2\2\u0459\u045a\7\u0092\2\2\u045a")
        buf.write("\u045f\5H%\2\u045b\u045c\7\7\2\2\u045c\u045e\5H%\2\u045d")
        buf.write("\u045b\3\2\2\2\u045e\u0461\3\2\2\2\u045f\u045d\3\2\2\2")
        buf.write("\u045f\u0460\3\2\2\2\u0460K\3\2\2\2\u0461\u045f\3\2\2")
        buf.write("\2\u0462\u0464\5\62\32\2\u0463\u0462\3\2\2\2\u0463\u0464")
        buf.write("\3\2\2\2\u0464\u046a\3\2\2\2\u0465\u046b\7Z\2\2\u0466")
        buf.write("\u046b\7|\2\2\u0467\u0468\7Z\2\2\u0468\u0469\7n\2\2\u0469")
        buf.write("\u046b\t\n\2\2\u046a\u0465\3\2\2\2\u046a\u0466\3\2\2\2")
        buf.write("\u046a\u0467\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u0470\7")
        buf.write("]\2\2\u046d\u046e\5\u00b8]\2\u046e\u046f\7\4\2\2\u046f")
        buf.write("\u0471\3\2\2\2\u0470\u046d\3\2\2\2\u0470\u0471\3\2\2\2")
        buf.write("\u0471\u0472\3\2\2\2\u0472\u0475\5\u00ba^\2\u0473\u0474")
        buf.write("\7#\2\2\u0474\u0476\5\u00d0i\2\u0475\u0473\3\2\2\2\u0475")
        buf.write("\u0476\3\2\2\2\u0476\u0482\3\2\2\2\u0477\u0478\7\5\2\2")
        buf.write("\u0478\u047d\5\u00be`\2\u0479\u047a\7\7\2\2\u047a\u047c")
        buf.write("\5\u00be`\2\u047b\u0479\3\2\2\2\u047c\u047f\3\2\2\2\u047d")
        buf.write("\u047b\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u0480\3\2\2\2")
        buf.write("\u047f\u047d\3\2\2\2\u0480\u0481\7\6\2\2\u0481\u0483\3")
        buf.write("\2\2\2\u0482\u0477\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u048d")
        buf.write("\3\2\2\2\u0484\u0487\5J&\2\u0485\u0487\5X-\2\u0486\u0484")
        buf.write("\3\2\2\2\u0486\u0485\3\2\2\2\u0487\u0489\3\2\2\2\u0488")
        buf.write("\u048a\5P)\2\u0489\u0488\3\2\2\2\u0489\u048a\3\2\2\2\u048a")
        buf.write("\u048e\3\2\2\2\u048b\u048c\7:\2\2\u048c\u048e\7\u0092")
        buf.write("\2\2\u048d\u0486\3\2\2\2\u048d\u048b\3\2\2\2\u048e\u0490")
        buf.write("\3\2\2\2\u048f\u0491\5N(\2\u0490\u048f\3\2\2\2\u0490\u0491")
        buf.write("\3\2\2\2\u0491M\3\2\2\2\u0492\u0493\7~\2\2\u0493\u0498")
        buf.write("\5f\64\2\u0494\u0495\7\7\2\2\u0495\u0497\5f\64\2\u0496")
        buf.write("\u0494\3\2\2\2\u0497\u049a\3\2\2\2\u0498\u0496\3\2\2\2")
        buf.write("\u0498\u0499\3\2\2\2\u0499O\3\2\2\2\u049a\u0498\3\2\2")
        buf.write("\2\u049b\u049c\7m\2\2\u049c\u04ab\7\62\2\2\u049d\u049e")
        buf.write("\7\5\2\2\u049e\u04a3\5\32\16\2\u049f\u04a0\7\7\2\2\u04a0")
        buf.write("\u04a2\5\32\16\2\u04a1\u049f\3\2\2\2\u04a2\u04a5\3\2\2")
        buf.write("\2\u04a3\u04a1\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a6")
        buf.write("\3\2\2\2\u04a5\u04a3\3\2\2\2\u04a6\u04a9\7\6\2\2\u04a7")
        buf.write("\u04a8\7\u0096\2\2\u04a8\u04aa\5B\"\2\u04a9\u04a7\3\2")
        buf.write("\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ac\3\2\2\2\u04ab\u049d")
        buf.write("\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad")
        buf.write("\u04c8\7\u00b9\2\2\u04ae\u04c9\7\u00ba\2\2\u04af\u04b0")
        buf.write("\7\u008f\2\2\u04b0\u04b3\7\u0085\2\2\u04b1\u04b4\5\u00be")
        buf.write("`\2\u04b2\u04b4\5p9\2\u04b3\u04b1\3\2\2\2\u04b3\u04b2")
        buf.write("\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b6\7\b\2\2\u04b6")
        buf.write("\u04c1\5B\"\2\u04b7\u04ba\7\7\2\2\u04b8\u04bb\5\u00be")
        buf.write("`\2\u04b9\u04bb\5p9\2\u04ba\u04b8\3\2\2\2\u04ba\u04b9")
        buf.write("\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04bd\7\b\2\2\u04bd")
        buf.write("\u04be\5B\"\2\u04be\u04c0\3\2\2\2\u04bf\u04b7\3\2\2\2")
        buf.write("\u04c0\u04c3\3\2\2\2\u04c1\u04bf\3\2\2\2\u04c1\u04c2\3")
        buf.write("\2\2\2\u04c2\u04c6\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c4\u04c5")
        buf.write("\7\u0096\2\2\u04c5\u04c7\5B\"\2\u04c6\u04c4\3\2\2\2\u04c6")
        buf.write("\u04c7\3\2\2\2\u04c7\u04c9\3\2\2\2\u04c8\u04ae\3\2\2\2")
        buf.write("\u04c8\u04af\3\2\2\2\u04c9Q\3\2\2\2\u04ca\u04ce\7r\2\2")
        buf.write("\u04cb\u04cc\5\u00b8]\2\u04cc\u04cd\7\4\2\2\u04cd\u04cf")
        buf.write("\3\2\2\2\u04ce\u04cb\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf")
        buf.write("\u04d0\3\2\2\2\u04d0\u04d7\5\u00ccg\2\u04d1\u04d2\7\b")
        buf.write("\2\2\u04d2\u04d8\5T+\2\u04d3\u04d4\7\5\2\2\u04d4\u04d5")
        buf.write("\5T+\2\u04d5\u04d6\7\6\2\2\u04d6\u04d8\3\2\2\2\u04d7\u04d1")
        buf.write("\3\2\2\2\u04d7\u04d3\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8")
        buf.write("S\3\2\2\2\u04d9\u04dd\5$\23\2\u04da\u04dd\5\u00b4[\2\u04db")
        buf.write("\u04dd\7\u00be\2\2\u04dc\u04d9\3\2\2\2\u04dc\u04da\3\2")
        buf.write("\2\2\u04dc\u04db\3\2\2\2\u04ddU\3\2\2\2\u04de\u04e9\7")
        buf.write("y\2\2\u04df\u04ea\5\u00c0a\2\u04e0\u04e1\5\u00b8]\2\u04e1")
        buf.write("\u04e2\7\4\2\2\u04e2\u04e4\3\2\2\2\u04e3\u04e0\3\2\2\2")
        buf.write("\u04e3\u04e4\3\2\2\2\u04e4\u04e7\3\2\2\2\u04e5\u04e8\5")
        buf.write("\u00ba^\2\u04e6\u04e8\5\u00c4c\2\u04e7\u04e5\3\2\2\2\u04e7")
        buf.write("\u04e6\3\2\2\2\u04e8\u04ea\3\2\2\2\u04e9\u04df\3\2\2\2")
        buf.write("\u04e9\u04e3\3\2\2\2\u04e9\u04ea\3\2\2\2\u04eaW\3\2\2")
        buf.write("\2\u04eb\u04ed\5\u0088E\2\u04ec\u04eb\3\2\2\2\u04ec\u04ed")
        buf.write("\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04f4\5\\/\2\u04ef")
        buf.write("\u04f0\5l\67\2\u04f0\u04f1\5\\/\2\u04f1\u04f3\3\2\2\2")
        buf.write("\u04f2\u04ef\3\2\2\2\u04f3\u04f6\3\2\2\2\u04f4\u04f2\3")
        buf.write("\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f8\3\2\2\2\u04f6\u04f4")
        buf.write("\3\2\2\2\u04f7\u04f9\5\u008aF\2\u04f8\u04f7\3\2\2\2\u04f8")
        buf.write("\u04f9\3\2\2\2\u04f9\u04fb\3\2\2\2\u04fa\u04fc\5\u008c")
        buf.write("G\2\u04fb\u04fa\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fcY\3\2")
        buf.write("\2\2\u04fd\u0505\5d\63\2\u04fe\u04ff\5h\65\2\u04ff\u0501")
        buf.write("\5d\63\2\u0500\u0502\5j\66\2\u0501\u0500\3\2\2\2\u0501")
        buf.write("\u0502\3\2\2\2\u0502\u0504\3\2\2\2\u0503\u04fe\3\2\2\2")
        buf.write("\u0504\u0507\3\2\2\2\u0505\u0503\3\2\2\2\u0505\u0506\3")
        buf.write("\2\2\2\u0506[\3\2\2\2\u0507\u0505\3\2\2\2\u0508\u050a")
        buf.write("\7\u0084\2\2\u0509\u050b\t\22\2\2\u050a\u0509\3\2\2\2")
        buf.write("\u050a\u050b\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u0511\5")
        buf.write("f\64\2\u050d\u050e\7\7\2\2\u050e\u0510\5f\64\2\u050f\u050d")
        buf.write("\3\2\2\2\u0510\u0513\3\2\2\2\u0511\u050f\3\2\2\2\u0511")
        buf.write("\u0512\3\2\2\2\u0512\u0520\3\2\2\2\u0513\u0511\3\2\2\2")
        buf.write("\u0514\u051e\7M\2\2\u0515\u051a\5d\63\2\u0516\u0517\7")
        buf.write("\7\2\2\u0517\u0519\5d\63\2\u0518\u0516\3\2\2\2\u0519\u051c")
        buf.write("\3\2\2\2\u051a\u0518\3\2\2\2\u051a\u051b\3\2\2\2\u051b")
        buf.write("\u051f\3\2\2\2\u051c\u051a\3\2\2\2\u051d\u051f\5Z.\2\u051e")
        buf.write("\u0515\3\2\2\2\u051e\u051d\3\2\2\2\u051f\u0521\3\2\2\2")
        buf.write("\u0520\u0514\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0524\3")
        buf.write("\2\2\2\u0522\u0523\7\u0096\2\2\u0523\u0525\5B\"\2\u0524")
        buf.write("\u0522\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0534\3\2\2\2")
        buf.write("\u0526\u0527\7P\2\2\u0527\u0528\7*\2\2\u0528\u052d\5B")
        buf.write("\"\2\u0529\u052a\7\7\2\2\u052a\u052c\5B\"\2\u052b\u0529")
        buf.write("\3\2\2\2\u052c\u052f\3\2\2\2\u052d\u052b\3\2\2\2\u052d")
        buf.write("\u052e\3\2\2\2\u052e\u0532\3\2\2\2\u052f\u052d\3\2\2\2")
        buf.write("\u0530\u0531\7Q\2\2\u0531\u0533\5B\"\2\u0532\u0530\3\2")
        buf.write("\2\2\u0532\u0533\3\2\2\2\u0533\u0535\3\2\2\2\u0534\u0526")
        buf.write("\3\2\2\2\u0534\u0535\3\2\2\2\u0535\u0544\3\2\2\2\u0536")
        buf.write("\u0537\7\u00b0\2\2\u0537\u0538\5\u00d4k\2\u0538\u0539")
        buf.write("\7#\2\2\u0539\u0541\5z>\2\u053a\u053b\7\7\2\2\u053b\u053c")
        buf.write("\5\u00d4k\2\u053c\u053d\7#\2\2\u053d\u053e\5z>\2\u053e")
        buf.write("\u0540\3\2\2\2\u053f\u053a\3\2\2\2\u0540\u0543\3\2\2\2")
        buf.write("\u0541\u053f\3\2\2\2\u0541\u0542\3\2\2\2\u0542\u0545\3")
        buf.write("\2\2\2\u0543\u0541\3\2\2\2\u0544\u0536\3\2\2\2\u0544\u0545")
        buf.write("\3\2\2\2\u0545\u0548\3\2\2\2\u0546\u0548\5J&\2\u0547\u0508")
        buf.write("\3\2\2\2\u0547\u0546\3\2\2\2\u0548]\3\2\2\2\u0549\u054a")
        buf.write("\5X-\2\u054a_\3\2\2\2\u054b\u054d\5\u0088E\2\u054c\u054b")
        buf.write("\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u054e\3\2\2\2\u054e")
        buf.write("\u0550\5\\/\2\u054f\u0551\5\u008aF\2\u0550\u054f\3\2\2")
        buf.write("\2\u0550\u0551\3\2\2\2\u0551\u0553\3\2\2\2\u0552\u0554")
        buf.write("\5\u008cG\2\u0553\u0552\3\2\2\2\u0553\u0554\3\2\2\2\u0554")
        buf.write("a\3\2\2\2\u0555\u0557\5\u0088E\2\u0556\u0555\3\2\2\2\u0556")
        buf.write("\u0557\3\2\2\2\u0557\u0558\3\2\2\2\u0558\u0562\5\\/\2")
        buf.write("\u0559\u055b\7\u008d\2\2\u055a\u055c\7\37\2\2\u055b\u055a")
        buf.write("\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u0560\3\2\2\2\u055d")
        buf.write("\u0560\7\\\2\2\u055e\u0560\7F\2\2\u055f\u0559\3\2\2\2")
        buf.write("\u055f\u055d\3\2\2\2\u055f\u055e\3\2\2\2\u0560\u0561\3")
        buf.write("\2\2\2\u0561\u0563\5\\/\2\u0562\u055f\3\2\2\2\u0563\u0564")
        buf.write("\3\2\2\2\u0564\u0562\3\2\2\2\u0564\u0565\3\2\2\2\u0565")
        buf.write("\u0567\3\2\2\2\u0566\u0568\5\u008aF\2\u0567\u0566\3\2")
        buf.write("\2\2\u0567\u0568\3\2\2\2\u0568\u056a\3\2\2\2\u0569\u056b")
        buf.write("\5\u008cG\2\u056a\u0569\3\2\2\2\u056a\u056b\3\2\2\2\u056b")
        buf.write("c\3\2\2\2\u056c\u056d\5\u00b8]\2\u056d\u056e\7\4\2\2\u056e")
        buf.write("\u0570\3\2\2\2\u056f\u056c\3\2\2\2\u056f\u0570\3\2\2\2")
        buf.write("\u0570\u0571\3\2\2\2\u0571\u0576\5\u00ba^\2\u0572\u0574")
        buf.write("\7#\2\2\u0573\u0572\3\2\2\2\u0573\u0574\3\2\2\2\u0574")
        buf.write("\u0575\3\2\2\2\u0575\u0577\5\u00d0i\2\u0576\u0573\3\2")
        buf.write("\2\2\u0576\u0577\3\2\2\2\u0577\u057d\3\2\2\2\u0578\u0579")
        buf.write("\7W\2\2\u0579\u057a\7*\2\2\u057a\u057e\5\u00c4c\2\u057b")
        buf.write("\u057c\7h\2\2\u057c\u057e\7W\2\2\u057d\u0578\3\2\2\2\u057d")
        buf.write("\u057b\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u05ad\3\2\2\2")
        buf.write("\u057f\u0580\5\u00b8]\2\u0580\u0581\7\4\2\2\u0581\u0583")
        buf.write("\3\2\2\2\u0582\u057f\3\2\2\2\u0582\u0583\3\2\2\2\u0583")
        buf.write("\u0584\3\2\2\2\u0584\u0585\5\u00e0q\2\u0585\u0586\7\5")
        buf.write("\2\2\u0586\u058b\5B\"\2\u0587\u0588\7\7\2\2\u0588\u058a")
        buf.write("\5B\"\2\u0589\u0587\3\2\2\2\u058a\u058d\3\2\2\2\u058b")
        buf.write("\u0589\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058e\3\2\2\2")
        buf.write("\u058d\u058b\3\2\2\2\u058e\u0593\7\6\2\2\u058f\u0591\7")
        buf.write("#\2\2\u0590\u058f\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0592")
        buf.write("\3\2\2\2\u0592\u0594\5\u00d0i\2\u0593\u0590\3\2\2\2\u0593")
        buf.write("\u0594\3\2\2\2\u0594\u05ad\3\2\2\2\u0595\u059f\7\5\2\2")
        buf.write("\u0596\u059b\5d\63\2\u0597\u0598\7\7\2\2\u0598\u059a\5")
        buf.write("d\63\2\u0599\u0597\3\2\2\2\u059a\u059d\3\2\2\2\u059b\u0599")
        buf.write("\3\2\2\2\u059b\u059c\3\2\2\2\u059c\u05a0\3\2\2\2\u059d")
        buf.write("\u059b\3\2\2\2\u059e\u05a0\5Z.\2\u059f\u0596\3\2\2\2\u059f")
        buf.write("\u059e\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05a2\7\6\2\2")
        buf.write("\u05a2\u05ad\3\2\2\2\u05a3\u05a4\7\5\2\2\u05a4\u05a5\5")
        buf.write("X-\2\u05a5\u05aa\7\6\2\2\u05a6\u05a8\7#\2\2\u05a7\u05a6")
        buf.write("\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9")
        buf.write("\u05ab\5\u00d0i\2\u05aa\u05a7\3\2\2\2\u05aa\u05ab\3\2")
        buf.write("\2\2\u05ab\u05ad\3\2\2\2\u05ac\u056f\3\2\2\2\u05ac\u0582")
        buf.write("\3\2\2\2\u05ac\u0595\3\2\2\2\u05ac\u05a3\3\2\2\2\u05ad")
        buf.write("e\3\2\2\2\u05ae\u05bb\7\t\2\2\u05af\u05b0\5\u00ba^\2\u05b0")
        buf.write("\u05b1\7\4\2\2\u05b1\u05b2\7\t\2\2\u05b2\u05bb\3\2\2\2")
        buf.write("\u05b3\u05b8\5B\"\2\u05b4\u05b6\7#\2\2\u05b5\u05b4\3\2")
        buf.write("\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b9")
        buf.write("\5\u00b0Y\2\u05b8\u05b5\3\2\2\2\u05b8\u05b9\3\2\2\2\u05b9")
        buf.write("\u05bb\3\2\2\2\u05ba\u05ae\3\2\2\2\u05ba\u05af\3\2\2\2")
        buf.write("\u05ba\u05b3\3\2\2\2\u05bbg\3\2\2\2\u05bc\u05ca\7\7\2")
        buf.write("\2\u05bd\u05bf\7f\2\2\u05be\u05bd\3\2\2\2\u05be\u05bf")
        buf.write("\3\2\2\2\u05bf\u05c6\3\2\2\2\u05c0\u05c2\7b\2\2\u05c1")
        buf.write("\u05c3\7p\2\2\u05c2\u05c1\3\2\2\2\u05c2\u05c3\3\2\2\2")
        buf.write("\u05c3\u05c7\3\2\2\2\u05c4\u05c7\7Y\2\2\u05c5\u05c7\7")
        buf.write("\65\2\2\u05c6\u05c0\3\2\2\2\u05c6\u05c4\3\2\2\2\u05c6")
        buf.write("\u05c5\3\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u05c8\3\2\2\2")
        buf.write("\u05c8\u05ca\7`\2\2\u05c9\u05bc\3\2\2\2\u05c9\u05be\3")
        buf.write("\2\2\2\u05cai\3\2\2\2\u05cb\u05cc\7m\2\2\u05cc\u05da\5")
        buf.write("B\"\2\u05cd\u05ce\7\u0090\2\2\u05ce\u05cf\7\5\2\2\u05cf")
        buf.write("\u05d4\5\u00be`\2\u05d0\u05d1\7\7\2\2\u05d1\u05d3\5\u00be")
        buf.write("`\2\u05d2\u05d0\3\2\2\2\u05d3\u05d6\3\2\2\2\u05d4\u05d2")
        buf.write("\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5\u05d7\3\2\2\2\u05d6")
        buf.write("\u05d4\3\2\2\2\u05d7\u05d8\7\6\2\2\u05d8\u05da\3\2\2\2")
        buf.write("\u05d9\u05cb\3\2\2\2\u05d9\u05cd\3\2\2\2\u05dak\3\2\2")
        buf.write("\2\u05db\u05dd\7\u008d\2\2\u05dc\u05de\7\37\2\2\u05dd")
        buf.write("\u05dc\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05e2\3\2\2\2")
        buf.write("\u05df\u05e2\7\\\2\2\u05e0\u05e2\7F\2\2\u05e1\u05db\3")
        buf.write("\2\2\2\u05e1\u05df\3\2\2\2\u05e1\u05e0\3\2\2\2\u05e2m")
        buf.write("\3\2\2\2\u05e3\u05e5\5\62\32\2\u05e4\u05e3\3\2\2\2\u05e4")
        buf.write("\u05e5\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u05e9\7\u008f")
        buf.write("\2\2\u05e7\u05e8\7n\2\2\u05e8\u05ea\t\n\2\2\u05e9\u05e7")
        buf.write("\3\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb")
        buf.write("\u05ec\5t;\2\u05ec\u05ef\7\u0085\2\2\u05ed\u05f0\5\u00be")
        buf.write("`\2\u05ee\u05f0\5p9\2\u05ef\u05ed\3\2\2\2\u05ef\u05ee")
        buf.write("\3\2\2\2\u05f0\u05f1\3\2\2\2\u05f1\u05f2\7\b\2\2\u05f2")
        buf.write("\u05fd\5B\"\2\u05f3\u05f6\7\7\2\2\u05f4\u05f7\5\u00be")
        buf.write("`\2\u05f5\u05f7\5p9\2\u05f6\u05f4\3\2\2\2\u05f6\u05f5")
        buf.write("\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u05f9\7\b\2\2\u05f9")
        buf.write("\u05fa\5B\"\2\u05fa\u05fc\3\2\2\2\u05fb\u05f3\3\2\2\2")
        buf.write("\u05fc\u05ff\3\2\2\2\u05fd\u05fb\3\2\2\2\u05fd\u05fe\3")
        buf.write("\2\2\2\u05fe\u060c\3\2\2\2\u05ff\u05fd\3\2\2\2\u0600\u060a")
        buf.write("\7M\2\2\u0601\u0606\5d\63\2\u0602\u0603\7\7\2\2\u0603")
        buf.write("\u0605\5d\63\2\u0604\u0602\3\2\2\2\u0605\u0608\3\2\2\2")
        buf.write("\u0606\u0604\3\2\2\2\u0606\u0607\3\2\2\2\u0607\u060b\3")
        buf.write("\2\2\2\u0608\u0606\3\2\2\2\u0609\u060b\5Z.\2\u060a\u0601")
        buf.write("\3\2\2\2\u060a\u0609\3\2\2\2\u060b\u060d\3\2\2\2\u060c")
        buf.write("\u0600\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u0610\3\2\2\2")
        buf.write("\u060e\u060f\7\u0096\2\2\u060f\u0611\5B\"\2\u0610\u060e")
        buf.write("\3\2\2\2\u0610\u0611\3\2\2\2\u0611\u0613\3\2\2\2\u0612")
        buf.write("\u0614\5N(\2\u0613\u0612\3\2\2\2\u0613\u0614\3\2\2\2\u0614")
        buf.write("o\3\2\2\2\u0615\u0616\7\5\2\2\u0616\u061b\5\u00be`\2\u0617")
        buf.write("\u0618\7\7\2\2\u0618\u061a\5\u00be`\2\u0619\u0617\3\2")
        buf.write("\2\2\u061a\u061d\3\2\2\2\u061b\u0619\3\2\2\2\u061b\u061c")
        buf.write("\3\2\2\2\u061c\u061e\3\2\2\2\u061d\u061b\3\2\2\2\u061e")
        buf.write("\u061f\7\6\2\2\u061fq\3\2\2\2\u0620\u0622\5\62\32\2\u0621")
        buf.write("\u0620\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0623\3\2\2\2")
        buf.write("\u0623\u0626\7\u008f\2\2\u0624\u0625\7n\2\2\u0625\u0627")
        buf.write("\t\n\2\2\u0626\u0624\3\2\2\2\u0626\u0627\3\2\2\2\u0627")
        buf.write("\u0628\3\2\2\2\u0628\u0629\5t;\2\u0629\u062c\7\u0085\2")
        buf.write("\2\u062a\u062d\5\u00be`\2\u062b\u062d\5p9\2\u062c\u062a")
        buf.write("\3\2\2\2\u062c\u062b\3\2\2\2\u062d\u062e\3\2\2\2\u062e")
        buf.write("\u062f\7\b\2\2\u062f\u063a\5B\"\2\u0630\u0633\7\7\2\2")
        buf.write("\u0631\u0634\5\u00be`\2\u0632\u0634\5p9\2\u0633\u0631")
        buf.write("\3\2\2\2\u0633\u0632\3\2\2\2\u0634\u0635\3\2\2\2\u0635")
        buf.write("\u0636\7\b\2\2\u0636\u0637\5B\"\2\u0637\u0639\3\2\2\2")
        buf.write("\u0638\u0630\3\2\2\2\u0639\u063c\3\2\2\2\u063a\u0638\3")
        buf.write("\2\2\2\u063a\u063b\3\2\2\2\u063b\u063f\3\2\2\2\u063c\u063a")
        buf.write("\3\2\2\2\u063d\u063e\7\u0096\2\2\u063e\u0640\5B\"\2\u063f")
        buf.write("\u063d\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0642\3\2\2\2")
        buf.write("\u0641\u0643\5N(\2\u0642\u0641\3\2\2\2\u0642\u0643\3\2")
        buf.write("\2\2\u0643\u0648\3\2\2\2\u0644\u0646\5\u008aF\2\u0645")
        buf.write("\u0644\3\2\2\2\u0645\u0646\3\2\2\2\u0646\u0647\3\2\2\2")
        buf.write("\u0647\u0649\5\u008cG\2\u0648\u0645\3\2\2\2\u0648\u0649")
        buf.write("\3\2\2\2\u0649s\3\2\2\2\u064a\u064b\5\u00b8]\2\u064b\u064c")
        buf.write("\7\4\2\2\u064c\u064e\3\2\2\2\u064d\u064a\3\2\2\2\u064d")
        buf.write("\u064e\3\2\2\2\u064e\u064f\3\2\2\2\u064f\u0652\5\u00ba")
        buf.write("^\2\u0650\u0651\7#\2\2\u0651\u0653\5\u00d6l\2\u0652\u0650")
        buf.write("\3\2\2\2\u0652\u0653\3\2\2\2\u0653\u0659\3\2\2\2\u0654")
        buf.write("\u0655\7W\2\2\u0655\u0656\7*\2\2\u0656\u065a\5\u00c4c")
        buf.write("\2\u0657\u0658\7h\2\2\u0658\u065a\7W\2\2\u0659\u0654\3")
        buf.write("\2\2\2\u0659\u0657\3\2\2\2\u0659\u065a\3\2\2\2\u065au")
        buf.write("\3\2\2\2\u065b\u065d\7\u0091\2\2\u065c\u065e\5\u00b8]")
        buf.write("\2\u065d\u065c\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u0661")
        buf.write("\3\2\2\2\u065f\u0660\7]\2\2\u0660\u0662\5\u00d8m\2\u0661")
        buf.write("\u065f\3\2\2\2\u0661\u0662\3\2\2\2\u0662w\3\2\2\2\u0663")
        buf.write("\u0664\7\u00b4\2\2\u0664\u0665\7\5\2\2\u0665\u0666\7\u0096")
        buf.write("\2\2\u0666\u0667\5B\"\2\u0667\u0668\7\6\2\2\u0668y\3\2")
        buf.write("\2\2\u0669\u066b\7\5\2\2\u066a\u066c\5\u00dan\2\u066b")
        buf.write("\u066a\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u0677\3\2\2\2")
        buf.write("\u066d\u066e\7\u009b\2\2\u066e\u066f\7*\2\2\u066f\u0674")
        buf.write("\5B\"\2\u0670\u0671\7\7\2\2\u0671\u0673\5B\"\2\u0672\u0670")
        buf.write("\3\2\2\2\u0673\u0676\3\2\2\2\u0674\u0672\3\2\2\2\u0674")
        buf.write("\u0675\3\2\2\2\u0675\u0678\3\2\2\2\u0676\u0674\3\2\2\2")
        buf.write("\u0677\u066d\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u0679\3")
        buf.write("\2\2\2\u0679\u067a\7o\2\2\u067a\u067b\7*\2\2\u067b\u0680")
        buf.write("\5\u008eH\2\u067c\u067d\7\7\2\2\u067d\u067f\5\u008eH\2")
        buf.write("\u067e\u067c\3\2\2\2\u067f\u0682\3\2\2\2\u0680\u067e\3")
        buf.write("\2\2\2\u0680\u0681\3\2\2\2\u0681\u0684\3\2\2\2\u0682\u0680")
        buf.write("\3\2\2\2\u0683\u0685\5~@\2\u0684\u0683\3\2\2\2\u0684\u0685")
        buf.write("\3\2\2\2\u0685\u0686\3\2\2\2\u0686\u0687\7\6\2\2\u0687")
        buf.write("{\3\2\2\2\u0688\u06aa\7\u009a\2\2\u0689\u06ab\5\u00d4")
        buf.write("k\2\u068a\u068c\7\5\2\2\u068b\u068d\5\u00dan\2\u068c\u068b")
        buf.write("\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u0698\3\2\2\2\u068e")
        buf.write("\u068f\7\u009b\2\2\u068f\u0690\7*\2\2\u0690\u0695\5B\"")
        buf.write("\2\u0691\u0692\7\7\2\2\u0692\u0694\5B\"\2\u0693\u0691")
        buf.write("\3\2\2\2\u0694\u0697\3\2\2\2\u0695\u0693\3\2\2\2\u0695")
        buf.write("\u0696\3\2\2\2\u0696\u0699\3\2\2\2\u0697\u0695\3\2\2\2")
        buf.write("\u0698\u068e\3\2\2\2\u0698\u0699\3\2\2\2\u0699\u06a4\3")
        buf.write("\2\2\2\u069a\u069b\7o\2\2\u069b\u069c\7*\2\2\u069c\u06a1")
        buf.write("\5\u008eH\2\u069d\u069e\7\7\2\2\u069e\u06a0\5\u008eH\2")
        buf.write("\u069f\u069d\3\2\2\2\u06a0\u06a3\3\2\2\2\u06a1\u069f\3")
        buf.write("\2\2\2\u06a1\u06a2\3\2\2\2\u06a2\u06a5\3\2\2\2\u06a3\u06a1")
        buf.write("\3\2\2\2\u06a4\u069a\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5")
        buf.write("\u06a7\3\2\2\2\u06a6\u06a8\5~@\2\u06a7\u06a6\3\2\2\2\u06a7")
        buf.write("\u06a8\3\2\2\2\u06a8\u06a9\3\2\2\2\u06a9\u06ab\7\6\2\2")
        buf.write("\u06aa\u0689\3\2\2\2\u06aa\u068a\3\2\2\2\u06ab}\3\2\2")
        buf.write("\2\u06ac\u06b6\5\u0080A\2\u06ad\u06b4\7\u00b6\2\2\u06ae")
        buf.write("\u06af\7g\2\2\u06af\u06b5\7\u00b8\2\2\u06b0\u06b1\7\u009f")
        buf.write("\2\2\u06b1\u06b5\7\u0081\2\2\u06b2\u06b5\7P\2\2\u06b3")
        buf.write("\u06b5\7\u00b7\2\2\u06b4\u06ae\3\2\2\2\u06b4\u06b0\3\2")
        buf.write("\2\2\u06b4\u06b2\3\2\2\2\u06b4\u06b3\3\2\2\2\u06b5\u06b7")
        buf.write("\3\2\2\2\u06b6\u06ad\3\2\2\2\u06b6\u06b7\3\2\2\2\u06b7")
        buf.write("\177\3\2\2\2\u06b8\u06bf\t\23\2\2\u06b9\u06c0\5\u0096")
        buf.write("L\2\u06ba\u06bb\7)\2\2\u06bb\u06bc\5\u0092J\2\u06bc\u06bd")
        buf.write("\7\"\2\2\u06bd\u06be\5\u0094K\2\u06be\u06c0\3\2\2\2\u06bf")
        buf.write("\u06b9\3\2\2\2\u06bf\u06ba\3\2\2\2\u06c0\u0081\3\2\2\2")
        buf.write("\u06c1\u06c2\5\u00dco\2\u06c2\u06cc\7\5\2\2\u06c3\u06c8")
        buf.write("\5B\"\2\u06c4\u06c5\7\7\2\2\u06c5\u06c7\5B\"\2\u06c6\u06c4")
        buf.write("\3\2\2\2\u06c7\u06ca\3\2\2\2\u06c8\u06c6\3\2\2\2\u06c8")
        buf.write("\u06c9\3\2\2\2\u06c9\u06cd\3\2\2\2\u06ca\u06c8\3\2\2\2")
        buf.write("\u06cb\u06cd\7\t\2\2\u06cc\u06c3\3\2\2\2\u06cc\u06cb\3")
        buf.write("\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06cf\7\6\2\2\u06cf\u0083")
        buf.write("\3\2\2\2\u06d0\u06d1\5\u00dep\2\u06d1\u06de\7\5\2\2\u06d2")
        buf.write("\u06d4\7@\2\2\u06d3\u06d2\3\2\2\2\u06d3\u06d4\3\2\2\2")
        buf.write("\u06d4\u06d5\3\2\2\2\u06d5\u06da\5B\"\2\u06d6\u06d7\7")
        buf.write("\7\2\2\u06d7\u06d9\5B\"\2\u06d8\u06d6\3\2\2\2\u06d9\u06dc")
        buf.write("\3\2\2\2\u06da\u06d8\3\2\2\2\u06da\u06db\3\2\2\2\u06db")
        buf.write("\u06df\3\2\2\2\u06dc\u06da\3\2\2\2\u06dd\u06df\7\t\2\2")
        buf.write("\u06de\u06d3\3\2\2\2\u06de\u06dd\3\2\2\2\u06de\u06df\3")
        buf.write("\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u06e2\7\6\2\2\u06e1\u06e3")
        buf.write("\5x=\2\u06e2\u06e1\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u0085")
        buf.write("\3\2\2\2\u06e4\u06e5\5\u0098M\2\u06e5\u06ef\7\5\2\2\u06e6")
        buf.write("\u06eb\5B\"\2\u06e7\u06e8\7\7\2\2\u06e8\u06ea\5B\"\2\u06e9")
        buf.write("\u06e7\3\2\2\2\u06ea\u06ed\3\2\2\2\u06eb\u06e9\3\2\2\2")
        buf.write("\u06eb\u06ec\3\2\2\2\u06ec\u06f0\3\2\2\2\u06ed\u06eb\3")
        buf.write("\2\2\2\u06ee\u06f0\7\t\2\2\u06ef\u06e6\3\2\2\2\u06ef\u06ee")
        buf.write("\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1")
        buf.write("\u06f3\7\6\2\2\u06f2\u06f4\5x=\2\u06f3\u06f2\3\2\2\2\u06f3")
        buf.write("\u06f4\3\2\2\2\u06f4\u06f5\3\2\2\2\u06f5\u06f8\7\u009a")
        buf.write("\2\2\u06f6\u06f9\5z>\2\u06f7\u06f9\5\u00d4k\2\u06f8\u06f6")
        buf.write("\3\2\2\2\u06f8\u06f7\3\2\2\2\u06f9\u0087\3\2\2\2\u06fa")
        buf.write("\u06fc\7\u0097\2\2\u06fb\u06fd\7v\2\2\u06fc\u06fb\3\2")
        buf.write("\2\2\u06fc\u06fd\3\2\2\2\u06fd\u06fe\3\2\2\2\u06fe\u0703")
        buf.write("\58\35\2\u06ff\u0700\7\7\2\2\u0700\u0702\58\35\2\u0701")
        buf.write("\u06ff\3\2\2\2\u0702\u0705\3\2\2\2\u0703\u0701\3\2\2\2")
        buf.write("\u0703\u0704\3\2\2\2\u0704\u0089\3\2\2\2\u0705\u0703\3")
        buf.write("\2\2\2\u0706\u0707\7o\2\2\u0707\u0708\7*\2\2\u0708\u070d")
        buf.write("\5\u008eH\2\u0709\u070a\7\7\2\2\u070a\u070c\5\u008eH\2")
        buf.write("\u070b\u0709\3\2\2\2\u070c\u070f\3\2\2\2\u070d\u070b\3")
        buf.write("\2\2\2\u070d\u070e\3\2\2\2\u070e\u008b\3\2\2\2\u070f\u070d")
        buf.write("\3\2\2\2\u0710\u0711\7d\2\2\u0711\u0714\5B\"\2\u0712\u0713")
        buf.write("\t\24\2\2\u0713\u0715\5B\"\2\u0714\u0712\3\2\2\2\u0714")
        buf.write("\u0715\3\2\2\2\u0715\u008d\3\2\2\2\u0716\u0719\5B\"\2")
        buf.write("\u0717\u0718\7/\2\2\u0718\u071a\5\u00c0a\2\u0719\u0717")
        buf.write("\3\2\2\2\u0719\u071a\3\2\2\2\u071a\u071c\3\2\2\2\u071b")
        buf.write("\u071d\5\u0090I\2\u071c\u071b\3\2\2\2\u071c\u071d\3\2")
        buf.write("\2\2\u071d\u0720\3\2\2\2\u071e\u071f\7\u00b1\2\2\u071f")
        buf.write("\u0721\t\25\2\2\u0720\u071e\3\2\2\2\u0720\u0721\3\2\2")
        buf.write("\2\u0721\u008f\3\2\2\2\u0722\u0723\t\26\2\2\u0723\u0091")
        buf.write("\3\2\2\2\u0724\u0725\5B\"\2\u0725\u0726\7\u009d\2\2\u0726")
        buf.write("\u072f\3\2\2\2\u0727\u0728\5B\"\2\u0728\u0729\7\u00a0")
        buf.write("\2\2\u0729\u072f\3\2\2\2\u072a\u072b\7\u009f\2\2\u072b")
        buf.write("\u072f\7\u0081\2\2\u072c\u072d\7\u009e\2\2\u072d\u072f")
        buf.write("\7\u009d\2\2\u072e\u0724\3\2\2\2\u072e\u0727\3\2\2\2\u072e")
        buf.write("\u072a\3\2\2\2\u072e\u072c\3\2\2\2\u072f\u0093\3\2\2\2")
        buf.write("\u0730\u0731\5B\"\2\u0731\u0732\7\u009d\2\2\u0732\u073b")
        buf.write("\3\2\2\2\u0733\u0734\5B\"\2\u0734\u0735\7\u00a0\2\2\u0735")
        buf.write("\u073b\3\2\2\2\u0736\u0737\7\u009f\2\2\u0737\u073b\7\u0081")
        buf.write("\2\2\u0738\u0739\7\u009e\2\2\u0739\u073b\7\u00a0\2\2\u073a")
        buf.write("\u0730\3\2\2\2\u073a\u0733\3\2\2\2\u073a\u0736\3\2\2\2")
        buf.write("\u073a\u0738\3\2\2\2\u073b\u0095\3\2\2\2\u073c\u073d\5")
        buf.write("B\"\2\u073d\u073e\7\u009d\2\2\u073e\u0744\3\2\2\2\u073f")
        buf.write("\u0740\7\u009e\2\2\u0740\u0744\7\u009d\2\2\u0741\u0742")
        buf.write("\7\u009f\2\2\u0742\u0744\7\u0081\2\2\u0743\u073c\3\2\2")
        buf.write("\2\u0743\u073f\3\2\2\2\u0743\u0741\3\2\2\2\u0744\u0097")
        buf.write("\3\2\2\2\u0745\u0746\t\27\2\2\u0746\u0747\7\5\2\2\u0747")
        buf.write("\u0748\5B\"\2\u0748\u0749\7\6\2\2\u0749\u074a\7\u009a")
        buf.write("\2\2\u074a\u074c\7\5\2\2\u074b\u074d\5\u009eP\2\u074c")
        buf.write("\u074b\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u074e\3\2\2\2")
        buf.write("\u074e\u0750\5\u00a2R\2\u074f\u0751\5\u0080A\2\u0750\u074f")
        buf.write("\3\2\2\2\u0750\u0751\3\2\2\2\u0751\u0752\3\2\2\2\u0752")
        buf.write("\u0753\7\6\2\2\u0753\u079b\3\2\2\2\u0754\u0755\t\30\2")
        buf.write("\2\u0755\u0756\7\5\2\2\u0756\u0757\7\6\2\2\u0757\u0758")
        buf.write("\7\u009a\2\2\u0758\u075a\7\5\2\2\u0759\u075b\5\u009eP")
        buf.write("\2\u075a\u0759\3\2\2\2\u075a\u075b\3\2\2\2\u075b\u075d")
        buf.write("\3\2\2\2\u075c\u075e\5\u00a0Q\2\u075d\u075c\3\2\2\2\u075d")
        buf.write("\u075e\3\2\2\2\u075e\u075f\3\2\2\2\u075f\u079b\7\6\2\2")
        buf.write("\u0760\u0761\t\31\2\2\u0761\u0762\7\5\2\2\u0762\u0763")
        buf.write("\7\6\2\2\u0763\u0764\7\u009a\2\2\u0764\u0766\7\5\2\2\u0765")
        buf.write("\u0767\5\u009eP\2\u0766\u0765\3\2\2\2\u0766\u0767\3\2")
        buf.write("\2\2\u0767\u0768\3\2\2\2\u0768\u0769\5\u00a2R\2\u0769")
        buf.write("\u076a\7\6\2\2\u076a\u079b\3\2\2\2\u076b\u076c\t\32\2")
        buf.write("\2\u076c\u076d\7\5\2\2\u076d\u076f\5B\"\2\u076e\u0770")
        buf.write("\5\u009aN\2\u076f\u076e\3\2\2\2\u076f\u0770\3\2\2\2\u0770")
        buf.write("\u0772\3\2\2\2\u0771\u0773\5\u009cO\2\u0772\u0771\3\2")
        buf.write("\2\2\u0772\u0773\3\2\2\2\u0773\u0774\3\2\2\2\u0774\u0775")
        buf.write("\7\6\2\2\u0775\u0776\7\u009a\2\2\u0776\u0778\7\5\2\2\u0777")
        buf.write("\u0779\5\u009eP\2\u0778\u0777\3\2\2\2\u0778\u0779\3\2")
        buf.write("\2\2\u0779\u077a\3\2\2\2\u077a\u077b\5\u00a2R\2\u077b")
        buf.write("\u077c\7\6\2\2\u077c\u079b\3\2\2\2\u077d\u077e\7\u00a6")
        buf.write("\2\2\u077e\u077f\7\5\2\2\u077f\u0780\5B\"\2\u0780\u0781")
        buf.write("\7\7\2\2\u0781\u0782\5$\23\2\u0782\u0783\7\6\2\2\u0783")
        buf.write("\u0784\7\u009a\2\2\u0784\u0786\7\5\2\2\u0785\u0787\5\u009e")
        buf.write("P\2\u0786\u0785\3\2\2\2\u0786\u0787\3\2\2\2\u0787\u0788")
        buf.write("\3\2\2\2\u0788\u078a\5\u00a2R\2\u0789\u078b\5\u0080A\2")
        buf.write("\u078a\u0789\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078c\3")
        buf.write("\2\2\2\u078c\u078d\7\6\2\2\u078d\u079b\3\2\2\2\u078e\u078f")
        buf.write("\7\u00a7\2\2\u078f\u0790\7\5\2\2\u0790\u0791\5B\"\2\u0791")
        buf.write("\u0792\7\6\2\2\u0792\u0793\7\u009a\2\2\u0793\u0795\7\5")
        buf.write("\2\2\u0794\u0796\5\u009eP\2\u0795\u0794\3\2\2\2\u0795")
        buf.write("\u0796\3\2\2\2\u0796\u0797\3\2\2\2\u0797\u0798\5\u00a2")
        buf.write("R\2\u0798\u0799\7\6\2\2\u0799\u079b\3\2\2\2\u079a\u0745")
        buf.write("\3\2\2\2\u079a\u0754\3\2\2\2\u079a\u0760\3\2\2\2\u079a")
        buf.write("\u076b\3\2\2\2\u079a\u077d\3\2\2\2\u079a\u078e\3\2\2\2")
        buf.write("\u079b\u0099\3\2\2\2\u079c\u079d\7\7\2\2\u079d\u079e\5")
        buf.write("$\23\2\u079e\u009b\3\2\2\2\u079f\u07a0\7\7\2\2\u07a0\u07a1")
        buf.write("\5$\23\2\u07a1\u009d\3\2\2\2\u07a2\u07a3\7\u009b\2\2\u07a3")
        buf.write("\u07a5\7*\2\2\u07a4\u07a6\5B\"\2\u07a5\u07a4\3\2\2\2\u07a6")
        buf.write("\u07a7\3\2\2\2\u07a7\u07a5\3\2\2\2\u07a7\u07a8\3\2\2\2")
        buf.write("\u07a8\u009f\3\2\2\2\u07a9\u07aa\7o\2\2\u07aa\u07ac\7")
        buf.write("*\2\2\u07ab\u07ad\5B\"\2\u07ac\u07ab\3\2\2\2\u07ad\u07ae")
        buf.write("\3\2\2\2\u07ae\u07ac\3\2\2\2\u07ae\u07af\3\2\2\2\u07af")
        buf.write("\u00a1\3\2\2\2\u07b0\u07b1\7o\2\2\u07b1\u07b2\7*\2\2\u07b2")
        buf.write("\u07b3\5\u00a4S\2\u07b3\u00a3\3\2\2\2\u07b4\u07b6\5B\"")
        buf.write("\2\u07b5\u07b7\5\u0090I\2\u07b6\u07b5\3\2\2\2\u07b6\u07b7")
        buf.write("\3\2\2\2\u07b7\u07bf\3\2\2\2\u07b8\u07b9\7\7\2\2\u07b9")
        buf.write("\u07bb\5B\"\2\u07ba\u07bc\5\u0090I\2\u07bb\u07ba\3\2\2")
        buf.write("\2\u07bb\u07bc\3\2\2\2\u07bc\u07be\3\2\2\2\u07bd\u07b8")
        buf.write("\3\2\2\2\u07be\u07c1\3\2\2\2\u07bf\u07bd\3\2\2\2\u07bf")
        buf.write("\u07c0\3\2\2\2\u07c0\u00a5\3\2\2\2\u07c1\u07bf\3\2\2\2")
        buf.write("\u07c2\u07c3\5X-\2\u07c3\u00a7\3\2\2\2\u07c4\u07c5\5X")
        buf.write("-\2\u07c5\u00a9\3\2\2\2\u07c6\u07c7\t\33\2\2\u07c7\u00ab")
        buf.write("\3\2\2\2\u07c8\u07c9\7\u00be\2\2\u07c9\u00ad\3\2\2\2\u07ca")
        buf.write("\u07cd\5B\"\2\u07cb\u07cd\5\36\20\2\u07cc\u07ca\3\2\2")
        buf.write("\2\u07cc\u07cb\3\2\2\2\u07cd\u00af\3\2\2\2\u07ce\u07cf")
        buf.write("\t\34\2\2\u07cf\u00b1\3\2\2\2\u07d0\u07d1\t\35\2\2\u07d1")
        buf.write("\u00b3\3\2\2\2\u07d2\u07d3\5\u00e2r\2\u07d3\u00b5\3\2")
        buf.write("\2\2\u07d4\u07d5\5\u00e2r\2\u07d5\u00b7\3\2\2\2\u07d6")
        buf.write("\u07d7\5\u00e2r\2\u07d7\u00b9\3\2\2\2\u07d8\u07d9\5\u00e2")
        buf.write("r\2\u07d9\u00bb\3\2\2\2\u07da\u07db\5\u00e2r\2\u07db\u00bd")
        buf.write("\3\2\2\2\u07dc\u07dd\5\u00e2r\2\u07dd\u00bf\3\2\2\2\u07de")
        buf.write("\u07df\5\u00e2r\2\u07df\u00c1\3\2\2\2\u07e0\u07e1\5\u00e2")
        buf.write("r\2\u07e1\u00c3\3\2\2\2\u07e2\u07e3\5\u00e2r\2\u07e3\u00c5")
        buf.write("\3\2\2\2\u07e4\u07e5\5\u00e2r\2\u07e5\u00c7\3\2\2\2\u07e6")
        buf.write("\u07e7\5\u00e2r\2\u07e7\u00c9\3\2\2\2\u07e8\u07e9\5\u00e2")
        buf.write("r\2\u07e9\u00cb\3\2\2\2\u07ea\u07eb\5\u00e2r\2\u07eb\u00cd")
        buf.write("\3\2\2\2\u07ec\u07ed\5\u00e2r\2\u07ed\u00cf\3\2\2\2\u07ee")
        buf.write("\u07ef\5\u00e2r\2\u07ef\u00d1\3\2\2\2\u07f0\u07f1\5\u00e2")
        buf.write("r\2\u07f1\u00d3\3\2\2\2\u07f2\u07f3\5\u00e2r\2\u07f3\u00d5")
        buf.write("\3\2\2\2\u07f4\u07f5\5\u00e2r\2\u07f5\u00d7\3\2\2\2\u07f6")
        buf.write("\u07f7\5\u00e2r\2\u07f7\u00d9\3\2\2\2\u07f8\u07f9\5\u00e2")
        buf.write("r\2\u07f9\u00db\3\2\2\2\u07fa\u07fb\5\u00e2r\2\u07fb\u00dd")
        buf.write("\3\2\2\2\u07fc\u07fd\5\u00e2r\2\u07fd\u00df\3\2\2\2\u07fe")
        buf.write("\u07ff\5\u00e2r\2\u07ff\u00e1\3\2\2\2\u0800\u0808\7\u00bb")
        buf.write("\2\2\u0801\u0808\5\u00b2Z\2\u0802\u0808\7\u00be\2\2\u0803")
        buf.write("\u0804\7\5\2\2\u0804\u0805\5\u00e2r\2\u0805\u0806\7\6")
        buf.write("\2\2\u0806\u0808\3\2\2\2\u0807\u0800\3\2\2\2\u0807\u0801")
        buf.write("\3\2\2\2\u0807\u0802\3\2\2\2\u0807\u0803\3\2\2\2\u0808")
        buf.write("\u00e3\3\2\2\2\u012a\u00e7\u00ef\u00f6\u00fb\u0101\u0107")
        buf.write("\u0109\u0123\u012a\u0131\u0137\u013b\u0140\u0143\u014a")
        buf.write("\u014d\u0151\u0159\u015d\u015f\u0163\u0167\u016b\u016e")
        buf.write("\u0175\u017b\u0181\u0186\u0191\u0197\u019b\u019f\u01a2")
        buf.write("\u01a6\u01ac\u01b1\u01ba\u01c1\u01c7\u01cb\u01cf\u01d4")
        buf.write("\u01da\u01e6\u01ea\u01ef\u01f2\u01f5\u01f8\u01fc\u01ff")
        buf.write("\u020d\u0214\u021b\u021d\u0220\u0226\u022b\u0233\u0238")
        buf.write("\u0247\u024d\u0257\u025c\u0266\u026a\u026c\u0270\u0275")
        buf.write("\u0277\u027f\u0285\u028a\u0291\u029c\u029f\u02a1\u02a8")
        buf.write("\u02ac\u02b3\u02b9\u02bf\u02c5\u02ca\u02d3\u02d8\u02e3")
        buf.write("\u02e8\u02f3\u02f8\u02fc\u030c\u0316\u031b\u0323\u032f")
        buf.write("\u0334\u033c\u0343\u0346\u0349\u0350\u0353\u0356\u0359")
        buf.write("\u035d\u0365\u036a\u0374\u0379\u0382\u0389\u038d\u0391")
        buf.write("\u0394\u039c\u03a9\u03ac\u03b4\u03bd\u03c1\u03c6\u03e4")
        buf.write("\u03f0\u03f5\u0401\u0407\u040e\u0412\u041c\u041f\u0425")
        buf.write("\u042b\u0434\u0437\u043b\u043d\u043f\u0448\u0454\u045f")
        buf.write("\u0463\u046a\u0470\u0475\u047d\u0482\u0486\u0489\u048d")
        buf.write("\u0490\u0498\u04a3\u04a9\u04ab\u04b3\u04ba\u04c1\u04c6")
        buf.write("\u04c8\u04ce\u04d7\u04dc\u04e3\u04e7\u04e9\u04ec\u04f4")
        buf.write("\u04f8\u04fb\u0501\u0505\u050a\u0511\u051a\u051e\u0520")
        buf.write("\u0524\u052d\u0532\u0534\u0541\u0544\u0547\u054c\u0550")
        buf.write("\u0553\u0556\u055b\u055f\u0564\u0567\u056a\u056f\u0573")
        buf.write("\u0576\u057d\u0582\u058b\u0590\u0593\u059b\u059f\u05a7")
        buf.write("\u05aa\u05ac\u05b5\u05b8\u05ba\u05be\u05c2\u05c6\u05c9")
        buf.write("\u05d4\u05d9\u05dd\u05e1\u05e4\u05e9\u05ef\u05f6\u05fd")
        buf.write("\u0606\u060a\u060c\u0610\u0613\u061b\u0621\u0626\u062c")
        buf.write("\u0633\u063a\u063f\u0642\u0645\u0648\u064d\u0652\u0659")
        buf.write("\u065d\u0661\u066b\u0674\u0677\u0680\u0684\u068c\u0695")
        buf.write("\u0698\u06a1\u06a4\u06a7\u06aa\u06b4\u06b6\u06bf\u06c8")
        buf.write("\u06cc\u06d3\u06da\u06de\u06e2\u06eb\u06ef\u06f3\u06f8")
        buf.write("\u06fc\u0703\u070d\u0714\u0719\u071c\u0720\u072e\u073a")
        buf.write("\u0743\u074c\u0750\u075a\u075d\u0766\u076f\u0772\u0778")
        buf.write("\u0786\u078a\u0795\u079a\u07a7\u07ae\u07b6\u07bb\u07bf")
        buf.write("\u07cc\u0807")
        return buf.getvalue()


class RSSQLParser ( Parser ):

    grammarFileName = "RSSQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'", "'ABORT'", "'ACTION'", "'ADD'", 
                     "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", 
                     "'AS'", "'ASC'", "'ATTACH'", "'AUTOINCREMENT'", "'BEFORE'", 
                     "'BEGIN'", "'BETWEEN'", "'BY'", "'CASCADE'", "'CASE'", 
                     "'CAST'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'COMMIT'", 
                     "'CONFLICT'", "'CONSTRAINT'", "'CREATE'", "'CROSS'", 
                     "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'DATABASE'", "'DEFAULT'", "'DEFERRABLE'", "'DEFERRED'", 
                     "'DELETE'", "'DESC'", "'DETACH'", "'DISTINCT'", "'DROP'", 
                     "'EACH'", "'ELSE'", "'END'", "'ESCAPE'", "'EXCEPT'", 
                     "'EXCLUSIVE'", "'EXISTS'", "'EXPLAIN'", "'FAIL'", "'FOR'", 
                     "'FOREIGN'", "'FROM'", "'FULL'", "'GLOB'", "'GROUP'", 
                     "'HAVING'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IN'", 
                     "'INDEX'", "'INDEXED'", "'INITIALLY'", "'INNER'", "'INSERT'", 
                     "'INSTEAD'", "'INTERSECT'", "'INTO'", "'IS'", "'ISNULL'", 
                     "'JOIN'", "'KEY'", "'LEFT'", "'LIKE'", "'LIMIT'", "'MATCH'", 
                     "'NATURAL'", "'NO'", "'NOT'", "'NOTNULL'", "'NULL'", 
                     "'OF'", "'OFFSET'", "'ON'", "'OR'", "'ORDER'", "'OUTER'", 
                     "'PLAN'", "'PRAGMA'", "'PRIMARY'", "'QUERY'", "'RAISE'", 
                     "'RECURSIVE'", "'REFERENCES'", "'REGEXP'", "'REINDEX'", 
                     "'RELEASE'", "'RENAME'", "'REPLACE'", "'RESTRICT'", 
                     "'RETURNING'", "'RIGHT'", "'ROLLBACK'", "'ROW'", "'ROWS'", 
                     "'SAVEPOINT'", "'SELECT'", "'SET'", "'TABLE'", "'TEMP'", 
                     "'TEMPORARY'", "'THEN'", "'TO'", "'TRANSACTION'", "'TRIGGER'", 
                     "'UNION'", "'UNIQUE'", "'UPDATE'", "'USING'", "'VACUUM'", 
                     "'VALUES'", "'VIEW'", "'VIRTUAL'", "'WHEN'", "'WHERE'", 
                     "'WITH'", "'WITHOUT'", "'FIRST_VALUE'", "'OVER'", "'PARTITION'", 
                     "'RANGE'", "'PRECEDING'", "'UNBOUNDED'", "'CURRENT'", 
                     "'FOLLOWING'", "'CUME_DIST'", "'DENSE_RANK'", "'LAG'", 
                     "'LAST_VALUE'", "'LEAD'", "'NTH_VALUE'", "'NTILE'", 
                     "'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'GENERATED'", 
                     "'ALWAYS'", "'STORED'", "'TRUE'", "'FALSE'", "'WINDOW'", 
                     "'NULLS'", "'FIRST'", "'LAST'", "'FILTER'", "'GROUPS'", 
                     "'EXCLUDE'", "'TIES'", "'OTHERS'", "'DO'", "'NOTHING'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "ABORT_", "ACTION_", "ADD_", "AFTER_", "ALL_", "ALTER_", 
                      "ANALYZE_", "AND_", "AS_", "ASC_", "ATTACH_", "AUTOINCREMENT_", 
                      "BEFORE_", "BEGIN_", "BETWEEN_", "BY_", "CASCADE_", 
                      "CASE_", "CAST_", "CHECK_", "COLLATE_", "COLUMN_", 
                      "COMMIT_", "CONFLICT_", "CONSTRAINT_", "CREATE_", 
                      "CROSS_", "CURRENT_DATE_", "CURRENT_TIME_", "CURRENT_TIMESTAMP_", 
                      "DATABASE_", "DEFAULT_", "DEFERRABLE_", "DEFERRED_", 
                      "DELETE_", "DESC_", "DETACH_", "DISTINCT_", "DROP_", 
                      "EACH_", "ELSE_", "END_", "ESCAPE_", "EXCEPT_", "EXCLUSIVE_", 
                      "EXISTS_", "EXPLAIN_", "FAIL_", "FOR_", "FOREIGN_", 
                      "FROM_", "FULL_", "GLOB_", "GROUP_", "HAVING_", "IF_", 
                      "IGNORE_", "IMMEDIATE_", "IN_", "INDEX_", "INDEXED_", 
                      "INITIALLY_", "INNER_", "INSERT_", "INSTEAD_", "INTERSECT_", 
                      "INTO_", "IS_", "ISNULL_", "JOIN_", "KEY_", "LEFT_", 
                      "LIKE_", "LIMIT_", "MATCH_", "NATURAL_", "NO_", "NOT_", 
                      "NOTNULL_", "NULL_", "OF_", "OFFSET_", "ON_", "OR_", 
                      "ORDER_", "OUTER_", "PLAN_", "PRAGMA_", "PRIMARY_", 
                      "QUERY_", "RAISE_", "RECURSIVE_", "REFERENCES_", "REGEXP_", 
                      "REINDEX_", "RELEASE_", "RENAME_", "REPLACE_", "RESTRICT_", 
                      "RETURNING_", "RIGHT_", "ROLLBACK_", "ROW_", "ROWS_", 
                      "SAVEPOINT_", "SELECT_", "SET_", "TABLE_", "TEMP_", 
                      "TEMPORARY_", "THEN_", "TO_", "TRANSACTION_", "TRIGGER_", 
                      "UNION_", "UNIQUE_", "UPDATE_", "USING_", "VACUUM_", 
                      "VALUES_", "VIEW_", "VIRTUAL_", "WHEN_", "WHERE_", 
                      "WITH_", "WITHOUT_", "FIRST_VALUE_", "OVER_", "PARTITION_", 
                      "RANGE_", "PRECEDING_", "UNBOUNDED_", "CURRENT_", 
                      "FOLLOWING_", "CUME_DIST_", "DENSE_RANK_", "LAG_", 
                      "LAST_VALUE_", "LEAD_", "NTH_VALUE_", "NTILE_", "PERCENT_RANK_", 
                      "RANK_", "ROW_NUMBER_", "GENERATED_", "ALWAYS_", "STORED_", 
                      "TRUE_", "FALSE_", "WINDOW_", "NULLS_", "FIRST_", 
                      "LAST_", "FILTER_", "GROUPS_", "EXCLUDE_", "TIES_", 
                      "OTHERS_", "DO_", "NOTHING_", "IDENTIFIER", "NUMERIC_LITERAL", 
                      "BIND_PARAMETER", "STRING_LITERAL", "BLOB_LITERAL", 
                      "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
                      "UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_sql_stmt_list = 1
    RULE_sql_stmt = 2
    RULE_alter_table_stmt = 3
    RULE_analyze_stmt = 4
    RULE_attach_stmt = 5
    RULE_begin_stmt = 6
    RULE_commit_stmt = 7
    RULE_rollback_stmt = 8
    RULE_savepoint_stmt = 9
    RULE_release_stmt = 10
    RULE_create_index_stmt = 11
    RULE_indexed_column = 12
    RULE_create_table_stmt = 13
    RULE_column_def = 14
    RULE_type_name = 15
    RULE_column_constraint = 16
    RULE_signed_number = 17
    RULE_table_constraint = 18
    RULE_foreign_key_clause = 19
    RULE_conflict_clause = 20
    RULE_create_trigger_stmt = 21
    RULE_create_view_stmt = 22
    RULE_create_virtual_table_stmt = 23
    RULE_with_clause = 24
    RULE_cte_table_name = 25
    RULE_recursive_cte = 26
    RULE_common_table_expression = 27
    RULE_delete_stmt = 28
    RULE_delete_stmt_limited = 29
    RULE_detach_stmt = 30
    RULE_drop_stmt = 31
    RULE_expr = 32
    RULE_raise_function = 33
    RULE_literal_value = 34
    RULE_value_row = 35
    RULE_values_clause = 36
    RULE_insert_stmt = 37
    RULE_returning_clause = 38
    RULE_upsert_clause = 39
    RULE_pragma_stmt = 40
    RULE_pragma_value = 41
    RULE_reindex_stmt = 42
    RULE_select_stmt = 43
    RULE_join_clause = 44
    RULE_select_core = 45
    RULE_factored_select_stmt = 46
    RULE_simple_select_stmt = 47
    RULE_compound_select_stmt = 48
    RULE_table_or_subquery = 49
    RULE_result_column = 50
    RULE_join_operator = 51
    RULE_join_constraint = 52
    RULE_compound_operator = 53
    RULE_update_stmt = 54
    RULE_column_name_list = 55
    RULE_update_stmt_limited = 56
    RULE_qualified_table_name = 57
    RULE_vacuum_stmt = 58
    RULE_filter_clause = 59
    RULE_window_defn = 60
    RULE_over_clause = 61
    RULE_frame_spec = 62
    RULE_frame_clause = 63
    RULE_simple_function_invocation = 64
    RULE_aggregate_function_invocation = 65
    RULE_window_function_invocation = 66
    RULE_common_table_stmt = 67
    RULE_order_by_stmt = 68
    RULE_limit_stmt = 69
    RULE_ordering_term = 70
    RULE_asc_desc = 71
    RULE_frame_left = 72
    RULE_frame_right = 73
    RULE_frame_single = 74
    RULE_window_function = 75
    RULE_offset = 76
    RULE_default_value = 77
    RULE_partition_by = 78
    RULE_order_by_expr = 79
    RULE_order_by_expr_asc_desc = 80
    RULE_expr_asc_desc = 81
    RULE_initial_select = 82
    RULE_recursive_select = 83
    RULE_unary_operator = 84
    RULE_error_message = 85
    RULE_module_argument = 86
    RULE_column_alias = 87
    RULE_keyword = 88
    RULE_name = 89
    RULE_function_name = 90
    RULE_schema_name = 91
    RULE_table_name = 92
    RULE_table_or_index_name = 93
    RULE_column_name = 94
    RULE_collation_name = 95
    RULE_foreign_table = 96
    RULE_index_name = 97
    RULE_trigger_name = 98
    RULE_view_name = 99
    RULE_module_name = 100
    RULE_pragma_name = 101
    RULE_savepoint_name = 102
    RULE_table_alias = 103
    RULE_transaction_name = 104
    RULE_window_name = 105
    RULE_alias = 106
    RULE_filename = 107
    RULE_base_window_name = 108
    RULE_simple_func = 109
    RULE_aggregate_func = 110
    RULE_table_function_name = 111
    RULE_any_name = 112

    ruleNames =  [ "parse", "sql_stmt_list", "sql_stmt", "alter_table_stmt", 
                   "analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", 
                   "rollback_stmt", "savepoint_stmt", "release_stmt", "create_index_stmt", 
                   "indexed_column", "create_table_stmt", "column_def", 
                   "type_name", "column_constraint", "signed_number", "table_constraint", 
                   "foreign_key_clause", "conflict_clause", "create_trigger_stmt", 
                   "create_view_stmt", "create_virtual_table_stmt", "with_clause", 
                   "cte_table_name", "recursive_cte", "common_table_expression", 
                   "delete_stmt", "delete_stmt_limited", "detach_stmt", 
                   "drop_stmt", "expr", "raise_function", "literal_value", 
                   "value_row", "values_clause", "insert_stmt", "returning_clause", 
                   "upsert_clause", "pragma_stmt", "pragma_value", "reindex_stmt", 
                   "select_stmt", "join_clause", "select_core", "factored_select_stmt", 
                   "simple_select_stmt", "compound_select_stmt", "table_or_subquery", 
                   "result_column", "join_operator", "join_constraint", 
                   "compound_operator", "update_stmt", "column_name_list", 
                   "update_stmt_limited", "qualified_table_name", "vacuum_stmt", 
                   "filter_clause", "window_defn", "over_clause", "frame_spec", 
                   "frame_clause", "simple_function_invocation", "aggregate_function_invocation", 
                   "window_function_invocation", "common_table_stmt", "order_by_stmt", 
                   "limit_stmt", "ordering_term", "asc_desc", "frame_left", 
                   "frame_right", "frame_single", "window_function", "offset", 
                   "default_value", "partition_by", "order_by_expr", "order_by_expr_asc_desc", 
                   "expr_asc_desc", "initial_select", "recursive_select", 
                   "unary_operator", "error_message", "module_argument", 
                   "column_alias", "keyword", "name", "function_name", "schema_name", 
                   "table_name", "table_or_index_name", "column_name", "collation_name", 
                   "foreign_table", "index_name", "trigger_name", "view_name", 
                   "module_name", "pragma_name", "savepoint_name", "table_alias", 
                   "transaction_name", "window_name", "alias", "filename", 
                   "base_window_name", "simple_func", "aggregate_func", 
                   "table_function_name", "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    ABORT_=25
    ACTION_=26
    ADD_=27
    AFTER_=28
    ALL_=29
    ALTER_=30
    ANALYZE_=31
    AND_=32
    AS_=33
    ASC_=34
    ATTACH_=35
    AUTOINCREMENT_=36
    BEFORE_=37
    BEGIN_=38
    BETWEEN_=39
    BY_=40
    CASCADE_=41
    CASE_=42
    CAST_=43
    CHECK_=44
    COLLATE_=45
    COLUMN_=46
    COMMIT_=47
    CONFLICT_=48
    CONSTRAINT_=49
    CREATE_=50
    CROSS_=51
    CURRENT_DATE_=52
    CURRENT_TIME_=53
    CURRENT_TIMESTAMP_=54
    DATABASE_=55
    DEFAULT_=56
    DEFERRABLE_=57
    DEFERRED_=58
    DELETE_=59
    DESC_=60
    DETACH_=61
    DISTINCT_=62
    DROP_=63
    EACH_=64
    ELSE_=65
    END_=66
    ESCAPE_=67
    EXCEPT_=68
    EXCLUSIVE_=69
    EXISTS_=70
    EXPLAIN_=71
    FAIL_=72
    FOR_=73
    FOREIGN_=74
    FROM_=75
    FULL_=76
    GLOB_=77
    GROUP_=78
    HAVING_=79
    IF_=80
    IGNORE_=81
    IMMEDIATE_=82
    IN_=83
    INDEX_=84
    INDEXED_=85
    INITIALLY_=86
    INNER_=87
    INSERT_=88
    INSTEAD_=89
    INTERSECT_=90
    INTO_=91
    IS_=92
    ISNULL_=93
    JOIN_=94
    KEY_=95
    LEFT_=96
    LIKE_=97
    LIMIT_=98
    MATCH_=99
    NATURAL_=100
    NO_=101
    NOT_=102
    NOTNULL_=103
    NULL_=104
    OF_=105
    OFFSET_=106
    ON_=107
    OR_=108
    ORDER_=109
    OUTER_=110
    PLAN_=111
    PRAGMA_=112
    PRIMARY_=113
    QUERY_=114
    RAISE_=115
    RECURSIVE_=116
    REFERENCES_=117
    REGEXP_=118
    REINDEX_=119
    RELEASE_=120
    RENAME_=121
    REPLACE_=122
    RESTRICT_=123
    RETURNING_=124
    RIGHT_=125
    ROLLBACK_=126
    ROW_=127
    ROWS_=128
    SAVEPOINT_=129
    SELECT_=130
    SET_=131
    TABLE_=132
    TEMP_=133
    TEMPORARY_=134
    THEN_=135
    TO_=136
    TRANSACTION_=137
    TRIGGER_=138
    UNION_=139
    UNIQUE_=140
    UPDATE_=141
    USING_=142
    VACUUM_=143
    VALUES_=144
    VIEW_=145
    VIRTUAL_=146
    WHEN_=147
    WHERE_=148
    WITH_=149
    WITHOUT_=150
    FIRST_VALUE_=151
    OVER_=152
    PARTITION_=153
    RANGE_=154
    PRECEDING_=155
    UNBOUNDED_=156
    CURRENT_=157
    FOLLOWING_=158
    CUME_DIST_=159
    DENSE_RANK_=160
    LAG_=161
    LAST_VALUE_=162
    LEAD_=163
    NTH_VALUE_=164
    NTILE_=165
    PERCENT_RANK_=166
    RANK_=167
    ROW_NUMBER_=168
    GENERATED_=169
    ALWAYS_=170
    STORED_=171
    TRUE_=172
    FALSE_=173
    WINDOW_=174
    NULLS_=175
    FIRST_=176
    LAST_=177
    FILTER_=178
    GROUPS_=179
    EXCLUDE_=180
    TIES_=181
    OTHERS_=182
    DO_=183
    NOTHING_=184
    IDENTIFIER=185
    NUMERIC_LITERAL=186
    BIND_PARAMETER=187
    STRING_LITERAL=188
    BLOB_LITERAL=189
    SINGLE_LINE_COMMENT=190
    MULTILINE_COMMENT=191
    SPACES=192
    UNEXPECTED_CHAR=193

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ParseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(RSSQLParser.EOF, 0)

        def sql_stmt_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Sql_stmt_listContext,i)


        def getRuleIndex(self):
            return RSSQLParser.RULE_parse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParse" ):
                listener.enterParse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParse" ):
                listener.exitParse(self)




    def parse(self):

        localctx = RSSQLParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << RSSQLParser.SCOL) | (1 << RSSQLParser.ALTER_) | (1 << RSSQLParser.ANALYZE_) | (1 << RSSQLParser.ATTACH_) | (1 << RSSQLParser.BEGIN_) | (1 << RSSQLParser.COMMIT_) | (1 << RSSQLParser.CREATE_) | (1 << RSSQLParser.DELETE_) | (1 << RSSQLParser.DETACH_) | (1 << RSSQLParser.DROP_))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (RSSQLParser.END_ - 66)) | (1 << (RSSQLParser.EXPLAIN_ - 66)) | (1 << (RSSQLParser.INSERT_ - 66)) | (1 << (RSSQLParser.PRAGMA_ - 66)) | (1 << (RSSQLParser.REINDEX_ - 66)) | (1 << (RSSQLParser.RELEASE_ - 66)) | (1 << (RSSQLParser.REPLACE_ - 66)) | (1 << (RSSQLParser.ROLLBACK_ - 66)) | (1 << (RSSQLParser.SAVEPOINT_ - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (RSSQLParser.SELECT_ - 130)) | (1 << (RSSQLParser.UPDATE_ - 130)) | (1 << (RSSQLParser.VACUUM_ - 130)) | (1 << (RSSQLParser.VALUES_ - 130)) | (1 << (RSSQLParser.WITH_ - 130)))) != 0):
                self.state = 226
                self.sql_stmt_list()
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 232
            self.match(RSSQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmt_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Sql_stmtContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.SCOL)
            else:
                return self.getToken(RSSQLParser.SCOL, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_list" ):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_list" ):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = RSSQLParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.SCOL:
                self.state = 234
                self.match(RSSQLParser.SCOL)
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 240
            self.sql_stmt()
            self.state = 249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 242 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 241
                        self.match(RSSQLParser.SCOL)
                        self.state = 244 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==RSSQLParser.SCOL):
                            break

                    self.state = 246
                    self.sql_stmt() 
                self.state = 251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 255
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 252
                    self.match(RSSQLParser.SCOL) 
                self.state = 257
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Alter_table_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Analyze_stmtContext,0)


        def attach_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Attach_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Commit_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Create_table_stmtContext,0)


        def create_trigger_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Create_trigger_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Create_view_stmtContext,0)


        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Create_virtual_table_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Delete_stmtContext,0)


        def delete_stmt_limited(self):
            return self.getTypedRuleContext(RSSQLParser.Delete_stmt_limitedContext,0)


        def detach_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Detach_stmtContext,0)


        def drop_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Drop_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Insert_stmtContext,0)


        def pragma_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Pragma_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Reindex_stmtContext,0)


        def release_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Release_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Rollback_stmtContext,0)


        def savepoint_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Savepoint_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(RSSQLParser.Update_stmt_limitedContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Vacuum_stmtContext,0)


        def EXPLAIN_(self):
            return self.getToken(RSSQLParser.EXPLAIN_, 0)

        def QUERY_(self):
            return self.getToken(RSSQLParser.QUERY_, 0)

        def PLAN_(self):
            return self.getToken(RSSQLParser.PLAN_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = RSSQLParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.EXPLAIN_:
                self.state = 258
                self.match(RSSQLParser.EXPLAIN_)
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.QUERY_:
                    self.state = 259
                    self.match(RSSQLParser.QUERY_)
                    self.state = 260
                    self.match(RSSQLParser.PLAN_)




            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 265
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 266
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 267
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 268
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 269
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 270
                self.create_index_stmt()
                pass

            elif la_ == 7:
                self.state = 271
                self.create_table_stmt()
                pass

            elif la_ == 8:
                self.state = 272
                self.create_trigger_stmt()
                pass

            elif la_ == 9:
                self.state = 273
                self.create_view_stmt()
                pass

            elif la_ == 10:
                self.state = 274
                self.create_virtual_table_stmt()
                pass

            elif la_ == 11:
                self.state = 275
                self.delete_stmt()
                pass

            elif la_ == 12:
                self.state = 276
                self.delete_stmt_limited()
                pass

            elif la_ == 13:
                self.state = 277
                self.detach_stmt()
                pass

            elif la_ == 14:
                self.state = 278
                self.drop_stmt()
                pass

            elif la_ == 15:
                self.state = 279
                self.insert_stmt()
                pass

            elif la_ == 16:
                self.state = 280
                self.pragma_stmt()
                pass

            elif la_ == 17:
                self.state = 281
                self.reindex_stmt()
                pass

            elif la_ == 18:
                self.state = 282
                self.release_stmt()
                pass

            elif la_ == 19:
                self.state = 283
                self.rollback_stmt()
                pass

            elif la_ == 20:
                self.state = 284
                self.savepoint_stmt()
                pass

            elif la_ == 21:
                self.state = 285
                self.select_stmt()
                pass

            elif la_ == 22:
                self.state = 286
                self.update_stmt()
                pass

            elif la_ == 23:
                self.state = 287
                self.update_stmt_limited()
                pass

            elif la_ == 24:
                self.state = 288
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.new_table_name = None # Table_nameContext
            self.old_column_name = None # Column_nameContext
            self.new_column_name = None # Column_nameContext

        def ALTER_(self):
            return self.getToken(RSSQLParser.ALTER_, 0)

        def TABLE_(self):
            return self.getToken(RSSQLParser.TABLE_, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Table_nameContext,i)


        def RENAME_(self):
            return self.getToken(RSSQLParser.RENAME_, 0)

        def ADD_(self):
            return self.getToken(RSSQLParser.ADD_, 0)

        def column_def(self):
            return self.getTypedRuleContext(RSSQLParser.Column_defContext,0)


        def DROP_(self):
            return self.getToken(RSSQLParser.DROP_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_nameContext,i)


        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def TO_(self):
            return self.getToken(RSSQLParser.TO_, 0)

        def COLUMN_(self):
            return self.getToken(RSSQLParser.COLUMN_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = RSSQLParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(RSSQLParser.ALTER_)
            self.state = 292
            self.match(RSSQLParser.TABLE_)
            self.state = 296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 293
                self.schema_name()
                self.state = 294
                self.match(RSSQLParser.DOT)


            self.state = 298
            self.table_name()
            self.state = 321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.RENAME_]:
                self.state = 299
                self.match(RSSQLParser.RENAME_)
                self.state = 309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 300
                    self.match(RSSQLParser.TO_)
                    self.state = 301
                    localctx.new_table_name = self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 303
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 302
                        self.match(RSSQLParser.COLUMN_)


                    self.state = 305
                    localctx.old_column_name = self.column_name()
                    self.state = 306
                    self.match(RSSQLParser.TO_)
                    self.state = 307
                    localctx.new_column_name = self.column_name()
                    pass


                pass
            elif token in [RSSQLParser.ADD_]:
                self.state = 311
                self.match(RSSQLParser.ADD_)
                self.state = 313
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 312
                    self.match(RSSQLParser.COLUMN_)


                self.state = 315
                self.column_def()
                pass
            elif token in [RSSQLParser.DROP_]:
                self.state = 316
                self.match(RSSQLParser.DROP_)
                self.state = 318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 317
                    self.match(RSSQLParser.COLUMN_)


                self.state = 320
                self.column_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Analyze_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE_(self):
            return self.getToken(RSSQLParser.ANALYZE_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def table_or_index_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_or_index_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_analyze_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_stmt" ):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_stmt" ):
                listener.exitAnalyze_stmt(self)




    def analyze_stmt(self):

        localctx = RSSQLParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.match(RSSQLParser.ANALYZE_)
            self.state = 331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 324
                self.schema_name()

            elif la_ == 2:
                self.state = 328
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 325
                    self.schema_name()
                    self.state = 326
                    self.match(RSSQLParser.DOT)


                self.state = 330
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attach_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH_(self):
            return self.getToken(RSSQLParser.ATTACH_, 0)

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def AS_(self):
            return self.getToken(RSSQLParser.AS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DATABASE_(self):
            return self.getToken(RSSQLParser.DATABASE_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_attach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttach_stmt" ):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttach_stmt" ):
                listener.exitAttach_stmt(self)




    def attach_stmt(self):

        localctx = RSSQLParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(RSSQLParser.ATTACH_)
            self.state = 335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 334
                self.match(RSSQLParser.DATABASE_)


            self.state = 337
            self.expr(0)
            self.state = 338
            self.match(RSSQLParser.AS_)
            self.state = 339
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Begin_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_(self):
            return self.getToken(RSSQLParser.BEGIN_, 0)

        def TRANSACTION_(self):
            return self.getToken(RSSQLParser.TRANSACTION_, 0)

        def DEFERRED_(self):
            return self.getToken(RSSQLParser.DEFERRED_, 0)

        def IMMEDIATE_(self):
            return self.getToken(RSSQLParser.IMMEDIATE_, 0)

        def EXCLUSIVE_(self):
            return self.getToken(RSSQLParser.EXCLUSIVE_, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(RSSQLParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_begin_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_stmt" ):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_stmt" ):
                listener.exitBegin_stmt(self)




    def begin_stmt(self):

        localctx = RSSQLParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(RSSQLParser.BEGIN_)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (RSSQLParser.DEFERRED_ - 58)) | (1 << (RSSQLParser.EXCLUSIVE_ - 58)) | (1 << (RSSQLParser.IMMEDIATE_ - 58)))) != 0):
                self.state = 342
                _la = self._input.LA(1)
                if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (RSSQLParser.DEFERRED_ - 58)) | (1 << (RSSQLParser.EXCLUSIVE_ - 58)) | (1 << (RSSQLParser.IMMEDIATE_ - 58)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.TRANSACTION_:
                self.state = 345
                self.match(RSSQLParser.TRANSACTION_)
                self.state = 347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 346
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Commit_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT_(self):
            return self.getToken(RSSQLParser.COMMIT_, 0)

        def END_(self):
            return self.getToken(RSSQLParser.END_, 0)

        def TRANSACTION_(self):
            return self.getToken(RSSQLParser.TRANSACTION_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_commit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stmt" ):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stmt" ):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = RSSQLParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            _la = self._input.LA(1)
            if not(_la==RSSQLParser.COMMIT_ or _la==RSSQLParser.END_):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.TRANSACTION_:
                self.state = 352
                self.match(RSSQLParser.TRANSACTION_)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK_(self):
            return self.getToken(RSSQLParser.ROLLBACK_, 0)

        def TRANSACTION_(self):
            return self.getToken(RSSQLParser.TRANSACTION_, 0)

        def TO_(self):
            return self.getToken(RSSQLParser.TO_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(RSSQLParser.Savepoint_nameContext,0)


        def SAVEPOINT_(self):
            return self.getToken(RSSQLParser.SAVEPOINT_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_rollback_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stmt" ):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stmt" ):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = RSSQLParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_rollback_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.match(RSSQLParser.ROLLBACK_)
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.TRANSACTION_:
                self.state = 356
                self.match(RSSQLParser.TRANSACTION_)


            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.TO_:
                self.state = 359
                self.match(RSSQLParser.TO_)
                self.state = 361
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 360
                    self.match(RSSQLParser.SAVEPOINT_)


                self.state = 363
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT_(self):
            return self.getToken(RSSQLParser.SAVEPOINT_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(RSSQLParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_savepoint_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_stmt" ):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_stmt" ):
                listener.exitSavepoint_stmt(self)




    def savepoint_stmt(self):

        localctx = RSSQLParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(RSSQLParser.SAVEPOINT_)
            self.state = 367
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Release_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE_(self):
            return self.getToken(RSSQLParser.RELEASE_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(RSSQLParser.Savepoint_nameContext,0)


        def SAVEPOINT_(self):
            return self.getToken(RSSQLParser.SAVEPOINT_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_release_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelease_stmt" ):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelease_stmt" ):
                listener.exitRelease_stmt(self)




    def release_stmt(self):

        localctx = RSSQLParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(RSSQLParser.RELEASE_)
            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 370
                self.match(RSSQLParser.SAVEPOINT_)


            self.state = 373
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(RSSQLParser.CREATE_, 0)

        def INDEX_(self):
            return self.getToken(RSSQLParser.INDEX_, 0)

        def index_name(self):
            return self.getTypedRuleContext(RSSQLParser.Index_nameContext,0)


        def ON_(self):
            return self.getToken(RSSQLParser.ON_, 0)

        def table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def UNIQUE_(self):
            return self.getToken(RSSQLParser.UNIQUE_, 0)

        def IF_(self):
            return self.getToken(RSSQLParser.IF_, 0)

        def NOT_(self):
            return self.getToken(RSSQLParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(RSSQLParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def WHERE_(self):
            return self.getToken(RSSQLParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)




    def create_index_stmt(self):

        localctx = RSSQLParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(RSSQLParser.CREATE_)
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.UNIQUE_:
                self.state = 376
                self.match(RSSQLParser.UNIQUE_)


            self.state = 379
            self.match(RSSQLParser.INDEX_)
            self.state = 383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 380
                self.match(RSSQLParser.IF_)
                self.state = 381
                self.match(RSSQLParser.NOT_)
                self.state = 382
                self.match(RSSQLParser.EXISTS_)


            self.state = 388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 385
                self.schema_name()
                self.state = 386
                self.match(RSSQLParser.DOT)


            self.state = 390
            self.index_name()
            self.state = 391
            self.match(RSSQLParser.ON_)
            self.state = 392
            self.table_name()
            self.state = 393
            self.match(RSSQLParser.OPEN_PAR)
            self.state = 394
            self.indexed_column()
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.COMMA:
                self.state = 395
                self.match(RSSQLParser.COMMA)
                self.state = 396
                self.indexed_column()
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 402
            self.match(RSSQLParser.CLOSE_PAR)
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WHERE_:
                self.state = 403
                self.match(RSSQLParser.WHERE_)
                self.state = 404
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(RSSQLParser.Column_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def COLLATE_(self):
            return self.getToken(RSSQLParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(RSSQLParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(RSSQLParser.Asc_descContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_indexed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexed_column" ):
                listener.enterIndexed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexed_column" ):
                listener.exitIndexed_column(self)




    def indexed_column(self):

        localctx = RSSQLParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 407
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 408
                self.expr(0)
                pass


            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.COLLATE_:
                self.state = 411
                self.match(RSSQLParser.COLLATE_)
                self.state = 412
                self.collation_name()


            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.ASC_ or _la==RSSQLParser.DESC_:
                self.state = 415
                self.asc_desc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_ROW_ID = None # Token

        def CREATE_(self):
            return self.getToken(RSSQLParser.CREATE_, 0)

        def TABLE_(self):
            return self.getToken(RSSQLParser.TABLE_, 0)

        def table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_defContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_defContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def AS_(self):
            return self.getToken(RSSQLParser.AS_, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Select_stmtContext,0)


        def IF_(self):
            return self.getToken(RSSQLParser.IF_, 0)

        def NOT_(self):
            return self.getToken(RSSQLParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(RSSQLParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def TEMP_(self):
            return self.getToken(RSSQLParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(RSSQLParser.TEMPORARY_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Table_constraintContext,i)


        def WITHOUT_(self):
            return self.getToken(RSSQLParser.WITHOUT_, 0)

        def IDENTIFIER(self):
            return self.getToken(RSSQLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = RSSQLParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(RSSQLParser.CREATE_)
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.TEMP_ or _la==RSSQLParser.TEMPORARY_:
                self.state = 419
                _la = self._input.LA(1)
                if not(_la==RSSQLParser.TEMP_ or _la==RSSQLParser.TEMPORARY_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 422
            self.match(RSSQLParser.TABLE_)
            self.state = 426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 423
                self.match(RSSQLParser.IF_)
                self.state = 424
                self.match(RSSQLParser.NOT_)
                self.state = 425
                self.match(RSSQLParser.EXISTS_)


            self.state = 431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 428
                self.schema_name()
                self.state = 429
                self.match(RSSQLParser.DOT)


            self.state = 433
            self.table_name()
            self.state = 457
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.OPEN_PAR]:
                self.state = 434
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 435
                self.column_def()
                self.state = 440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 436
                        self.match(RSSQLParser.COMMA)
                        self.state = 437
                        self.column_def() 
                    self.state = 442
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 443
                    self.match(RSSQLParser.COMMA)
                    self.state = 444
                    self.table_constraint()
                    self.state = 449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 450
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.WITHOUT_:
                    self.state = 451
                    self.match(RSSQLParser.WITHOUT_)
                    self.state = 452
                    localctx.row_ROW_ID = self.match(RSSQLParser.IDENTIFIER)


                pass
            elif token in [RSSQLParser.AS_]:
                self.state = 455
                self.match(RSSQLParser.AS_)
                self.state = 456
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(RSSQLParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(RSSQLParser.Type_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return RSSQLParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = RSSQLParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.column_name()
            self.state = 461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 460
                self.type_name()


            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << RSSQLParser.AS_) | (1 << RSSQLParser.CHECK_) | (1 << RSSQLParser.COLLATE_) | (1 << RSSQLParser.CONSTRAINT_) | (1 << RSSQLParser.DEFAULT_))) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (RSSQLParser.NOT_ - 102)) | (1 << (RSSQLParser.NULL_ - 102)) | (1 << (RSSQLParser.PRIMARY_ - 102)) | (1 << (RSSQLParser.REFERENCES_ - 102)) | (1 << (RSSQLParser.UNIQUE_ - 102)))) != 0) or _la==RSSQLParser.GENERATED_:
                self.state = 463
                self.column_constraint()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.NameContext,i)


        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(RSSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = RSSQLParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 469
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 472 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 474
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 475
                self.signed_number()
                self.state = 476
                self.match(RSSQLParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 478
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 479
                self.signed_number()
                self.state = 480
                self.match(RSSQLParser.COMMA)
                self.state = 481
                self.signed_number()
                self.state = 482
                self.match(RSSQLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK_(self):
            return self.getToken(RSSQLParser.CHECK_, 0)

        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def DEFAULT_(self):
            return self.getToken(RSSQLParser.DEFAULT_, 0)

        def COLLATE_(self):
            return self.getToken(RSSQLParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(RSSQLParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Foreign_key_clauseContext,0)


        def AS_(self):
            return self.getToken(RSSQLParser.AS_, 0)

        def CONSTRAINT_(self):
            return self.getToken(RSSQLParser.CONSTRAINT_, 0)

        def name(self):
            return self.getTypedRuleContext(RSSQLParser.NameContext,0)


        def PRIMARY_(self):
            return self.getToken(RSSQLParser.PRIMARY_, 0)

        def KEY_(self):
            return self.getToken(RSSQLParser.KEY_, 0)

        def NULL_(self):
            return self.getToken(RSSQLParser.NULL_, 0)

        def UNIQUE_(self):
            return self.getToken(RSSQLParser.UNIQUE_, 0)

        def signed_number(self):
            return self.getTypedRuleContext(RSSQLParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(RSSQLParser.Literal_valueContext,0)


        def conflict_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Conflict_clauseContext,0)


        def GENERATED_(self):
            return self.getToken(RSSQLParser.GENERATED_, 0)

        def ALWAYS_(self):
            return self.getToken(RSSQLParser.ALWAYS_, 0)

        def STORED_(self):
            return self.getToken(RSSQLParser.STORED_, 0)

        def VIRTUAL_(self):
            return self.getToken(RSSQLParser.VIRTUAL_, 0)

        def asc_desc(self):
            return self.getTypedRuleContext(RSSQLParser.Asc_descContext,0)


        def AUTOINCREMENT_(self):
            return self.getToken(RSSQLParser.AUTOINCREMENT_, 0)

        def NOT_(self):
            return self.getToken(RSSQLParser.NOT_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = RSSQLParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.CONSTRAINT_:
                self.state = 486
                self.match(RSSQLParser.CONSTRAINT_)
                self.state = 487
                self.name()


            self.state = 539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.PRIMARY_]:
                self.state = 490
                self.match(RSSQLParser.PRIMARY_)
                self.state = 491
                self.match(RSSQLParser.KEY_)
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.ASC_ or _la==RSSQLParser.DESC_:
                    self.state = 492
                    self.asc_desc()


                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.ON_:
                    self.state = 495
                    self.conflict_clause()


                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.AUTOINCREMENT_:
                    self.state = 498
                    self.match(RSSQLParser.AUTOINCREMENT_)


                pass
            elif token in [RSSQLParser.NOT_, RSSQLParser.NULL_, RSSQLParser.UNIQUE_]:
                self.state = 506
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [RSSQLParser.NOT_, RSSQLParser.NULL_]:
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==RSSQLParser.NOT_:
                        self.state = 501
                        self.match(RSSQLParser.NOT_)


                    self.state = 504
                    self.match(RSSQLParser.NULL_)
                    pass
                elif token in [RSSQLParser.UNIQUE_]:
                    self.state = 505
                    self.match(RSSQLParser.UNIQUE_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.ON_:
                    self.state = 508
                    self.conflict_clause()


                pass
            elif token in [RSSQLParser.CHECK_]:
                self.state = 511
                self.match(RSSQLParser.CHECK_)
                self.state = 512
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 513
                self.expr(0)
                self.state = 514
                self.match(RSSQLParser.CLOSE_PAR)
                pass
            elif token in [RSSQLParser.DEFAULT_]:
                self.state = 516
                self.match(RSSQLParser.DEFAULT_)
                self.state = 523
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 517
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 518
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 519
                    self.match(RSSQLParser.OPEN_PAR)
                    self.state = 520
                    self.expr(0)
                    self.state = 521
                    self.match(RSSQLParser.CLOSE_PAR)
                    pass


                pass
            elif token in [RSSQLParser.COLLATE_]:
                self.state = 525
                self.match(RSSQLParser.COLLATE_)
                self.state = 526
                self.collation_name()
                pass
            elif token in [RSSQLParser.REFERENCES_]:
                self.state = 527
                self.foreign_key_clause()
                pass
            elif token in [RSSQLParser.AS_, RSSQLParser.GENERATED_]:
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.GENERATED_:
                    self.state = 528
                    self.match(RSSQLParser.GENERATED_)
                    self.state = 529
                    self.match(RSSQLParser.ALWAYS_)


                self.state = 532
                self.match(RSSQLParser.AS_)
                self.state = 533
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 534
                self.expr(0)
                self.state = 535
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.VIRTUAL_ or _la==RSSQLParser.STORED_:
                    self.state = 536
                    _la = self._input.LA(1)
                    if not(_la==RSSQLParser.VIRTUAL_ or _la==RSSQLParser.STORED_):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(RSSQLParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(RSSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(RSSQLParser.MINUS, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = RSSQLParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.PLUS or _la==RSSQLParser.MINUS:
                self.state = 541
                _la = self._input.LA(1)
                if not(_la==RSSQLParser.PLUS or _la==RSSQLParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 544
            self.match(RSSQLParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def CHECK_(self):
            return self.getToken(RSSQLParser.CHECK_, 0)

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def FOREIGN_(self):
            return self.getToken(RSSQLParser.FOREIGN_, 0)

        def KEY_(self):
            return self.getToken(RSSQLParser.KEY_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Foreign_key_clauseContext,0)


        def CONSTRAINT_(self):
            return self.getToken(RSSQLParser.CONSTRAINT_, 0)

        def name(self):
            return self.getTypedRuleContext(RSSQLParser.NameContext,0)


        def PRIMARY_(self):
            return self.getToken(RSSQLParser.PRIMARY_, 0)

        def UNIQUE_(self):
            return self.getToken(RSSQLParser.UNIQUE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def conflict_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Conflict_clauseContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = RSSQLParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.CONSTRAINT_:
                self.state = 546
                self.match(RSSQLParser.CONSTRAINT_)
                self.state = 547
                self.name()


            self.state = 587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.PRIMARY_, RSSQLParser.UNIQUE_]:
                self.state = 553
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [RSSQLParser.PRIMARY_]:
                    self.state = 550
                    self.match(RSSQLParser.PRIMARY_)
                    self.state = 551
                    self.match(RSSQLParser.KEY_)
                    pass
                elif token in [RSSQLParser.UNIQUE_]:
                    self.state = 552
                    self.match(RSSQLParser.UNIQUE_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 555
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 556
                self.indexed_column()
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 557
                    self.match(RSSQLParser.COMMA)
                    self.state = 558
                    self.indexed_column()
                    self.state = 563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 564
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.ON_:
                    self.state = 565
                    self.conflict_clause()


                pass
            elif token in [RSSQLParser.CHECK_]:
                self.state = 568
                self.match(RSSQLParser.CHECK_)
                self.state = 569
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 570
                self.expr(0)
                self.state = 571
                self.match(RSSQLParser.CLOSE_PAR)
                pass
            elif token in [RSSQLParser.FOREIGN_]:
                self.state = 573
                self.match(RSSQLParser.FOREIGN_)
                self.state = 574
                self.match(RSSQLParser.KEY_)
                self.state = 575
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 576
                self.column_name()
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 577
                    self.match(RSSQLParser.COMMA)
                    self.state = 578
                    self.column_name()
                    self.state = 583
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 584
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 585
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCES_(self):
            return self.getToken(RSSQLParser.REFERENCES_, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(RSSQLParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def ON_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.ON_)
            else:
                return self.getToken(RSSQLParser.ON_, i)

        def MATCH_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.MATCH_)
            else:
                return self.getToken(RSSQLParser.MATCH_, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.NameContext,i)


        def DEFERRABLE_(self):
            return self.getToken(RSSQLParser.DEFERRABLE_, 0)

        def DELETE_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.DELETE_)
            else:
                return self.getToken(RSSQLParser.DELETE_, i)

        def UPDATE_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.UPDATE_)
            else:
                return self.getToken(RSSQLParser.UPDATE_, i)

        def SET_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.SET_)
            else:
                return self.getToken(RSSQLParser.SET_, i)

        def CASCADE_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.CASCADE_)
            else:
                return self.getToken(RSSQLParser.CASCADE_, i)

        def RESTRICT_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.RESTRICT_)
            else:
                return self.getToken(RSSQLParser.RESTRICT_, i)

        def NO_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.NO_)
            else:
                return self.getToken(RSSQLParser.NO_, i)

        def ACTION_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.ACTION_)
            else:
                return self.getToken(RSSQLParser.ACTION_, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.NULL_)
            else:
                return self.getToken(RSSQLParser.NULL_, i)

        def DEFAULT_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.DEFAULT_)
            else:
                return self.getToken(RSSQLParser.DEFAULT_, i)

        def NOT_(self):
            return self.getToken(RSSQLParser.NOT_, 0)

        def INITIALLY_(self):
            return self.getToken(RSSQLParser.INITIALLY_, 0)

        def DEFERRED_(self):
            return self.getToken(RSSQLParser.DEFERRED_, 0)

        def IMMEDIATE_(self):
            return self.getToken(RSSQLParser.IMMEDIATE_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = RSSQLParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(RSSQLParser.REFERENCES_)
            self.state = 590
            self.foreign_table()
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.OPEN_PAR:
                self.state = 591
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 592
                self.column_name()
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 593
                    self.match(RSSQLParser.COMMA)
                    self.state = 594
                    self.column_name()
                    self.state = 599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 600
                self.match(RSSQLParser.CLOSE_PAR)


            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.MATCH_ or _la==RSSQLParser.ON_:
                self.state = 616
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [RSSQLParser.ON_]:
                    self.state = 604
                    self.match(RSSQLParser.ON_)
                    self.state = 605
                    _la = self._input.LA(1)
                    if not(_la==RSSQLParser.DELETE_ or _la==RSSQLParser.UPDATE_):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 612
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [RSSQLParser.SET_]:
                        self.state = 606
                        self.match(RSSQLParser.SET_)
                        self.state = 607
                        _la = self._input.LA(1)
                        if not(_la==RSSQLParser.DEFAULT_ or _la==RSSQLParser.NULL_):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [RSSQLParser.CASCADE_]:
                        self.state = 608
                        self.match(RSSQLParser.CASCADE_)
                        pass
                    elif token in [RSSQLParser.RESTRICT_]:
                        self.state = 609
                        self.match(RSSQLParser.RESTRICT_)
                        pass
                    elif token in [RSSQLParser.NO_]:
                        self.state = 610
                        self.match(RSSQLParser.NO_)
                        self.state = 611
                        self.match(RSSQLParser.ACTION_)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [RSSQLParser.MATCH_]:
                    self.state = 614
                    self.match(RSSQLParser.MATCH_)
                    self.state = 615
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.NOT_:
                    self.state = 621
                    self.match(RSSQLParser.NOT_)


                self.state = 624
                self.match(RSSQLParser.DEFERRABLE_)
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.INITIALLY_:
                    self.state = 625
                    self.match(RSSQLParser.INITIALLY_)
                    self.state = 626
                    _la = self._input.LA(1)
                    if not(_la==RSSQLParser.DEFERRED_ or _la==RSSQLParser.IMMEDIATE_):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conflict_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(RSSQLParser.ON_, 0)

        def CONFLICT_(self):
            return self.getToken(RSSQLParser.CONFLICT_, 0)

        def ROLLBACK_(self):
            return self.getToken(RSSQLParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(RSSQLParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(RSSQLParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(RSSQLParser.IGNORE_, 0)

        def REPLACE_(self):
            return self.getToken(RSSQLParser.REPLACE_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_conflict_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflict_clause" ):
                listener.enterConflict_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflict_clause" ):
                listener.exitConflict_clause(self)




    def conflict_clause(self):

        localctx = RSSQLParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(RSSQLParser.ON_)
            self.state = 632
            self.match(RSSQLParser.CONFLICT_)
            self.state = 633
            _la = self._input.LA(1)
            if not(_la==RSSQLParser.ABORT_ or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (RSSQLParser.FAIL_ - 72)) | (1 << (RSSQLParser.IGNORE_ - 72)) | (1 << (RSSQLParser.REPLACE_ - 72)) | (1 << (RSSQLParser.ROLLBACK_ - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_trigger_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(RSSQLParser.CREATE_, 0)

        def TRIGGER_(self):
            return self.getToken(RSSQLParser.TRIGGER_, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(RSSQLParser.Trigger_nameContext,0)


        def ON_(self):
            return self.getToken(RSSQLParser.ON_, 0)

        def table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_nameContext,0)


        def BEGIN_(self):
            return self.getToken(RSSQLParser.BEGIN_, 0)

        def END_(self):
            return self.getToken(RSSQLParser.END_, 0)

        def DELETE_(self):
            return self.getToken(RSSQLParser.DELETE_, 0)

        def INSERT_(self):
            return self.getToken(RSSQLParser.INSERT_, 0)

        def UPDATE_(self):
            return self.getToken(RSSQLParser.UPDATE_, 0)

        def IF_(self):
            return self.getToken(RSSQLParser.IF_, 0)

        def NOT_(self):
            return self.getToken(RSSQLParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(RSSQLParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def BEFORE_(self):
            return self.getToken(RSSQLParser.BEFORE_, 0)

        def AFTER_(self):
            return self.getToken(RSSQLParser.AFTER_, 0)

        def INSTEAD_(self):
            return self.getToken(RSSQLParser.INSTEAD_, 0)

        def OF_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.OF_)
            else:
                return self.getToken(RSSQLParser.OF_, i)

        def FOR_(self):
            return self.getToken(RSSQLParser.FOR_, 0)

        def EACH_(self):
            return self.getToken(RSSQLParser.EACH_, 0)

        def ROW_(self):
            return self.getToken(RSSQLParser.ROW_, 0)

        def WHEN_(self):
            return self.getToken(RSSQLParser.WHEN_, 0)

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.SCOL)
            else:
                return self.getToken(RSSQLParser.SCOL, i)

        def TEMP_(self):
            return self.getToken(RSSQLParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(RSSQLParser.TEMPORARY_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_nameContext,i)


        def update_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Update_stmtContext,i)


        def insert_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Insert_stmtContext,i)


        def delete_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Delete_stmtContext,i)


        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Select_stmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_create_trigger_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger_stmt" ):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger_stmt" ):
                listener.exitCreate_trigger_stmt(self)




    def create_trigger_stmt(self):

        localctx = RSSQLParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_create_trigger_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.match(RSSQLParser.CREATE_)
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.TEMP_ or _la==RSSQLParser.TEMPORARY_:
                self.state = 636
                _la = self._input.LA(1)
                if not(_la==RSSQLParser.TEMP_ or _la==RSSQLParser.TEMPORARY_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 639
            self.match(RSSQLParser.TRIGGER_)
            self.state = 643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 640
                self.match(RSSQLParser.IF_)
                self.state = 641
                self.match(RSSQLParser.NOT_)
                self.state = 642
                self.match(RSSQLParser.EXISTS_)


            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 645
                self.schema_name()
                self.state = 646
                self.match(RSSQLParser.DOT)


            self.state = 650
            self.trigger_name()
            self.state = 655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.BEFORE_]:
                self.state = 651
                self.match(RSSQLParser.BEFORE_)
                pass
            elif token in [RSSQLParser.AFTER_]:
                self.state = 652
                self.match(RSSQLParser.AFTER_)
                pass
            elif token in [RSSQLParser.INSTEAD_]:
                self.state = 653
                self.match(RSSQLParser.INSTEAD_)
                self.state = 654
                self.match(RSSQLParser.OF_)
                pass
            elif token in [RSSQLParser.DELETE_, RSSQLParser.INSERT_, RSSQLParser.UPDATE_]:
                pass
            else:
                pass
            self.state = 671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.DELETE_]:
                self.state = 657
                self.match(RSSQLParser.DELETE_)
                pass
            elif token in [RSSQLParser.INSERT_]:
                self.state = 658
                self.match(RSSQLParser.INSERT_)
                pass
            elif token in [RSSQLParser.UPDATE_]:
                self.state = 659
                self.match(RSSQLParser.UPDATE_)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.OF_:
                    self.state = 660
                    self.match(RSSQLParser.OF_)
                    self.state = 661
                    self.column_name()
                    self.state = 666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==RSSQLParser.COMMA:
                        self.state = 662
                        self.match(RSSQLParser.COMMA)
                        self.state = 663
                        self.column_name()
                        self.state = 668
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

            self.state = 673
            self.match(RSSQLParser.ON_)
            self.state = 674
            self.table_name()
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.FOR_:
                self.state = 675
                self.match(RSSQLParser.FOR_)
                self.state = 676
                self.match(RSSQLParser.EACH_)
                self.state = 677
                self.match(RSSQLParser.ROW_)


            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WHEN_:
                self.state = 680
                self.match(RSSQLParser.WHEN_)
                self.state = 681
                self.expr(0)


            self.state = 684
            self.match(RSSQLParser.BEGIN_)
            self.state = 693 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 685
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 686
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 687
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 688
                    self.select_stmt()
                    pass


                self.state = 691
                self.match(RSSQLParser.SCOL)
                self.state = 695 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==RSSQLParser.DELETE_ or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (RSSQLParser.INSERT_ - 88)) | (1 << (RSSQLParser.REPLACE_ - 88)) | (1 << (RSSQLParser.SELECT_ - 88)) | (1 << (RSSQLParser.UPDATE_ - 88)) | (1 << (RSSQLParser.VALUES_ - 88)) | (1 << (RSSQLParser.WITH_ - 88)))) != 0)):
                    break

            self.state = 697
            self.match(RSSQLParser.END_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_view_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(RSSQLParser.CREATE_, 0)

        def VIEW_(self):
            return self.getToken(RSSQLParser.VIEW_, 0)

        def view_name(self):
            return self.getTypedRuleContext(RSSQLParser.View_nameContext,0)


        def AS_(self):
            return self.getToken(RSSQLParser.AS_, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Select_stmtContext,0)


        def IF_(self):
            return self.getToken(RSSQLParser.IF_, 0)

        def NOT_(self):
            return self.getToken(RSSQLParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(RSSQLParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def TEMP_(self):
            return self.getToken(RSSQLParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(RSSQLParser.TEMPORARY_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_create_view_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view_stmt" ):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view_stmt" ):
                listener.exitCreate_view_stmt(self)




    def create_view_stmt(self):

        localctx = RSSQLParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(RSSQLParser.CREATE_)
            self.state = 701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.TEMP_ or _la==RSSQLParser.TEMPORARY_:
                self.state = 700
                _la = self._input.LA(1)
                if not(_la==RSSQLParser.TEMP_ or _la==RSSQLParser.TEMPORARY_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 703
            self.match(RSSQLParser.VIEW_)
            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 704
                self.match(RSSQLParser.IF_)
                self.state = 705
                self.match(RSSQLParser.NOT_)
                self.state = 706
                self.match(RSSQLParser.EXISTS_)


            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 709
                self.schema_name()
                self.state = 710
                self.match(RSSQLParser.DOT)


            self.state = 714
            self.view_name()
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.OPEN_PAR:
                self.state = 715
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 716
                self.column_name()
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 717
                    self.match(RSSQLParser.COMMA)
                    self.state = 718
                    self.column_name()
                    self.state = 723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 724
                self.match(RSSQLParser.CLOSE_PAR)


            self.state = 728
            self.match(RSSQLParser.AS_)
            self.state = 729
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_virtual_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(RSSQLParser.CREATE_, 0)

        def VIRTUAL_(self):
            return self.getToken(RSSQLParser.VIRTUAL_, 0)

        def TABLE_(self):
            return self.getToken(RSSQLParser.TABLE_, 0)

        def table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_nameContext,0)


        def USING_(self):
            return self.getToken(RSSQLParser.USING_, 0)

        def module_name(self):
            return self.getTypedRuleContext(RSSQLParser.Module_nameContext,0)


        def IF_(self):
            return self.getToken(RSSQLParser.IF_, 0)

        def NOT_(self):
            return self.getToken(RSSQLParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(RSSQLParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def module_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Module_argumentContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_virtual_table_stmt" ):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_virtual_table_stmt" ):
                listener.exitCreate_virtual_table_stmt(self)




    def create_virtual_table_stmt(self):

        localctx = RSSQLParser.Create_virtual_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_create_virtual_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(RSSQLParser.CREATE_)
            self.state = 732
            self.match(RSSQLParser.VIRTUAL_)
            self.state = 733
            self.match(RSSQLParser.TABLE_)
            self.state = 737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 734
                self.match(RSSQLParser.IF_)
                self.state = 735
                self.match(RSSQLParser.NOT_)
                self.state = 736
                self.match(RSSQLParser.EXISTS_)


            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 739
                self.schema_name()
                self.state = 740
                self.match(RSSQLParser.DOT)


            self.state = 744
            self.table_name()
            self.state = 745
            self.match(RSSQLParser.USING_)
            self.state = 746
            self.module_name()
            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.OPEN_PAR:
                self.state = 747
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 748
                self.module_argument()
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 749
                    self.match(RSSQLParser.COMMA)
                    self.state = 750
                    self.module_argument()
                    self.state = 755
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 756
                self.match(RSSQLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(RSSQLParser.WITH_, 0)

        def cte_table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Cte_table_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Cte_table_nameContext,i)


        def AS_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.AS_)
            else:
                return self.getToken(RSSQLParser.AS_, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.OPEN_PAR)
            else:
                return self.getToken(RSSQLParser.OPEN_PAR, i)

        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Select_stmtContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.CLOSE_PAR)
            else:
                return self.getToken(RSSQLParser.CLOSE_PAR, i)

        def RECURSIVE_(self):
            return self.getToken(RSSQLParser.RECURSIVE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = RSSQLParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(RSSQLParser.WITH_)
            self.state = 762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 761
                self.match(RSSQLParser.RECURSIVE_)


            self.state = 764
            self.cte_table_name()
            self.state = 765
            self.match(RSSQLParser.AS_)
            self.state = 766
            self.match(RSSQLParser.OPEN_PAR)
            self.state = 767
            self.select_stmt()
            self.state = 768
            self.match(RSSQLParser.CLOSE_PAR)
            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.COMMA:
                self.state = 769
                self.match(RSSQLParser.COMMA)
                self.state = 770
                self.cte_table_name()
                self.state = 771
                self.match(RSSQLParser.AS_)
                self.state = 772
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 773
                self.select_stmt()
                self.state = 774
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cte_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_cte_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_table_name" ):
                listener.enterCte_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_table_name" ):
                listener.exitCte_table_name(self)




    def cte_table_name(self):

        localctx = RSSQLParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_cte_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.table_name()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.OPEN_PAR:
                self.state = 782
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 783
                self.column_name()
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 784
                    self.match(RSSQLParser.COMMA)
                    self.state = 785
                    self.column_name()
                    self.state = 790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 791
                self.match(RSSQLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Recursive_cteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cte_table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Cte_table_nameContext,0)


        def AS_(self):
            return self.getToken(RSSQLParser.AS_, 0)

        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def initial_select(self):
            return self.getTypedRuleContext(RSSQLParser.Initial_selectContext,0)


        def UNION_(self):
            return self.getToken(RSSQLParser.UNION_, 0)

        def recursive_select(self):
            return self.getTypedRuleContext(RSSQLParser.Recursive_selectContext,0)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def ALL_(self):
            return self.getToken(RSSQLParser.ALL_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_recursive_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte" ):
                listener.enterRecursive_cte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte" ):
                listener.exitRecursive_cte(self)




    def recursive_cte(self):

        localctx = RSSQLParser.Recursive_cteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_recursive_cte)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.cte_table_name()
            self.state = 796
            self.match(RSSQLParser.AS_)
            self.state = 797
            self.match(RSSQLParser.OPEN_PAR)
            self.state = 798
            self.initial_select()
            self.state = 799
            self.match(RSSQLParser.UNION_)
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.ALL_:
                self.state = 800
                self.match(RSSQLParser.ALL_)


            self.state = 803
            self.recursive_select()
            self.state = 804
            self.match(RSSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_nameContext,0)


        def AS_(self):
            return self.getToken(RSSQLParser.AS_, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.OPEN_PAR)
            else:
                return self.getToken(RSSQLParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.CLOSE_PAR)
            else:
                return self.getToken(RSSQLParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = RSSQLParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.table_name()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.OPEN_PAR:
                self.state = 807
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 808
                self.column_name()
                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 809
                    self.match(RSSQLParser.COMMA)
                    self.state = 810
                    self.column_name()
                    self.state = 815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 816
                self.match(RSSQLParser.CLOSE_PAR)


            self.state = 820
            self.match(RSSQLParser.AS_)
            self.state = 821
            self.match(RSSQLParser.OPEN_PAR)
            self.state = 822
            self.select_stmt()
            self.state = 823
            self.match(RSSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_(self):
            return self.getToken(RSSQLParser.DELETE_, 0)

        def FROM_(self):
            return self.getToken(RSSQLParser.FROM_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(RSSQLParser.With_clauseContext,0)


        def WHERE_(self):
            return self.getToken(RSSQLParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Returning_clauseContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = RSSQLParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WITH_:
                self.state = 825
                self.with_clause()


            self.state = 828
            self.match(RSSQLParser.DELETE_)
            self.state = 829
            self.match(RSSQLParser.FROM_)
            self.state = 830
            self.qualified_table_name()
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WHERE_:
                self.state = 831
                self.match(RSSQLParser.WHERE_)
                self.state = 832
                self.expr(0)


            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.RETURNING_:
                self.state = 835
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_(self):
            return self.getToken(RSSQLParser.DELETE_, 0)

        def FROM_(self):
            return self.getToken(RSSQLParser.FROM_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(RSSQLParser.With_clauseContext,0)


        def WHERE_(self):
            return self.getToken(RSSQLParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Returning_clauseContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Limit_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_delete_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt_limited" ):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt_limited" ):
                listener.exitDelete_stmt_limited(self)




    def delete_stmt_limited(self):

        localctx = RSSQLParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WITH_:
                self.state = 838
                self.with_clause()


            self.state = 841
            self.match(RSSQLParser.DELETE_)
            self.state = 842
            self.match(RSSQLParser.FROM_)
            self.state = 843
            self.qualified_table_name()
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WHERE_:
                self.state = 844
                self.match(RSSQLParser.WHERE_)
                self.state = 845
                self.expr(0)


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.RETURNING_:
                self.state = 848
                self.returning_clause()


            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.LIMIT_ or _la==RSSQLParser.ORDER_:
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.ORDER_:
                    self.state = 851
                    self.order_by_stmt()


                self.state = 854
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Detach_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETACH_(self):
            return self.getToken(RSSQLParser.DETACH_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DATABASE_(self):
            return self.getToken(RSSQLParser.DATABASE_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_detach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetach_stmt" ):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetach_stmt" ):
                listener.exitDetach_stmt(self)




    def detach_stmt(self):

        localctx = RSSQLParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(RSSQLParser.DETACH_)
            self.state = 859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 858
                self.match(RSSQLParser.DATABASE_)


            self.state = 861
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.object = None # Token

        def DROP_(self):
            return self.getToken(RSSQLParser.DROP_, 0)

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def INDEX_(self):
            return self.getToken(RSSQLParser.INDEX_, 0)

        def TABLE_(self):
            return self.getToken(RSSQLParser.TABLE_, 0)

        def TRIGGER_(self):
            return self.getToken(RSSQLParser.TRIGGER_, 0)

        def VIEW_(self):
            return self.getToken(RSSQLParser.VIEW_, 0)

        def IF_(self):
            return self.getToken(RSSQLParser.IF_, 0)

        def EXISTS_(self):
            return self.getToken(RSSQLParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_drop_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stmt" ):
                listener.enterDrop_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stmt" ):
                listener.exitDrop_stmt(self)




    def drop_stmt(self):

        localctx = RSSQLParser.Drop_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_drop_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(RSSQLParser.DROP_)
            self.state = 864
            localctx.object = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (RSSQLParser.INDEX_ - 84)) | (1 << (RSSQLParser.TABLE_ - 84)) | (1 << (RSSQLParser.TRIGGER_ - 84)) | (1 << (RSSQLParser.VIEW_ - 84)))) != 0)):
                localctx.object = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 865
                self.match(RSSQLParser.IF_)
                self.state = 866
                self.match(RSSQLParser.EXISTS_)


            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 869
                self.schema_name()
                self.state = 870
                self.match(RSSQLParser.DOT)


            self.state = 874
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(RSSQLParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(RSSQLParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(RSSQLParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.DOT)
            else:
                return self.getToken(RSSQLParser.DOT, i)

        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(RSSQLParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def function_name(self):
            return self.getTypedRuleContext(RSSQLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(RSSQLParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Filter_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Over_clauseContext,0)


        def DISTINCT_(self):
            return self.getToken(RSSQLParser.DISTINCT_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def CAST_(self):
            return self.getToken(RSSQLParser.CAST_, 0)

        def AS_(self):
            return self.getToken(RSSQLParser.AS_, 0)

        def type_name(self):
            return self.getTypedRuleContext(RSSQLParser.Type_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Select_stmtContext,0)


        def EXISTS_(self):
            return self.getToken(RSSQLParser.EXISTS_, 0)

        def NOT_(self):
            return self.getToken(RSSQLParser.NOT_, 0)

        def CASE_(self):
            return self.getToken(RSSQLParser.CASE_, 0)

        def END_(self):
            return self.getToken(RSSQLParser.END_, 0)

        def WHEN_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.WHEN_)
            else:
                return self.getToken(RSSQLParser.WHEN_, i)

        def THEN_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.THEN_)
            else:
                return self.getToken(RSSQLParser.THEN_, i)

        def ELSE_(self):
            return self.getToken(RSSQLParser.ELSE_, 0)

        def raise_function(self):
            return self.getTypedRuleContext(RSSQLParser.Raise_functionContext,0)


        def PIPE2(self):
            return self.getToken(RSSQLParser.PIPE2, 0)

        def DIV(self):
            return self.getToken(RSSQLParser.DIV, 0)

        def MOD(self):
            return self.getToken(RSSQLParser.MOD, 0)

        def PLUS(self):
            return self.getToken(RSSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(RSSQLParser.MINUS, 0)

        def LT2(self):
            return self.getToken(RSSQLParser.LT2, 0)

        def GT2(self):
            return self.getToken(RSSQLParser.GT2, 0)

        def AMP(self):
            return self.getToken(RSSQLParser.AMP, 0)

        def PIPE(self):
            return self.getToken(RSSQLParser.PIPE, 0)

        def LT(self):
            return self.getToken(RSSQLParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(RSSQLParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(RSSQLParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(RSSQLParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(RSSQLParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(RSSQLParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(RSSQLParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(RSSQLParser.NOT_EQ2, 0)

        def IS_(self):
            return self.getToken(RSSQLParser.IS_, 0)

        def IN_(self):
            return self.getToken(RSSQLParser.IN_, 0)

        def LIKE_(self):
            return self.getToken(RSSQLParser.LIKE_, 0)

        def GLOB_(self):
            return self.getToken(RSSQLParser.GLOB_, 0)

        def MATCH_(self):
            return self.getToken(RSSQLParser.MATCH_, 0)

        def REGEXP_(self):
            return self.getToken(RSSQLParser.REGEXP_, 0)

        def AND_(self):
            return self.getToken(RSSQLParser.AND_, 0)

        def OR_(self):
            return self.getToken(RSSQLParser.OR_, 0)

        def BETWEEN_(self):
            return self.getToken(RSSQLParser.BETWEEN_, 0)

        def COLLATE_(self):
            return self.getToken(RSSQLParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(RSSQLParser.Collation_nameContext,0)


        def ESCAPE_(self):
            return self.getToken(RSSQLParser.ESCAPE_, 0)

        def ISNULL_(self):
            return self.getToken(RSSQLParser.ISNULL_, 0)

        def NOTNULL_(self):
            return self.getToken(RSSQLParser.NOTNULL_, 0)

        def NULL_(self):
            return self.getToken(RSSQLParser.NULL_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_function_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RSSQLParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 877
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 878
                self.match(RSSQLParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 887
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 882
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                    if la_ == 1:
                        self.state = 879
                        self.schema_name()
                        self.state = 880
                        self.match(RSSQLParser.DOT)


                    self.state = 884
                    self.table_name()
                    self.state = 885
                    self.match(RSSQLParser.DOT)


                self.state = 889
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 890
                self.unary_operator()
                self.state = 891
                self.expr(21)
                pass

            elif la_ == 5:
                self.state = 893
                self.function_name()
                self.state = 894
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 907
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [RSSQLParser.OPEN_PAR, RSSQLParser.PLUS, RSSQLParser.MINUS, RSSQLParser.TILDE, RSSQLParser.ABORT_, RSSQLParser.ACTION_, RSSQLParser.ADD_, RSSQLParser.AFTER_, RSSQLParser.ALL_, RSSQLParser.ALTER_, RSSQLParser.ANALYZE_, RSSQLParser.AND_, RSSQLParser.AS_, RSSQLParser.ASC_, RSSQLParser.ATTACH_, RSSQLParser.AUTOINCREMENT_, RSSQLParser.BEFORE_, RSSQLParser.BEGIN_, RSSQLParser.BETWEEN_, RSSQLParser.BY_, RSSQLParser.CASCADE_, RSSQLParser.CASE_, RSSQLParser.CAST_, RSSQLParser.CHECK_, RSSQLParser.COLLATE_, RSSQLParser.COLUMN_, RSSQLParser.COMMIT_, RSSQLParser.CONFLICT_, RSSQLParser.CONSTRAINT_, RSSQLParser.CREATE_, RSSQLParser.CROSS_, RSSQLParser.CURRENT_DATE_, RSSQLParser.CURRENT_TIME_, RSSQLParser.CURRENT_TIMESTAMP_, RSSQLParser.DATABASE_, RSSQLParser.DEFAULT_, RSSQLParser.DEFERRABLE_, RSSQLParser.DEFERRED_, RSSQLParser.DELETE_, RSSQLParser.DESC_, RSSQLParser.DETACH_, RSSQLParser.DISTINCT_, RSSQLParser.DROP_, RSSQLParser.EACH_, RSSQLParser.ELSE_, RSSQLParser.END_, RSSQLParser.ESCAPE_, RSSQLParser.EXCEPT_, RSSQLParser.EXCLUSIVE_, RSSQLParser.EXISTS_, RSSQLParser.EXPLAIN_, RSSQLParser.FAIL_, RSSQLParser.FOR_, RSSQLParser.FOREIGN_, RSSQLParser.FROM_, RSSQLParser.FULL_, RSSQLParser.GLOB_, RSSQLParser.GROUP_, RSSQLParser.HAVING_, RSSQLParser.IF_, RSSQLParser.IGNORE_, RSSQLParser.IMMEDIATE_, RSSQLParser.IN_, RSSQLParser.INDEX_, RSSQLParser.INDEXED_, RSSQLParser.INITIALLY_, RSSQLParser.INNER_, RSSQLParser.INSERT_, RSSQLParser.INSTEAD_, RSSQLParser.INTERSECT_, RSSQLParser.INTO_, RSSQLParser.IS_, RSSQLParser.ISNULL_, RSSQLParser.JOIN_, RSSQLParser.KEY_, RSSQLParser.LEFT_, RSSQLParser.LIKE_, RSSQLParser.LIMIT_, RSSQLParser.MATCH_, RSSQLParser.NATURAL_, RSSQLParser.NO_, RSSQLParser.NOT_, RSSQLParser.NOTNULL_, RSSQLParser.NULL_, RSSQLParser.OF_, RSSQLParser.OFFSET_, RSSQLParser.ON_, RSSQLParser.OR_, RSSQLParser.ORDER_, RSSQLParser.OUTER_, RSSQLParser.PLAN_, RSSQLParser.PRAGMA_, RSSQLParser.PRIMARY_, RSSQLParser.QUERY_, RSSQLParser.RAISE_, RSSQLParser.RECURSIVE_, RSSQLParser.REFERENCES_, RSSQLParser.REGEXP_, RSSQLParser.REINDEX_, RSSQLParser.RELEASE_, RSSQLParser.RENAME_, RSSQLParser.REPLACE_, RSSQLParser.RESTRICT_, RSSQLParser.RIGHT_, RSSQLParser.ROLLBACK_, RSSQLParser.ROW_, RSSQLParser.ROWS_, RSSQLParser.SAVEPOINT_, RSSQLParser.SELECT_, RSSQLParser.SET_, RSSQLParser.TABLE_, RSSQLParser.TEMP_, RSSQLParser.TEMPORARY_, RSSQLParser.THEN_, RSSQLParser.TO_, RSSQLParser.TRANSACTION_, RSSQLParser.TRIGGER_, RSSQLParser.UNION_, RSSQLParser.UNIQUE_, RSSQLParser.UPDATE_, RSSQLParser.USING_, RSSQLParser.VACUUM_, RSSQLParser.VALUES_, RSSQLParser.VIEW_, RSSQLParser.VIRTUAL_, RSSQLParser.WHEN_, RSSQLParser.WHERE_, RSSQLParser.WITH_, RSSQLParser.WITHOUT_, RSSQLParser.FIRST_VALUE_, RSSQLParser.OVER_, RSSQLParser.PARTITION_, RSSQLParser.RANGE_, RSSQLParser.PRECEDING_, RSSQLParser.UNBOUNDED_, RSSQLParser.CURRENT_, RSSQLParser.FOLLOWING_, RSSQLParser.CUME_DIST_, RSSQLParser.DENSE_RANK_, RSSQLParser.LAG_, RSSQLParser.LAST_VALUE_, RSSQLParser.LEAD_, RSSQLParser.NTH_VALUE_, RSSQLParser.NTILE_, RSSQLParser.PERCENT_RANK_, RSSQLParser.RANK_, RSSQLParser.ROW_NUMBER_, RSSQLParser.GENERATED_, RSSQLParser.ALWAYS_, RSSQLParser.STORED_, RSSQLParser.TRUE_, RSSQLParser.FALSE_, RSSQLParser.WINDOW_, RSSQLParser.NULLS_, RSSQLParser.FIRST_, RSSQLParser.LAST_, RSSQLParser.FILTER_, RSSQLParser.GROUPS_, RSSQLParser.EXCLUDE_, RSSQLParser.IDENTIFIER, RSSQLParser.NUMERIC_LITERAL, RSSQLParser.BIND_PARAMETER, RSSQLParser.STRING_LITERAL, RSSQLParser.BLOB_LITERAL]:
                    self.state = 896
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                    if la_ == 1:
                        self.state = 895
                        self.match(RSSQLParser.DISTINCT_)


                    self.state = 898
                    self.expr(0)
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==RSSQLParser.COMMA:
                        self.state = 899
                        self.match(RSSQLParser.COMMA)
                        self.state = 900
                        self.expr(0)
                        self.state = 905
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [RSSQLParser.STAR]:
                    self.state = 906
                    self.match(RSSQLParser.STAR)
                    pass
                elif token in [RSSQLParser.CLOSE_PAR]:
                    pass
                else:
                    pass
                self.state = 909
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 911
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 910
                    self.filter_clause()


                self.state = 914
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 913
                    self.over_clause()


                pass

            elif la_ == 6:
                self.state = 916
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 917
                self.expr(0)
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 918
                    self.match(RSSQLParser.COMMA)
                    self.state = 919
                    self.expr(0)
                    self.state = 924
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 925
                self.match(RSSQLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 927
                self.match(RSSQLParser.CAST_)
                self.state = 928
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 929
                self.expr(0)
                self.state = 930
                self.match(RSSQLParser.AS_)
                self.state = 931
                self.type_name()
                self.state = 932
                self.match(RSSQLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.EXISTS_ or _la==RSSQLParser.NOT_:
                    self.state = 935
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==RSSQLParser.NOT_:
                        self.state = 934
                        self.match(RSSQLParser.NOT_)


                    self.state = 937
                    self.match(RSSQLParser.EXISTS_)


                self.state = 940
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 941
                self.select_stmt()
                self.state = 942
                self.match(RSSQLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 944
                self.match(RSSQLParser.CASE_)
                self.state = 946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 945
                    self.expr(0)


                self.state = 953 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 948
                    self.match(RSSQLParser.WHEN_)
                    self.state = 949
                    self.expr(0)
                    self.state = 950
                    self.match(RSSQLParser.THEN_)
                    self.state = 951
                    self.expr(0)
                    self.state = 955 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==RSSQLParser.WHEN_):
                        break

                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.ELSE_:
                    self.state = 957
                    self.match(RSSQLParser.ELSE_)
                    self.state = 958
                    self.expr(0)


                self.state = 961
                self.match(RSSQLParser.END_)
                pass

            elif la_ == 10:
                self.state = 963
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1085
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1083
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                    if la_ == 1:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 966
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 967
                        self.match(RSSQLParser.PIPE2)
                        self.state = 968
                        self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 969
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 970
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << RSSQLParser.STAR) | (1 << RSSQLParser.DIV) | (1 << RSSQLParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 971
                        self.expr(20)
                        pass

                    elif la_ == 3:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 972
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 973
                        _la = self._input.LA(1)
                        if not(_la==RSSQLParser.PLUS or _la==RSSQLParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 974
                        self.expr(19)
                        pass

                    elif la_ == 4:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 975
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 976
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << RSSQLParser.LT2) | (1 << RSSQLParser.GT2) | (1 << RSSQLParser.AMP) | (1 << RSSQLParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 977
                        self.expr(18)
                        pass

                    elif la_ == 5:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 978
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 979
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << RSSQLParser.LT) | (1 << RSSQLParser.LT_EQ) | (1 << RSSQLParser.GT) | (1 << RSSQLParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 980
                        self.expr(17)
                        pass

                    elif la_ == 6:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 981
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 994
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                        if la_ == 1:
                            self.state = 982
                            self.match(RSSQLParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 983
                            self.match(RSSQLParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 984
                            self.match(RSSQLParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 985
                            self.match(RSSQLParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 986
                            self.match(RSSQLParser.IS_)
                            pass

                        elif la_ == 6:
                            self.state = 987
                            self.match(RSSQLParser.IS_)
                            self.state = 988
                            self.match(RSSQLParser.NOT_)
                            pass

                        elif la_ == 7:
                            self.state = 989
                            self.match(RSSQLParser.IN_)
                            pass

                        elif la_ == 8:
                            self.state = 990
                            self.match(RSSQLParser.LIKE_)
                            pass

                        elif la_ == 9:
                            self.state = 991
                            self.match(RSSQLParser.GLOB_)
                            pass

                        elif la_ == 10:
                            self.state = 992
                            self.match(RSSQLParser.MATCH_)
                            pass

                        elif la_ == 11:
                            self.state = 993
                            self.match(RSSQLParser.REGEXP_)
                            pass


                        self.state = 996
                        self.expr(16)
                        pass

                    elif la_ == 7:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 997
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 998
                        self.match(RSSQLParser.AND_)
                        self.state = 999
                        self.expr(15)
                        pass

                    elif la_ == 8:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1000
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1001
                        self.match(RSSQLParser.OR_)
                        self.state = 1002
                        self.expr(14)
                        pass

                    elif la_ == 9:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1003
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1004
                        self.match(RSSQLParser.IS_)
                        self.state = 1006
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                        if la_ == 1:
                            self.state = 1005
                            self.match(RSSQLParser.NOT_)


                        self.state = 1008
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1009
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1011
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==RSSQLParser.NOT_:
                            self.state = 1010
                            self.match(RSSQLParser.NOT_)


                        self.state = 1013
                        self.match(RSSQLParser.BETWEEN_)
                        self.state = 1014
                        self.expr(0)
                        self.state = 1015
                        self.match(RSSQLParser.AND_)
                        self.state = 1016
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1018
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1019
                        self.match(RSSQLParser.COLLATE_)
                        self.state = 1020
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1021
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1023
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==RSSQLParser.NOT_:
                            self.state = 1022
                            self.match(RSSQLParser.NOT_)


                        self.state = 1025
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (RSSQLParser.GLOB_ - 77)) | (1 << (RSSQLParser.LIKE_ - 77)) | (1 << (RSSQLParser.MATCH_ - 77)) | (1 << (RSSQLParser.REGEXP_ - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1026
                        self.expr(0)
                        self.state = 1029
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                        if la_ == 1:
                            self.state = 1027
                            self.match(RSSQLParser.ESCAPE_)
                            self.state = 1028
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1031
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1036
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [RSSQLParser.ISNULL_]:
                            self.state = 1032
                            self.match(RSSQLParser.ISNULL_)
                            pass
                        elif token in [RSSQLParser.NOTNULL_]:
                            self.state = 1033
                            self.match(RSSQLParser.NOTNULL_)
                            pass
                        elif token in [RSSQLParser.NOT_]:
                            self.state = 1034
                            self.match(RSSQLParser.NOT_)
                            self.state = 1035
                            self.match(RSSQLParser.NULL_)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = RSSQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1038
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1040
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==RSSQLParser.NOT_:
                            self.state = 1039
                            self.match(RSSQLParser.NOT_)


                        self.state = 1042
                        self.match(RSSQLParser.IN_)
                        self.state = 1081
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                        if la_ == 1:
                            self.state = 1043
                            self.match(RSSQLParser.OPEN_PAR)
                            self.state = 1053
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                            if la_ == 1:
                                self.state = 1044
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1045
                                self.expr(0)
                                self.state = 1050
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==RSSQLParser.COMMA:
                                    self.state = 1046
                                    self.match(RSSQLParser.COMMA)
                                    self.state = 1047
                                    self.expr(0)
                                    self.state = 1052
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1055
                            self.match(RSSQLParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1059
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                            if la_ == 1:
                                self.state = 1056
                                self.schema_name()
                                self.state = 1057
                                self.match(RSSQLParser.DOT)


                            self.state = 1061
                            self.table_name()
                            pass

                        elif la_ == 3:
                            self.state = 1065
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                            if la_ == 1:
                                self.state = 1062
                                self.schema_name()
                                self.state = 1063
                                self.match(RSSQLParser.DOT)


                            self.state = 1067
                            self.table_function_name()
                            self.state = 1068
                            self.match(RSSQLParser.OPEN_PAR)
                            self.state = 1077
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << RSSQLParser.OPEN_PAR) | (1 << RSSQLParser.PLUS) | (1 << RSSQLParser.MINUS) | (1 << RSSQLParser.TILDE) | (1 << RSSQLParser.ABORT_) | (1 << RSSQLParser.ACTION_) | (1 << RSSQLParser.ADD_) | (1 << RSSQLParser.AFTER_) | (1 << RSSQLParser.ALL_) | (1 << RSSQLParser.ALTER_) | (1 << RSSQLParser.ANALYZE_) | (1 << RSSQLParser.AND_) | (1 << RSSQLParser.AS_) | (1 << RSSQLParser.ASC_) | (1 << RSSQLParser.ATTACH_) | (1 << RSSQLParser.AUTOINCREMENT_) | (1 << RSSQLParser.BEFORE_) | (1 << RSSQLParser.BEGIN_) | (1 << RSSQLParser.BETWEEN_) | (1 << RSSQLParser.BY_) | (1 << RSSQLParser.CASCADE_) | (1 << RSSQLParser.CASE_) | (1 << RSSQLParser.CAST_) | (1 << RSSQLParser.CHECK_) | (1 << RSSQLParser.COLLATE_) | (1 << RSSQLParser.COLUMN_) | (1 << RSSQLParser.COMMIT_) | (1 << RSSQLParser.CONFLICT_) | (1 << RSSQLParser.CONSTRAINT_) | (1 << RSSQLParser.CREATE_) | (1 << RSSQLParser.CROSS_) | (1 << RSSQLParser.CURRENT_DATE_) | (1 << RSSQLParser.CURRENT_TIME_) | (1 << RSSQLParser.CURRENT_TIMESTAMP_) | (1 << RSSQLParser.DATABASE_) | (1 << RSSQLParser.DEFAULT_) | (1 << RSSQLParser.DEFERRABLE_) | (1 << RSSQLParser.DEFERRED_) | (1 << RSSQLParser.DELETE_) | (1 << RSSQLParser.DESC_) | (1 << RSSQLParser.DETACH_) | (1 << RSSQLParser.DISTINCT_) | (1 << RSSQLParser.DROP_))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (RSSQLParser.EACH_ - 64)) | (1 << (RSSQLParser.ELSE_ - 64)) | (1 << (RSSQLParser.END_ - 64)) | (1 << (RSSQLParser.ESCAPE_ - 64)) | (1 << (RSSQLParser.EXCEPT_ - 64)) | (1 << (RSSQLParser.EXCLUSIVE_ - 64)) | (1 << (RSSQLParser.EXISTS_ - 64)) | (1 << (RSSQLParser.EXPLAIN_ - 64)) | (1 << (RSSQLParser.FAIL_ - 64)) | (1 << (RSSQLParser.FOR_ - 64)) | (1 << (RSSQLParser.FOREIGN_ - 64)) | (1 << (RSSQLParser.FROM_ - 64)) | (1 << (RSSQLParser.FULL_ - 64)) | (1 << (RSSQLParser.GLOB_ - 64)) | (1 << (RSSQLParser.GROUP_ - 64)) | (1 << (RSSQLParser.HAVING_ - 64)) | (1 << (RSSQLParser.IF_ - 64)) | (1 << (RSSQLParser.IGNORE_ - 64)) | (1 << (RSSQLParser.IMMEDIATE_ - 64)) | (1 << (RSSQLParser.IN_ - 64)) | (1 << (RSSQLParser.INDEX_ - 64)) | (1 << (RSSQLParser.INDEXED_ - 64)) | (1 << (RSSQLParser.INITIALLY_ - 64)) | (1 << (RSSQLParser.INNER_ - 64)) | (1 << (RSSQLParser.INSERT_ - 64)) | (1 << (RSSQLParser.INSTEAD_ - 64)) | (1 << (RSSQLParser.INTERSECT_ - 64)) | (1 << (RSSQLParser.INTO_ - 64)) | (1 << (RSSQLParser.IS_ - 64)) | (1 << (RSSQLParser.ISNULL_ - 64)) | (1 << (RSSQLParser.JOIN_ - 64)) | (1 << (RSSQLParser.KEY_ - 64)) | (1 << (RSSQLParser.LEFT_ - 64)) | (1 << (RSSQLParser.LIKE_ - 64)) | (1 << (RSSQLParser.LIMIT_ - 64)) | (1 << (RSSQLParser.MATCH_ - 64)) | (1 << (RSSQLParser.NATURAL_ - 64)) | (1 << (RSSQLParser.NO_ - 64)) | (1 << (RSSQLParser.NOT_ - 64)) | (1 << (RSSQLParser.NOTNULL_ - 64)) | (1 << (RSSQLParser.NULL_ - 64)) | (1 << (RSSQLParser.OF_ - 64)) | (1 << (RSSQLParser.OFFSET_ - 64)) | (1 << (RSSQLParser.ON_ - 64)) | (1 << (RSSQLParser.OR_ - 64)) | (1 << (RSSQLParser.ORDER_ - 64)) | (1 << (RSSQLParser.OUTER_ - 64)) | (1 << (RSSQLParser.PLAN_ - 64)) | (1 << (RSSQLParser.PRAGMA_ - 64)) | (1 << (RSSQLParser.PRIMARY_ - 64)) | (1 << (RSSQLParser.QUERY_ - 64)) | (1 << (RSSQLParser.RAISE_ - 64)) | (1 << (RSSQLParser.RECURSIVE_ - 64)) | (1 << (RSSQLParser.REFERENCES_ - 64)) | (1 << (RSSQLParser.REGEXP_ - 64)) | (1 << (RSSQLParser.REINDEX_ - 64)) | (1 << (RSSQLParser.RELEASE_ - 64)) | (1 << (RSSQLParser.RENAME_ - 64)) | (1 << (RSSQLParser.REPLACE_ - 64)) | (1 << (RSSQLParser.RESTRICT_ - 64)) | (1 << (RSSQLParser.RIGHT_ - 64)) | (1 << (RSSQLParser.ROLLBACK_ - 64)) | (1 << (RSSQLParser.ROW_ - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (RSSQLParser.ROWS_ - 128)) | (1 << (RSSQLParser.SAVEPOINT_ - 128)) | (1 << (RSSQLParser.SELECT_ - 128)) | (1 << (RSSQLParser.SET_ - 128)) | (1 << (RSSQLParser.TABLE_ - 128)) | (1 << (RSSQLParser.TEMP_ - 128)) | (1 << (RSSQLParser.TEMPORARY_ - 128)) | (1 << (RSSQLParser.THEN_ - 128)) | (1 << (RSSQLParser.TO_ - 128)) | (1 << (RSSQLParser.TRANSACTION_ - 128)) | (1 << (RSSQLParser.TRIGGER_ - 128)) | (1 << (RSSQLParser.UNION_ - 128)) | (1 << (RSSQLParser.UNIQUE_ - 128)) | (1 << (RSSQLParser.UPDATE_ - 128)) | (1 << (RSSQLParser.USING_ - 128)) | (1 << (RSSQLParser.VACUUM_ - 128)) | (1 << (RSSQLParser.VALUES_ - 128)) | (1 << (RSSQLParser.VIEW_ - 128)) | (1 << (RSSQLParser.VIRTUAL_ - 128)) | (1 << (RSSQLParser.WHEN_ - 128)) | (1 << (RSSQLParser.WHERE_ - 128)) | (1 << (RSSQLParser.WITH_ - 128)) | (1 << (RSSQLParser.WITHOUT_ - 128)) | (1 << (RSSQLParser.FIRST_VALUE_ - 128)) | (1 << (RSSQLParser.OVER_ - 128)) | (1 << (RSSQLParser.PARTITION_ - 128)) | (1 << (RSSQLParser.RANGE_ - 128)) | (1 << (RSSQLParser.PRECEDING_ - 128)) | (1 << (RSSQLParser.UNBOUNDED_ - 128)) | (1 << (RSSQLParser.CURRENT_ - 128)) | (1 << (RSSQLParser.FOLLOWING_ - 128)) | (1 << (RSSQLParser.CUME_DIST_ - 128)) | (1 << (RSSQLParser.DENSE_RANK_ - 128)) | (1 << (RSSQLParser.LAG_ - 128)) | (1 << (RSSQLParser.LAST_VALUE_ - 128)) | (1 << (RSSQLParser.LEAD_ - 128)) | (1 << (RSSQLParser.NTH_VALUE_ - 128)) | (1 << (RSSQLParser.NTILE_ - 128)) | (1 << (RSSQLParser.PERCENT_RANK_ - 128)) | (1 << (RSSQLParser.RANK_ - 128)) | (1 << (RSSQLParser.ROW_NUMBER_ - 128)) | (1 << (RSSQLParser.GENERATED_ - 128)) | (1 << (RSSQLParser.ALWAYS_ - 128)) | (1 << (RSSQLParser.STORED_ - 128)) | (1 << (RSSQLParser.TRUE_ - 128)) | (1 << (RSSQLParser.FALSE_ - 128)) | (1 << (RSSQLParser.WINDOW_ - 128)) | (1 << (RSSQLParser.NULLS_ - 128)) | (1 << (RSSQLParser.FIRST_ - 128)) | (1 << (RSSQLParser.LAST_ - 128)) | (1 << (RSSQLParser.FILTER_ - 128)) | (1 << (RSSQLParser.GROUPS_ - 128)) | (1 << (RSSQLParser.EXCLUDE_ - 128)) | (1 << (RSSQLParser.IDENTIFIER - 128)) | (1 << (RSSQLParser.NUMERIC_LITERAL - 128)) | (1 << (RSSQLParser.BIND_PARAMETER - 128)) | (1 << (RSSQLParser.STRING_LITERAL - 128)) | (1 << (RSSQLParser.BLOB_LITERAL - 128)))) != 0):
                                self.state = 1069
                                self.expr(0)
                                self.state = 1074
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==RSSQLParser.COMMA:
                                    self.state = 1070
                                    self.match(RSSQLParser.COMMA)
                                    self.state = 1071
                                    self.expr(0)
                                    self.state = 1076
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1079
                            self.match(RSSQLParser.CLOSE_PAR)
                            pass


                        pass

             
                self.state = 1087
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Raise_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE_(self):
            return self.getToken(RSSQLParser.RAISE_, 0)

        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def IGNORE_(self):
            return self.getToken(RSSQLParser.IGNORE_, 0)

        def COMMA(self):
            return self.getToken(RSSQLParser.COMMA, 0)

        def error_message(self):
            return self.getTypedRuleContext(RSSQLParser.Error_messageContext,0)


        def ROLLBACK_(self):
            return self.getToken(RSSQLParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(RSSQLParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(RSSQLParser.FAIL_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_raise_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_function" ):
                listener.enterRaise_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_function" ):
                listener.exitRaise_function(self)




    def raise_function(self):

        localctx = RSSQLParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(RSSQLParser.RAISE_)
            self.state = 1089
            self.match(RSSQLParser.OPEN_PAR)
            self.state = 1094
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.IGNORE_]:
                self.state = 1090
                self.match(RSSQLParser.IGNORE_)
                pass
            elif token in [RSSQLParser.ABORT_, RSSQLParser.FAIL_, RSSQLParser.ROLLBACK_]:
                self.state = 1091
                _la = self._input.LA(1)
                if not(_la==RSSQLParser.ABORT_ or _la==RSSQLParser.FAIL_ or _la==RSSQLParser.ROLLBACK_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1092
                self.match(RSSQLParser.COMMA)
                self.state = 1093
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1096
            self.match(RSSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(RSSQLParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(RSSQLParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(RSSQLParser.BLOB_LITERAL, 0)

        def NULL_(self):
            return self.getToken(RSSQLParser.NULL_, 0)

        def TRUE_(self):
            return self.getToken(RSSQLParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(RSSQLParser.FALSE_, 0)

        def CURRENT_TIME_(self):
            return self.getToken(RSSQLParser.CURRENT_TIME_, 0)

        def CURRENT_DATE_(self):
            return self.getToken(RSSQLParser.CURRENT_DATE_, 0)

        def CURRENT_TIMESTAMP_(self):
            return self.getToken(RSSQLParser.CURRENT_TIMESTAMP_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = RSSQLParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (RSSQLParser.CURRENT_DATE_ - 52)) | (1 << (RSSQLParser.CURRENT_TIME_ - 52)) | (1 << (RSSQLParser.CURRENT_TIMESTAMP_ - 52)) | (1 << (RSSQLParser.NULL_ - 52)))) != 0) or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & ((1 << (RSSQLParser.TRUE_ - 172)) | (1 << (RSSQLParser.FALSE_ - 172)) | (1 << (RSSQLParser.NUMERIC_LITERAL - 172)) | (1 << (RSSQLParser.STRING_LITERAL - 172)) | (1 << (RSSQLParser.BLOB_LITERAL - 172)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_rowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_value_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_row" ):
                listener.enterValue_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_row" ):
                listener.exitValue_row(self)




    def value_row(self):

        localctx = RSSQLParser.Value_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_value_row)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.match(RSSQLParser.OPEN_PAR)
            self.state = 1101
            self.expr(0)
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.COMMA:
                self.state = 1102
                self.match(RSSQLParser.COMMA)
                self.state = 1103
                self.expr(0)
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1109
            self.match(RSSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES_(self):
            return self.getToken(RSSQLParser.VALUES_, 0)

        def value_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Value_rowContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Value_rowContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_clause" ):
                listener.enterValues_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_clause" ):
                listener.exitValues_clause(self)




    def values_clause(self):

        localctx = RSSQLParser.Values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_values_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.match(RSSQLParser.VALUES_)
            self.state = 1112
            self.value_row()
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.COMMA:
                self.state = 1113
                self.match(RSSQLParser.COMMA)
                self.state = 1114
                self.value_row()
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO_(self):
            return self.getToken(RSSQLParser.INTO_, 0)

        def table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_nameContext,0)


        def INSERT_(self):
            return self.getToken(RSSQLParser.INSERT_, 0)

        def REPLACE_(self):
            return self.getToken(RSSQLParser.REPLACE_, 0)

        def OR_(self):
            return self.getToken(RSSQLParser.OR_, 0)

        def DEFAULT_(self):
            return self.getToken(RSSQLParser.DEFAULT_, 0)

        def VALUES_(self):
            return self.getToken(RSSQLParser.VALUES_, 0)

        def with_clause(self):
            return self.getTypedRuleContext(RSSQLParser.With_clauseContext,0)


        def ROLLBACK_(self):
            return self.getToken(RSSQLParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(RSSQLParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(RSSQLParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(RSSQLParser.IGNORE_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def AS_(self):
            return self.getToken(RSSQLParser.AS_, 0)

        def table_alias(self):
            return self.getTypedRuleContext(RSSQLParser.Table_aliasContext,0)


        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def returning_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Returning_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def values_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Values_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Select_stmtContext,0)


        def upsert_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Upsert_clauseContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = RSSQLParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WITH_:
                self.state = 1120
                self.with_clause()


            self.state = 1128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1123
                self.match(RSSQLParser.INSERT_)
                pass

            elif la_ == 2:
                self.state = 1124
                self.match(RSSQLParser.REPLACE_)
                pass

            elif la_ == 3:
                self.state = 1125
                self.match(RSSQLParser.INSERT_)
                self.state = 1126
                self.match(RSSQLParser.OR_)
                self.state = 1127
                _la = self._input.LA(1)
                if not(_la==RSSQLParser.ABORT_ or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (RSSQLParser.FAIL_ - 72)) | (1 << (RSSQLParser.IGNORE_ - 72)) | (1 << (RSSQLParser.REPLACE_ - 72)) | (1 << (RSSQLParser.ROLLBACK_ - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


            self.state = 1130
            self.match(RSSQLParser.INTO_)
            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1131
                self.schema_name()
                self.state = 1132
                self.match(RSSQLParser.DOT)


            self.state = 1136
            self.table_name()
            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.AS_:
                self.state = 1137
                self.match(RSSQLParser.AS_)
                self.state = 1138
                self.table_alias()


            self.state = 1152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.OPEN_PAR:
                self.state = 1141
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1142
                self.column_name()
                self.state = 1147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 1143
                    self.match(RSSQLParser.COMMA)
                    self.state = 1144
                    self.column_name()
                    self.state = 1149
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1150
                self.match(RSSQLParser.CLOSE_PAR)


            self.state = 1163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.SELECT_, RSSQLParser.VALUES_, RSSQLParser.WITH_]:
                self.state = 1156
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 1154
                    self.values_clause()
                    pass

                elif la_ == 2:
                    self.state = 1155
                    self.select_stmt()
                    pass


                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.ON_:
                    self.state = 1158
                    self.upsert_clause()


                pass
            elif token in [RSSQLParser.DEFAULT_]:
                self.state = 1161
                self.match(RSSQLParser.DEFAULT_)
                self.state = 1162
                self.match(RSSQLParser.VALUES_)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.RETURNING_:
                self.state = 1165
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING_(self):
            return self.getToken(RSSQLParser.RETURNING_, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturning_clause" ):
                listener.enterReturning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturning_clause" ):
                listener.exitReturning_clause(self)




    def returning_clause(self):

        localctx = RSSQLParser.Returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.match(RSSQLParser.RETURNING_)
            self.state = 1169
            self.result_column()
            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.COMMA:
                self.state = 1170
                self.match(RSSQLParser.COMMA)
                self.state = 1171
                self.result_column()
                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Upsert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(RSSQLParser.ON_, 0)

        def CONFLICT_(self):
            return self.getToken(RSSQLParser.CONFLICT_, 0)

        def DO_(self):
            return self.getToken(RSSQLParser.DO_, 0)

        def NOTHING_(self):
            return self.getToken(RSSQLParser.NOTHING_, 0)

        def UPDATE_(self):
            return self.getToken(RSSQLParser.UPDATE_, 0)

        def SET_(self):
            return self.getToken(RSSQLParser.SET_, 0)

        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.ASSIGN)
            else:
                return self.getToken(RSSQLParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def WHERE_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.WHERE_)
            else:
                return self.getToken(RSSQLParser.WHERE_, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return RSSQLParser.RULE_upsert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpsert_clause" ):
                listener.enterUpsert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpsert_clause" ):
                listener.exitUpsert_clause(self)




    def upsert_clause(self):

        localctx = RSSQLParser.Upsert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_upsert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.match(RSSQLParser.ON_)
            self.state = 1178
            self.match(RSSQLParser.CONFLICT_)
            self.state = 1193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.OPEN_PAR:
                self.state = 1179
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1180
                self.indexed_column()
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 1181
                    self.match(RSSQLParser.COMMA)
                    self.state = 1182
                    self.indexed_column()
                    self.state = 1187
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1188
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.WHERE_:
                    self.state = 1189
                    self.match(RSSQLParser.WHERE_)
                    self.state = 1190
                    self.expr(0)




            self.state = 1195
            self.match(RSSQLParser.DO_)
            self.state = 1222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.NOTHING_]:
                self.state = 1196
                self.match(RSSQLParser.NOTHING_)
                pass
            elif token in [RSSQLParser.UPDATE_]:
                self.state = 1197
                self.match(RSSQLParser.UPDATE_)
                self.state = 1198
                self.match(RSSQLParser.SET_)

                self.state = 1201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1199
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1200
                    self.column_name_list()
                    pass


                self.state = 1203
                self.match(RSSQLParser.ASSIGN)
                self.state = 1204
                self.expr(0)
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 1205
                    self.match(RSSQLParser.COMMA)
                    self.state = 1208
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1206
                        self.column_name()
                        pass

                    elif la_ == 2:
                        self.state = 1207
                        self.column_name_list()
                        pass


                    self.state = 1210
                    self.match(RSSQLParser.ASSIGN)
                    self.state = 1211
                    self.expr(0)
                    self.state = 1217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.WHERE_:
                    self.state = 1218
                    self.match(RSSQLParser.WHERE_)
                    self.state = 1219
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA_(self):
            return self.getToken(RSSQLParser.PRAGMA_, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(RSSQLParser.Pragma_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def ASSIGN(self):
            return self.getToken(RSSQLParser.ASSIGN, 0)

        def pragma_value(self):
            return self.getTypedRuleContext(RSSQLParser.Pragma_valueContext,0)


        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_pragma_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_stmt" ):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_stmt" ):
                listener.exitPragma_stmt(self)




    def pragma_stmt(self):

        localctx = RSSQLParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.match(RSSQLParser.PRAGMA_)
            self.state = 1228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1225
                self.schema_name()
                self.state = 1226
                self.match(RSSQLParser.DOT)


            self.state = 1230
            self.pragma_name()
            self.state = 1237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.ASSIGN]:
                self.state = 1231
                self.match(RSSQLParser.ASSIGN)
                self.state = 1232
                self.pragma_value()
                pass
            elif token in [RSSQLParser.OPEN_PAR]:
                self.state = 1233
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1234
                self.pragma_value()
                self.state = 1235
                self.match(RSSQLParser.CLOSE_PAR)
                pass
            elif token in [RSSQLParser.EOF, RSSQLParser.SCOL, RSSQLParser.ALTER_, RSSQLParser.ANALYZE_, RSSQLParser.ATTACH_, RSSQLParser.BEGIN_, RSSQLParser.COMMIT_, RSSQLParser.CREATE_, RSSQLParser.DELETE_, RSSQLParser.DETACH_, RSSQLParser.DROP_, RSSQLParser.END_, RSSQLParser.EXPLAIN_, RSSQLParser.INSERT_, RSSQLParser.PRAGMA_, RSSQLParser.REINDEX_, RSSQLParser.RELEASE_, RSSQLParser.REPLACE_, RSSQLParser.ROLLBACK_, RSSQLParser.SAVEPOINT_, RSSQLParser.SELECT_, RSSQLParser.UPDATE_, RSSQLParser.VACUUM_, RSSQLParser.VALUES_, RSSQLParser.WITH_]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(RSSQLParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(RSSQLParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(RSSQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_pragma_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_value" ):
                listener.enterPragma_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_value" ):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = RSSQLParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_pragma_value)
        try:
            self.state = 1242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1239
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1240
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1241
                self.match(RSSQLParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reindex_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REINDEX_(self):
            return self.getToken(RSSQLParser.REINDEX_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(RSSQLParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(RSSQLParser.Index_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_reindex_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_stmt" ):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_stmt" ):
                listener.exitReindex_stmt(self)




    def reindex_stmt(self):

        localctx = RSSQLParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.match(RSSQLParser.REINDEX_)
            self.state = 1255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1245
                self.collation_name()

            elif la_ == 2:
                self.state = 1249
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1246
                    self.schema_name()
                    self.state = 1247
                    self.match(RSSQLParser.DOT)


                self.state = 1253
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1251
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 1252
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Common_table_stmtContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Compound_operatorContext,i)


        def order_by_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = RSSQLParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WITH_:
                self.state = 1257
                self.common_table_stmt()


            self.state = 1260
            self.select_core()
            self.state = 1266
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1261
                    self.compound_operator()
                    self.state = 1262
                    self.select_core() 
                self.state = 1268
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

            self.state = 1270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.ORDER_:
                self.state = 1269
                self.order_by_stmt()


            self.state = 1273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.LIMIT_:
                self.state = 1272
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return RSSQLParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = RSSQLParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.table_or_subquery()
            self.state = 1283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.COMMA or _la==RSSQLParser.CROSS_ or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (RSSQLParser.INNER_ - 87)) | (1 << (RSSQLParser.JOIN_ - 87)) | (1 << (RSSQLParser.LEFT_ - 87)) | (1 << (RSSQLParser.NATURAL_ - 87)))) != 0):
                self.state = 1276
                self.join_operator()
                self.state = 1277
                self.table_or_subquery()
                self.state = 1279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1278
                    self.join_constraint()


                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_coreContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExprContext
            self._expr = None # ExprContext
            self.groupByExpr = list() # of ExprContexts
            self.havingExpr = None # ExprContext

        def SELECT_(self):
            return self.getToken(RSSQLParser.SELECT_, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def FROM_(self):
            return self.getToken(RSSQLParser.FROM_, 0)

        def WHERE_(self):
            return self.getToken(RSSQLParser.WHERE_, 0)

        def GROUP_(self):
            return self.getToken(RSSQLParser.GROUP_, 0)

        def BY_(self):
            return self.getToken(RSSQLParser.BY_, 0)

        def WINDOW_(self):
            return self.getToken(RSSQLParser.WINDOW_, 0)

        def window_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Window_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Window_nameContext,i)


        def AS_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.AS_)
            else:
                return self.getToken(RSSQLParser.AS_, i)

        def window_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Window_defnContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Window_defnContext,i)


        def DISTINCT_(self):
            return self.getToken(RSSQLParser.DISTINCT_, 0)

        def ALL_(self):
            return self.getToken(RSSQLParser.ALL_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Join_clauseContext,0)


        def HAVING_(self):
            return self.getToken(RSSQLParser.HAVING_, 0)

        def values_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Values_clauseContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = RSSQLParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.SELECT_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1286
                self.match(RSSQLParser.SELECT_)
                self.state = 1288
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1287
                    _la = self._input.LA(1)
                    if not(_la==RSSQLParser.ALL_ or _la==RSSQLParser.DISTINCT_):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1290
                self.result_column()
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 1291
                    self.match(RSSQLParser.COMMA)
                    self.state = 1292
                    self.result_column()
                    self.state = 1297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.FROM_:
                    self.state = 1298
                    self.match(RSSQLParser.FROM_)
                    self.state = 1308
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                    if la_ == 1:
                        self.state = 1299
                        self.table_or_subquery()
                        self.state = 1304
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==RSSQLParser.COMMA:
                            self.state = 1300
                            self.match(RSSQLParser.COMMA)
                            self.state = 1301
                            self.table_or_subquery()
                            self.state = 1306
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1307
                        self.join_clause()
                        pass




                self.state = 1314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.WHERE_:
                    self.state = 1312
                    self.match(RSSQLParser.WHERE_)
                    self.state = 1313
                    localctx.whereExpr = self.expr(0)


                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.GROUP_:
                    self.state = 1316
                    self.match(RSSQLParser.GROUP_)
                    self.state = 1317
                    self.match(RSSQLParser.BY_)
                    self.state = 1318
                    localctx._expr = self.expr(0)
                    localctx.groupByExpr.append(localctx._expr)
                    self.state = 1323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==RSSQLParser.COMMA:
                        self.state = 1319
                        self.match(RSSQLParser.COMMA)
                        self.state = 1320
                        localctx._expr = self.expr(0)
                        localctx.groupByExpr.append(localctx._expr)
                        self.state = 1325
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==RSSQLParser.HAVING_:
                        self.state = 1326
                        self.match(RSSQLParser.HAVING_)
                        self.state = 1327
                        localctx.havingExpr = self.expr(0)




                self.state = 1346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.WINDOW_:
                    self.state = 1332
                    self.match(RSSQLParser.WINDOW_)
                    self.state = 1333
                    self.window_name()
                    self.state = 1334
                    self.match(RSSQLParser.AS_)
                    self.state = 1335
                    self.window_defn()
                    self.state = 1343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==RSSQLParser.COMMA:
                        self.state = 1336
                        self.match(RSSQLParser.COMMA)
                        self.state = 1337
                        self.window_name()
                        self.state = 1338
                        self.match(RSSQLParser.AS_)
                        self.state = 1339
                        self.window_defn()
                        self.state = 1345
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [RSSQLParser.VALUES_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1348
                self.values_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factored_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_factored_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactored_select_stmt" ):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactored_select_stmt" ):
                listener.exitFactored_select_stmt(self)




    def factored_select_stmt(self):

        localctx = RSSQLParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_factored_select_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(RSSQLParser.Select_coreContext,0)


        def common_table_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = RSSQLParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WITH_:
                self.state = 1353
                self.common_table_stmt()


            self.state = 1356
            self.select_core()
            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.ORDER_:
                self.state = 1357
                self.order_by_stmt()


            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.LIMIT_:
                self.state = 1360
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Limit_stmtContext,0)


        def UNION_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.UNION_)
            else:
                return self.getToken(RSSQLParser.UNION_, i)

        def INTERSECT_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.INTERSECT_)
            else:
                return self.getToken(RSSQLParser.INTERSECT_, i)

        def EXCEPT_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.EXCEPT_)
            else:
                return self.getToken(RSSQLParser.EXCEPT_, i)

        def ALL_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.ALL_)
            else:
                return self.getToken(RSSQLParser.ALL_, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = RSSQLParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WITH_:
                self.state = 1363
                self.common_table_stmt()


            self.state = 1366
            self.select_core()
            self.state = 1376 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1373
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [RSSQLParser.UNION_]:
                    self.state = 1367
                    self.match(RSSQLParser.UNION_)
                    self.state = 1369
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==RSSQLParser.ALL_:
                        self.state = 1368
                        self.match(RSSQLParser.ALL_)


                    pass
                elif token in [RSSQLParser.INTERSECT_]:
                    self.state = 1371
                    self.match(RSSQLParser.INTERSECT_)
                    pass
                elif token in [RSSQLParser.EXCEPT_]:
                    self.state = 1372
                    self.match(RSSQLParser.EXCEPT_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1375
                self.select_core()
                self.state = 1378 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==RSSQLParser.EXCEPT_ or _la==RSSQLParser.INTERSECT_ or _la==RSSQLParser.UNION_):
                    break

            self.state = 1381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.ORDER_:
                self.state = 1380
                self.order_by_stmt()


            self.state = 1384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.LIMIT_:
                self.state = 1383
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(RSSQLParser.Table_aliasContext,0)


        def INDEXED_(self):
            return self.getToken(RSSQLParser.INDEXED_, 0)

        def BY_(self):
            return self.getToken(RSSQLParser.BY_, 0)

        def index_name(self):
            return self.getTypedRuleContext(RSSQLParser.Index_nameContext,0)


        def NOT_(self):
            return self.getToken(RSSQLParser.NOT_, 0)

        def AS_(self):
            return self.getToken(RSSQLParser.AS_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = RSSQLParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1389
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1386
                    self.schema_name()
                    self.state = 1387
                    self.match(RSSQLParser.DOT)


                self.state = 1391
                self.table_name()
                self.state = 1396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1393
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                    if la_ == 1:
                        self.state = 1392
                        self.match(RSSQLParser.AS_)


                    self.state = 1395
                    self.table_alias()


                self.state = 1403
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [RSSQLParser.INDEXED_]:
                    self.state = 1398
                    self.match(RSSQLParser.INDEXED_)
                    self.state = 1399
                    self.match(RSSQLParser.BY_)
                    self.state = 1400
                    self.index_name()
                    pass
                elif token in [RSSQLParser.NOT_]:
                    self.state = 1401
                    self.match(RSSQLParser.NOT_)
                    self.state = 1402
                    self.match(RSSQLParser.INDEXED_)
                    pass
                elif token in [RSSQLParser.EOF, RSSQLParser.SCOL, RSSQLParser.CLOSE_PAR, RSSQLParser.COMMA, RSSQLParser.ALTER_, RSSQLParser.ANALYZE_, RSSQLParser.ATTACH_, RSSQLParser.BEGIN_, RSSQLParser.COMMIT_, RSSQLParser.CREATE_, RSSQLParser.CROSS_, RSSQLParser.DELETE_, RSSQLParser.DETACH_, RSSQLParser.DROP_, RSSQLParser.END_, RSSQLParser.EXCEPT_, RSSQLParser.EXPLAIN_, RSSQLParser.GROUP_, RSSQLParser.INNER_, RSSQLParser.INSERT_, RSSQLParser.INTERSECT_, RSSQLParser.JOIN_, RSSQLParser.LEFT_, RSSQLParser.LIMIT_, RSSQLParser.NATURAL_, RSSQLParser.ON_, RSSQLParser.ORDER_, RSSQLParser.PRAGMA_, RSSQLParser.REINDEX_, RSSQLParser.RELEASE_, RSSQLParser.REPLACE_, RSSQLParser.RETURNING_, RSSQLParser.ROLLBACK_, RSSQLParser.SAVEPOINT_, RSSQLParser.SELECT_, RSSQLParser.UNION_, RSSQLParser.UPDATE_, RSSQLParser.USING_, RSSQLParser.VACUUM_, RSSQLParser.VALUES_, RSSQLParser.WHERE_, RSSQLParser.WITH_, RSSQLParser.WINDOW_]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1408
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1405
                    self.schema_name()
                    self.state = 1406
                    self.match(RSSQLParser.DOT)


                self.state = 1410
                self.table_function_name()
                self.state = 1411
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1412
                self.expr(0)
                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 1413
                    self.match(RSSQLParser.COMMA)
                    self.state = 1414
                    self.expr(0)
                    self.state = 1419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1420
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 1425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1422
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                    if la_ == 1:
                        self.state = 1421
                        self.match(RSSQLParser.AS_)


                    self.state = 1424
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1427
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1437
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1428
                    self.table_or_subquery()
                    self.state = 1433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==RSSQLParser.COMMA:
                        self.state = 1429
                        self.match(RSSQLParser.COMMA)
                        self.state = 1430
                        self.table_or_subquery()
                        self.state = 1435
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1436
                    self.join_clause()
                    pass


                self.state = 1439
                self.match(RSSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1441
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1442
                self.select_stmt()
                self.state = 1443
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 1448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1445
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                    if la_ == 1:
                        self.state = 1444
                        self.match(RSSQLParser.AS_)


                    self.state = 1447
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Result_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(RSSQLParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(RSSQLParser.Column_aliasContext,0)


        def AS_(self):
            return self.getToken(RSSQLParser.AS_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = RSSQLParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 1464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1452
                self.match(RSSQLParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1453
                self.table_name()
                self.state = 1454
                self.match(RSSQLParser.DOT)
                self.state = 1455
                self.match(RSSQLParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1457
                self.expr(0)
                self.state = 1462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.AS_ or _la==RSSQLParser.IDENTIFIER or _la==RSSQLParser.STRING_LITERAL:
                    self.state = 1459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==RSSQLParser.AS_:
                        self.state = 1458
                        self.match(RSSQLParser.AS_)


                    self.state = 1461
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(RSSQLParser.COMMA, 0)

        def JOIN_(self):
            return self.getToken(RSSQLParser.JOIN_, 0)

        def NATURAL_(self):
            return self.getToken(RSSQLParser.NATURAL_, 0)

        def LEFT_(self):
            return self.getToken(RSSQLParser.LEFT_, 0)

        def INNER_(self):
            return self.getToken(RSSQLParser.INNER_, 0)

        def CROSS_(self):
            return self.getToken(RSSQLParser.CROSS_, 0)

        def OUTER_(self):
            return self.getToken(RSSQLParser.OUTER_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = RSSQLParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1466
                self.match(RSSQLParser.COMMA)
                pass
            elif token in [RSSQLParser.CROSS_, RSSQLParser.INNER_, RSSQLParser.JOIN_, RSSQLParser.LEFT_, RSSQLParser.NATURAL_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.NATURAL_:
                    self.state = 1467
                    self.match(RSSQLParser.NATURAL_)


                self.state = 1476
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [RSSQLParser.LEFT_]:
                    self.state = 1470
                    self.match(RSSQLParser.LEFT_)
                    self.state = 1472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==RSSQLParser.OUTER_:
                        self.state = 1471
                        self.match(RSSQLParser.OUTER_)


                    pass
                elif token in [RSSQLParser.INNER_]:
                    self.state = 1474
                    self.match(RSSQLParser.INNER_)
                    pass
                elif token in [RSSQLParser.CROSS_]:
                    self.state = 1475
                    self.match(RSSQLParser.CROSS_)
                    pass
                elif token in [RSSQLParser.JOIN_]:
                    pass
                else:
                    pass
                self.state = 1478
                self.match(RSSQLParser.JOIN_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(RSSQLParser.ON_, 0)

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def USING_(self):
            return self.getToken(RSSQLParser.USING_, 0)

        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = RSSQLParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.state = 1495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.ON_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1481
                self.match(RSSQLParser.ON_)
                self.state = 1482
                self.expr(0)
                pass
            elif token in [RSSQLParser.USING_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1483
                self.match(RSSQLParser.USING_)
                self.state = 1484
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1485
                self.column_name()
                self.state = 1490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 1486
                    self.match(RSSQLParser.COMMA)
                    self.state = 1487
                    self.column_name()
                    self.state = 1492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1493
                self.match(RSSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION_(self):
            return self.getToken(RSSQLParser.UNION_, 0)

        def ALL_(self):
            return self.getToken(RSSQLParser.ALL_, 0)

        def INTERSECT_(self):
            return self.getToken(RSSQLParser.INTERSECT_, 0)

        def EXCEPT_(self):
            return self.getToken(RSSQLParser.EXCEPT_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = RSSQLParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_compound_operator)
        self._la = 0 # Token type
        try:
            self.state = 1503
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.UNION_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1497
                self.match(RSSQLParser.UNION_)
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.ALL_:
                    self.state = 1498
                    self.match(RSSQLParser.ALL_)


                pass
            elif token in [RSSQLParser.INTERSECT_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1501
                self.match(RSSQLParser.INTERSECT_)
                pass
            elif token in [RSSQLParser.EXCEPT_]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1502
                self.match(RSSQLParser.EXCEPT_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_(self):
            return self.getToken(RSSQLParser.UPDATE_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Qualified_table_nameContext,0)


        def SET_(self):
            return self.getToken(RSSQLParser.SET_, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.ASSIGN)
            else:
                return self.getToken(RSSQLParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(RSSQLParser.With_clauseContext,0)


        def OR_(self):
            return self.getToken(RSSQLParser.OR_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def FROM_(self):
            return self.getToken(RSSQLParser.FROM_, 0)

        def WHERE_(self):
            return self.getToken(RSSQLParser.WHERE_, 0)

        def returning_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Returning_clauseContext,0)


        def ROLLBACK_(self):
            return self.getToken(RSSQLParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(RSSQLParser.ABORT_, 0)

        def REPLACE_(self):
            return self.getToken(RSSQLParser.REPLACE_, 0)

        def FAIL_(self):
            return self.getToken(RSSQLParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(RSSQLParser.IGNORE_, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Join_clauseContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = RSSQLParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WITH_:
                self.state = 1505
                self.with_clause()


            self.state = 1508
            self.match(RSSQLParser.UPDATE_)
            self.state = 1511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1509
                self.match(RSSQLParser.OR_)
                self.state = 1510
                _la = self._input.LA(1)
                if not(_la==RSSQLParser.ABORT_ or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (RSSQLParser.FAIL_ - 72)) | (1 << (RSSQLParser.IGNORE_ - 72)) | (1 << (RSSQLParser.REPLACE_ - 72)) | (1 << (RSSQLParser.ROLLBACK_ - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1513
            self.qualified_table_name()
            self.state = 1514
            self.match(RSSQLParser.SET_)
            self.state = 1517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 1515
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1516
                self.column_name_list()
                pass


            self.state = 1519
            self.match(RSSQLParser.ASSIGN)
            self.state = 1520
            self.expr(0)
            self.state = 1531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.COMMA:
                self.state = 1521
                self.match(RSSQLParser.COMMA)
                self.state = 1524
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 1522
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1523
                    self.column_name_list()
                    pass


                self.state = 1526
                self.match(RSSQLParser.ASSIGN)
                self.state = 1527
                self.expr(0)
                self.state = 1533
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.FROM_:
                self.state = 1534
                self.match(RSSQLParser.FROM_)
                self.state = 1544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 1535
                    self.table_or_subquery()
                    self.state = 1540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==RSSQLParser.COMMA:
                        self.state = 1536
                        self.match(RSSQLParser.COMMA)
                        self.state = 1537
                        self.table_or_subquery()
                        self.state = 1542
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1543
                    self.join_clause()
                    pass




            self.state = 1550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WHERE_:
                self.state = 1548
                self.match(RSSQLParser.WHERE_)
                self.state = 1549
                self.expr(0)


            self.state = 1553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.RETURNING_:
                self.state = 1552
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)




    def column_name_list(self):

        localctx = RSSQLParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            self.match(RSSQLParser.OPEN_PAR)
            self.state = 1556
            self.column_name()
            self.state = 1561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.COMMA:
                self.state = 1557
                self.match(RSSQLParser.COMMA)
                self.state = 1558
                self.column_name()
                self.state = 1563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1564
            self.match(RSSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_(self):
            return self.getToken(RSSQLParser.UPDATE_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Qualified_table_nameContext,0)


        def SET_(self):
            return self.getToken(RSSQLParser.SET_, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.ASSIGN)
            else:
                return self.getToken(RSSQLParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(RSSQLParser.With_clauseContext,0)


        def OR_(self):
            return self.getToken(RSSQLParser.OR_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def WHERE_(self):
            return self.getToken(RSSQLParser.WHERE_, 0)

        def returning_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Returning_clauseContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Limit_stmtContext,0)


        def ROLLBACK_(self):
            return self.getToken(RSSQLParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(RSSQLParser.ABORT_, 0)

        def REPLACE_(self):
            return self.getToken(RSSQLParser.REPLACE_, 0)

        def FAIL_(self):
            return self.getToken(RSSQLParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(RSSQLParser.IGNORE_, 0)

        def order_by_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)




    def update_stmt_limited(self):

        localctx = RSSQLParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WITH_:
                self.state = 1566
                self.with_clause()


            self.state = 1569
            self.match(RSSQLParser.UPDATE_)
            self.state = 1572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 1570
                self.match(RSSQLParser.OR_)
                self.state = 1571
                _la = self._input.LA(1)
                if not(_la==RSSQLParser.ABORT_ or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (RSSQLParser.FAIL_ - 72)) | (1 << (RSSQLParser.IGNORE_ - 72)) | (1 << (RSSQLParser.REPLACE_ - 72)) | (1 << (RSSQLParser.ROLLBACK_ - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1574
            self.qualified_table_name()
            self.state = 1575
            self.match(RSSQLParser.SET_)
            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 1576
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1577
                self.column_name_list()
                pass


            self.state = 1580
            self.match(RSSQLParser.ASSIGN)
            self.state = 1581
            self.expr(0)
            self.state = 1592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.COMMA:
                self.state = 1582
                self.match(RSSQLParser.COMMA)
                self.state = 1585
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 1583
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1584
                    self.column_name_list()
                    pass


                self.state = 1587
                self.match(RSSQLParser.ASSIGN)
                self.state = 1588
                self.expr(0)
                self.state = 1594
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.WHERE_:
                self.state = 1595
                self.match(RSSQLParser.WHERE_)
                self.state = 1596
                self.expr(0)


            self.state = 1600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.RETURNING_:
                self.state = 1599
                self.returning_clause()


            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.LIMIT_ or _la==RSSQLParser.ORDER_:
                self.state = 1603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.ORDER_:
                    self.state = 1602
                    self.order_by_stmt()


                self.state = 1605
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(RSSQLParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(RSSQLParser.DOT, 0)

        def AS_(self):
            return self.getToken(RSSQLParser.AS_, 0)

        def alias(self):
            return self.getTypedRuleContext(RSSQLParser.AliasContext,0)


        def INDEXED_(self):
            return self.getToken(RSSQLParser.INDEXED_, 0)

        def BY_(self):
            return self.getToken(RSSQLParser.BY_, 0)

        def index_name(self):
            return self.getTypedRuleContext(RSSQLParser.Index_nameContext,0)


        def NOT_(self):
            return self.getToken(RSSQLParser.NOT_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)




    def qualified_table_name(self):

        localctx = RSSQLParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_qualified_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 1608
                self.schema_name()
                self.state = 1609
                self.match(RSSQLParser.DOT)


            self.state = 1613
            self.table_name()
            self.state = 1616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.AS_:
                self.state = 1614
                self.match(RSSQLParser.AS_)
                self.state = 1615
                self.alias()


            self.state = 1623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.INDEXED_]:
                self.state = 1618
                self.match(RSSQLParser.INDEXED_)
                self.state = 1619
                self.match(RSSQLParser.BY_)
                self.state = 1620
                self.index_name()
                pass
            elif token in [RSSQLParser.NOT_]:
                self.state = 1621
                self.match(RSSQLParser.NOT_)
                self.state = 1622
                self.match(RSSQLParser.INDEXED_)
                pass
            elif token in [RSSQLParser.EOF, RSSQLParser.SCOL, RSSQLParser.ALTER_, RSSQLParser.ANALYZE_, RSSQLParser.ATTACH_, RSSQLParser.BEGIN_, RSSQLParser.COMMIT_, RSSQLParser.CREATE_, RSSQLParser.DELETE_, RSSQLParser.DETACH_, RSSQLParser.DROP_, RSSQLParser.END_, RSSQLParser.EXPLAIN_, RSSQLParser.INSERT_, RSSQLParser.LIMIT_, RSSQLParser.ORDER_, RSSQLParser.PRAGMA_, RSSQLParser.REINDEX_, RSSQLParser.RELEASE_, RSSQLParser.REPLACE_, RSSQLParser.RETURNING_, RSSQLParser.ROLLBACK_, RSSQLParser.SAVEPOINT_, RSSQLParser.SELECT_, RSSQLParser.SET_, RSSQLParser.UPDATE_, RSSQLParser.VACUUM_, RSSQLParser.VALUES_, RSSQLParser.WHERE_, RSSQLParser.WITH_]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vacuum_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VACUUM_(self):
            return self.getToken(RSSQLParser.VACUUM_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(RSSQLParser.Schema_nameContext,0)


        def INTO_(self):
            return self.getToken(RSSQLParser.INTO_, 0)

        def filename(self):
            return self.getTypedRuleContext(RSSQLParser.FilenameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_vacuum_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_stmt" ):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_stmt" ):
                listener.exitVacuum_stmt(self)




    def vacuum_stmt(self):

        localctx = RSSQLParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vacuum_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            self.match(RSSQLParser.VACUUM_)
            self.state = 1627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 1626
                self.schema_name()


            self.state = 1631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.INTO_:
                self.state = 1629
                self.match(RSSQLParser.INTO_)
                self.state = 1630
                self.filename()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filter_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER_(self):
            return self.getToken(RSSQLParser.FILTER_, 0)

        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def WHERE_(self):
            return self.getToken(RSSQLParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_filter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_clause" ):
                listener.enterFilter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_clause" ):
                listener.exitFilter_clause(self)




    def filter_clause(self):

        localctx = RSSQLParser.Filter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_filter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self.match(RSSQLParser.FILTER_)
            self.state = 1634
            self.match(RSSQLParser.OPEN_PAR)
            self.state = 1635
            self.match(RSSQLParser.WHERE_)
            self.state = 1636
            self.expr(0)
            self.state = 1637
            self.match(RSSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_defnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def ORDER_(self):
            return self.getToken(RSSQLParser.ORDER_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.BY_)
            else:
                return self.getToken(RSSQLParser.BY_, i)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Ordering_termContext,i)


        def base_window_name(self):
            return self.getTypedRuleContext(RSSQLParser.Base_window_nameContext,0)


        def PARTITION_(self):
            return self.getToken(RSSQLParser.PARTITION_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(RSSQLParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_window_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_defn" ):
                listener.enterWindow_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_defn" ):
                listener.exitWindow_defn(self)




    def window_defn(self):

        localctx = RSSQLParser.Window_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_window_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self.match(RSSQLParser.OPEN_PAR)
            self.state = 1641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 1640
                self.base_window_name()


            self.state = 1653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.PARTITION_:
                self.state = 1643
                self.match(RSSQLParser.PARTITION_)
                self.state = 1644
                self.match(RSSQLParser.BY_)
                self.state = 1645
                self.expr(0)
                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 1646
                    self.match(RSSQLParser.COMMA)
                    self.state = 1647
                    self.expr(0)
                    self.state = 1652
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1655
            self.match(RSSQLParser.ORDER_)
            self.state = 1656
            self.match(RSSQLParser.BY_)
            self.state = 1657
            self.ordering_term()
            self.state = 1662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.COMMA:
                self.state = 1658
                self.match(RSSQLParser.COMMA)
                self.state = 1659
                self.ordering_term()
                self.state = 1664
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (RSSQLParser.ROWS_ - 128)) | (1 << (RSSQLParser.RANGE_ - 128)) | (1 << (RSSQLParser.GROUPS_ - 128)))) != 0):
                self.state = 1665
                self.frame_spec()


            self.state = 1668
            self.match(RSSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER_(self):
            return self.getToken(RSSQLParser.OVER_, 0)

        def window_name(self):
            return self.getTypedRuleContext(RSSQLParser.Window_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def base_window_name(self):
            return self.getTypedRuleContext(RSSQLParser.Base_window_nameContext,0)


        def PARTITION_(self):
            return self.getToken(RSSQLParser.PARTITION_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.BY_)
            else:
                return self.getToken(RSSQLParser.BY_, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def ORDER_(self):
            return self.getToken(RSSQLParser.ORDER_, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Ordering_termContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(RSSQLParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = RSSQLParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self.match(RSSQLParser.OVER_)
            self.state = 1704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.state = 1671
                self.window_name()
                pass

            elif la_ == 2:
                self.state = 1672
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 1673
                    self.base_window_name()


                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.PARTITION_:
                    self.state = 1676
                    self.match(RSSQLParser.PARTITION_)
                    self.state = 1677
                    self.match(RSSQLParser.BY_)
                    self.state = 1678
                    self.expr(0)
                    self.state = 1683
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==RSSQLParser.COMMA:
                        self.state = 1679
                        self.match(RSSQLParser.COMMA)
                        self.state = 1680
                        self.expr(0)
                        self.state = 1685
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.ORDER_:
                    self.state = 1688
                    self.match(RSSQLParser.ORDER_)
                    self.state = 1689
                    self.match(RSSQLParser.BY_)
                    self.state = 1690
                    self.ordering_term()
                    self.state = 1695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==RSSQLParser.COMMA:
                        self.state = 1691
                        self.match(RSSQLParser.COMMA)
                        self.state = 1692
                        self.ordering_term()
                        self.state = 1697
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (RSSQLParser.ROWS_ - 128)) | (1 << (RSSQLParser.RANGE_ - 128)) | (1 << (RSSQLParser.GROUPS_ - 128)))) != 0):
                    self.state = 1700
                    self.frame_spec()


                self.state = 1703
                self.match(RSSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Frame_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frame_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Frame_clauseContext,0)


        def EXCLUDE_(self):
            return self.getToken(RSSQLParser.EXCLUDE_, 0)

        def NO_(self):
            return self.getToken(RSSQLParser.NO_, 0)

        def OTHERS_(self):
            return self.getToken(RSSQLParser.OTHERS_, 0)

        def CURRENT_(self):
            return self.getToken(RSSQLParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(RSSQLParser.ROW_, 0)

        def GROUP_(self):
            return self.getToken(RSSQLParser.GROUP_, 0)

        def TIES_(self):
            return self.getToken(RSSQLParser.TIES_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_frame_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_spec" ):
                listener.enterFrame_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_spec" ):
                listener.exitFrame_spec(self)




    def frame_spec(self):

        localctx = RSSQLParser.Frame_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_frame_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.frame_clause()
            self.state = 1716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.EXCLUDE_:
                self.state = 1707
                self.match(RSSQLParser.EXCLUDE_)
                self.state = 1714
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [RSSQLParser.NO_]:
                    self.state = 1708
                    self.match(RSSQLParser.NO_)
                    self.state = 1709
                    self.match(RSSQLParser.OTHERS_)
                    pass
                elif token in [RSSQLParser.CURRENT_]:
                    self.state = 1710
                    self.match(RSSQLParser.CURRENT_)
                    self.state = 1711
                    self.match(RSSQLParser.ROW_)
                    pass
                elif token in [RSSQLParser.GROUP_]:
                    self.state = 1712
                    self.match(RSSQLParser.GROUP_)
                    pass
                elif token in [RSSQLParser.TIES_]:
                    self.state = 1713
                    self.match(RSSQLParser.TIES_)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Frame_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE_(self):
            return self.getToken(RSSQLParser.RANGE_, 0)

        def ROWS_(self):
            return self.getToken(RSSQLParser.ROWS_, 0)

        def GROUPS_(self):
            return self.getToken(RSSQLParser.GROUPS_, 0)

        def frame_single(self):
            return self.getTypedRuleContext(RSSQLParser.Frame_singleContext,0)


        def BETWEEN_(self):
            return self.getToken(RSSQLParser.BETWEEN_, 0)

        def frame_left(self):
            return self.getTypedRuleContext(RSSQLParser.Frame_leftContext,0)


        def AND_(self):
            return self.getToken(RSSQLParser.AND_, 0)

        def frame_right(self):
            return self.getTypedRuleContext(RSSQLParser.Frame_rightContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_frame_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_clause" ):
                listener.enterFrame_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_clause" ):
                listener.exitFrame_clause(self)




    def frame_clause(self):

        localctx = RSSQLParser.Frame_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_frame_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            _la = self._input.LA(1)
            if not(((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (RSSQLParser.ROWS_ - 128)) | (1 << (RSSQLParser.RANGE_ - 128)) | (1 << (RSSQLParser.GROUPS_ - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.state = 1719
                self.frame_single()
                pass

            elif la_ == 2:
                self.state = 1720
                self.match(RSSQLParser.BETWEEN_)
                self.state = 1721
                self.frame_left()
                self.state = 1722
                self.match(RSSQLParser.AND_)
                self.state = 1723
                self.frame_right()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_function_invocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_func(self):
            return self.getTypedRuleContext(RSSQLParser.Simple_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def STAR(self):
            return self.getToken(RSSQLParser.STAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_simple_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_function_invocation" ):
                listener.enterSimple_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_function_invocation" ):
                listener.exitSimple_function_invocation(self)




    def simple_function_invocation(self):

        localctx = RSSQLParser.Simple_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_simple_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.simple_func()
            self.state = 1728
            self.match(RSSQLParser.OPEN_PAR)
            self.state = 1738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.OPEN_PAR, RSSQLParser.PLUS, RSSQLParser.MINUS, RSSQLParser.TILDE, RSSQLParser.ABORT_, RSSQLParser.ACTION_, RSSQLParser.ADD_, RSSQLParser.AFTER_, RSSQLParser.ALL_, RSSQLParser.ALTER_, RSSQLParser.ANALYZE_, RSSQLParser.AND_, RSSQLParser.AS_, RSSQLParser.ASC_, RSSQLParser.ATTACH_, RSSQLParser.AUTOINCREMENT_, RSSQLParser.BEFORE_, RSSQLParser.BEGIN_, RSSQLParser.BETWEEN_, RSSQLParser.BY_, RSSQLParser.CASCADE_, RSSQLParser.CASE_, RSSQLParser.CAST_, RSSQLParser.CHECK_, RSSQLParser.COLLATE_, RSSQLParser.COLUMN_, RSSQLParser.COMMIT_, RSSQLParser.CONFLICT_, RSSQLParser.CONSTRAINT_, RSSQLParser.CREATE_, RSSQLParser.CROSS_, RSSQLParser.CURRENT_DATE_, RSSQLParser.CURRENT_TIME_, RSSQLParser.CURRENT_TIMESTAMP_, RSSQLParser.DATABASE_, RSSQLParser.DEFAULT_, RSSQLParser.DEFERRABLE_, RSSQLParser.DEFERRED_, RSSQLParser.DELETE_, RSSQLParser.DESC_, RSSQLParser.DETACH_, RSSQLParser.DISTINCT_, RSSQLParser.DROP_, RSSQLParser.EACH_, RSSQLParser.ELSE_, RSSQLParser.END_, RSSQLParser.ESCAPE_, RSSQLParser.EXCEPT_, RSSQLParser.EXCLUSIVE_, RSSQLParser.EXISTS_, RSSQLParser.EXPLAIN_, RSSQLParser.FAIL_, RSSQLParser.FOR_, RSSQLParser.FOREIGN_, RSSQLParser.FROM_, RSSQLParser.FULL_, RSSQLParser.GLOB_, RSSQLParser.GROUP_, RSSQLParser.HAVING_, RSSQLParser.IF_, RSSQLParser.IGNORE_, RSSQLParser.IMMEDIATE_, RSSQLParser.IN_, RSSQLParser.INDEX_, RSSQLParser.INDEXED_, RSSQLParser.INITIALLY_, RSSQLParser.INNER_, RSSQLParser.INSERT_, RSSQLParser.INSTEAD_, RSSQLParser.INTERSECT_, RSSQLParser.INTO_, RSSQLParser.IS_, RSSQLParser.ISNULL_, RSSQLParser.JOIN_, RSSQLParser.KEY_, RSSQLParser.LEFT_, RSSQLParser.LIKE_, RSSQLParser.LIMIT_, RSSQLParser.MATCH_, RSSQLParser.NATURAL_, RSSQLParser.NO_, RSSQLParser.NOT_, RSSQLParser.NOTNULL_, RSSQLParser.NULL_, RSSQLParser.OF_, RSSQLParser.OFFSET_, RSSQLParser.ON_, RSSQLParser.OR_, RSSQLParser.ORDER_, RSSQLParser.OUTER_, RSSQLParser.PLAN_, RSSQLParser.PRAGMA_, RSSQLParser.PRIMARY_, RSSQLParser.QUERY_, RSSQLParser.RAISE_, RSSQLParser.RECURSIVE_, RSSQLParser.REFERENCES_, RSSQLParser.REGEXP_, RSSQLParser.REINDEX_, RSSQLParser.RELEASE_, RSSQLParser.RENAME_, RSSQLParser.REPLACE_, RSSQLParser.RESTRICT_, RSSQLParser.RIGHT_, RSSQLParser.ROLLBACK_, RSSQLParser.ROW_, RSSQLParser.ROWS_, RSSQLParser.SAVEPOINT_, RSSQLParser.SELECT_, RSSQLParser.SET_, RSSQLParser.TABLE_, RSSQLParser.TEMP_, RSSQLParser.TEMPORARY_, RSSQLParser.THEN_, RSSQLParser.TO_, RSSQLParser.TRANSACTION_, RSSQLParser.TRIGGER_, RSSQLParser.UNION_, RSSQLParser.UNIQUE_, RSSQLParser.UPDATE_, RSSQLParser.USING_, RSSQLParser.VACUUM_, RSSQLParser.VALUES_, RSSQLParser.VIEW_, RSSQLParser.VIRTUAL_, RSSQLParser.WHEN_, RSSQLParser.WHERE_, RSSQLParser.WITH_, RSSQLParser.WITHOUT_, RSSQLParser.FIRST_VALUE_, RSSQLParser.OVER_, RSSQLParser.PARTITION_, RSSQLParser.RANGE_, RSSQLParser.PRECEDING_, RSSQLParser.UNBOUNDED_, RSSQLParser.CURRENT_, RSSQLParser.FOLLOWING_, RSSQLParser.CUME_DIST_, RSSQLParser.DENSE_RANK_, RSSQLParser.LAG_, RSSQLParser.LAST_VALUE_, RSSQLParser.LEAD_, RSSQLParser.NTH_VALUE_, RSSQLParser.NTILE_, RSSQLParser.PERCENT_RANK_, RSSQLParser.RANK_, RSSQLParser.ROW_NUMBER_, RSSQLParser.GENERATED_, RSSQLParser.ALWAYS_, RSSQLParser.STORED_, RSSQLParser.TRUE_, RSSQLParser.FALSE_, RSSQLParser.WINDOW_, RSSQLParser.NULLS_, RSSQLParser.FIRST_, RSSQLParser.LAST_, RSSQLParser.FILTER_, RSSQLParser.GROUPS_, RSSQLParser.EXCLUDE_, RSSQLParser.IDENTIFIER, RSSQLParser.NUMERIC_LITERAL, RSSQLParser.BIND_PARAMETER, RSSQLParser.STRING_LITERAL, RSSQLParser.BLOB_LITERAL]:
                self.state = 1729
                self.expr(0)
                self.state = 1734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 1730
                    self.match(RSSQLParser.COMMA)
                    self.state = 1731
                    self.expr(0)
                    self.state = 1736
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [RSSQLParser.STAR]:
                self.state = 1737
                self.match(RSSQLParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1740
            self.match(RSSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_function_invocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_func(self):
            return self.getTypedRuleContext(RSSQLParser.Aggregate_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def STAR(self):
            return self.getToken(RSSQLParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Filter_clauseContext,0)


        def DISTINCT_(self):
            return self.getToken(RSSQLParser.DISTINCT_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_aggregate_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_invocation" ):
                listener.enterAggregate_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_invocation" ):
                listener.exitAggregate_function_invocation(self)




    def aggregate_function_invocation(self):

        localctx = RSSQLParser.Aggregate_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_aggregate_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1742
            self.aggregate_func()
            self.state = 1743
            self.match(RSSQLParser.OPEN_PAR)
            self.state = 1756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.OPEN_PAR, RSSQLParser.PLUS, RSSQLParser.MINUS, RSSQLParser.TILDE, RSSQLParser.ABORT_, RSSQLParser.ACTION_, RSSQLParser.ADD_, RSSQLParser.AFTER_, RSSQLParser.ALL_, RSSQLParser.ALTER_, RSSQLParser.ANALYZE_, RSSQLParser.AND_, RSSQLParser.AS_, RSSQLParser.ASC_, RSSQLParser.ATTACH_, RSSQLParser.AUTOINCREMENT_, RSSQLParser.BEFORE_, RSSQLParser.BEGIN_, RSSQLParser.BETWEEN_, RSSQLParser.BY_, RSSQLParser.CASCADE_, RSSQLParser.CASE_, RSSQLParser.CAST_, RSSQLParser.CHECK_, RSSQLParser.COLLATE_, RSSQLParser.COLUMN_, RSSQLParser.COMMIT_, RSSQLParser.CONFLICT_, RSSQLParser.CONSTRAINT_, RSSQLParser.CREATE_, RSSQLParser.CROSS_, RSSQLParser.CURRENT_DATE_, RSSQLParser.CURRENT_TIME_, RSSQLParser.CURRENT_TIMESTAMP_, RSSQLParser.DATABASE_, RSSQLParser.DEFAULT_, RSSQLParser.DEFERRABLE_, RSSQLParser.DEFERRED_, RSSQLParser.DELETE_, RSSQLParser.DESC_, RSSQLParser.DETACH_, RSSQLParser.DISTINCT_, RSSQLParser.DROP_, RSSQLParser.EACH_, RSSQLParser.ELSE_, RSSQLParser.END_, RSSQLParser.ESCAPE_, RSSQLParser.EXCEPT_, RSSQLParser.EXCLUSIVE_, RSSQLParser.EXISTS_, RSSQLParser.EXPLAIN_, RSSQLParser.FAIL_, RSSQLParser.FOR_, RSSQLParser.FOREIGN_, RSSQLParser.FROM_, RSSQLParser.FULL_, RSSQLParser.GLOB_, RSSQLParser.GROUP_, RSSQLParser.HAVING_, RSSQLParser.IF_, RSSQLParser.IGNORE_, RSSQLParser.IMMEDIATE_, RSSQLParser.IN_, RSSQLParser.INDEX_, RSSQLParser.INDEXED_, RSSQLParser.INITIALLY_, RSSQLParser.INNER_, RSSQLParser.INSERT_, RSSQLParser.INSTEAD_, RSSQLParser.INTERSECT_, RSSQLParser.INTO_, RSSQLParser.IS_, RSSQLParser.ISNULL_, RSSQLParser.JOIN_, RSSQLParser.KEY_, RSSQLParser.LEFT_, RSSQLParser.LIKE_, RSSQLParser.LIMIT_, RSSQLParser.MATCH_, RSSQLParser.NATURAL_, RSSQLParser.NO_, RSSQLParser.NOT_, RSSQLParser.NOTNULL_, RSSQLParser.NULL_, RSSQLParser.OF_, RSSQLParser.OFFSET_, RSSQLParser.ON_, RSSQLParser.OR_, RSSQLParser.ORDER_, RSSQLParser.OUTER_, RSSQLParser.PLAN_, RSSQLParser.PRAGMA_, RSSQLParser.PRIMARY_, RSSQLParser.QUERY_, RSSQLParser.RAISE_, RSSQLParser.RECURSIVE_, RSSQLParser.REFERENCES_, RSSQLParser.REGEXP_, RSSQLParser.REINDEX_, RSSQLParser.RELEASE_, RSSQLParser.RENAME_, RSSQLParser.REPLACE_, RSSQLParser.RESTRICT_, RSSQLParser.RIGHT_, RSSQLParser.ROLLBACK_, RSSQLParser.ROW_, RSSQLParser.ROWS_, RSSQLParser.SAVEPOINT_, RSSQLParser.SELECT_, RSSQLParser.SET_, RSSQLParser.TABLE_, RSSQLParser.TEMP_, RSSQLParser.TEMPORARY_, RSSQLParser.THEN_, RSSQLParser.TO_, RSSQLParser.TRANSACTION_, RSSQLParser.TRIGGER_, RSSQLParser.UNION_, RSSQLParser.UNIQUE_, RSSQLParser.UPDATE_, RSSQLParser.USING_, RSSQLParser.VACUUM_, RSSQLParser.VALUES_, RSSQLParser.VIEW_, RSSQLParser.VIRTUAL_, RSSQLParser.WHEN_, RSSQLParser.WHERE_, RSSQLParser.WITH_, RSSQLParser.WITHOUT_, RSSQLParser.FIRST_VALUE_, RSSQLParser.OVER_, RSSQLParser.PARTITION_, RSSQLParser.RANGE_, RSSQLParser.PRECEDING_, RSSQLParser.UNBOUNDED_, RSSQLParser.CURRENT_, RSSQLParser.FOLLOWING_, RSSQLParser.CUME_DIST_, RSSQLParser.DENSE_RANK_, RSSQLParser.LAG_, RSSQLParser.LAST_VALUE_, RSSQLParser.LEAD_, RSSQLParser.NTH_VALUE_, RSSQLParser.NTILE_, RSSQLParser.PERCENT_RANK_, RSSQLParser.RANK_, RSSQLParser.ROW_NUMBER_, RSSQLParser.GENERATED_, RSSQLParser.ALWAYS_, RSSQLParser.STORED_, RSSQLParser.TRUE_, RSSQLParser.FALSE_, RSSQLParser.WINDOW_, RSSQLParser.NULLS_, RSSQLParser.FIRST_, RSSQLParser.LAST_, RSSQLParser.FILTER_, RSSQLParser.GROUPS_, RSSQLParser.EXCLUDE_, RSSQLParser.IDENTIFIER, RSSQLParser.NUMERIC_LITERAL, RSSQLParser.BIND_PARAMETER, RSSQLParser.STRING_LITERAL, RSSQLParser.BLOB_LITERAL]:
                self.state = 1745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                if la_ == 1:
                    self.state = 1744
                    self.match(RSSQLParser.DISTINCT_)


                self.state = 1747
                self.expr(0)
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 1748
                    self.match(RSSQLParser.COMMA)
                    self.state = 1749
                    self.expr(0)
                    self.state = 1754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [RSSQLParser.STAR]:
                self.state = 1755
                self.match(RSSQLParser.STAR)
                pass
            elif token in [RSSQLParser.CLOSE_PAR]:
                pass
            else:
                pass
            self.state = 1758
            self.match(RSSQLParser.CLOSE_PAR)
            self.state = 1760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.FILTER_:
                self.state = 1759
                self.filter_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_function_invocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_function(self):
            return self.getTypedRuleContext(RSSQLParser.Window_functionContext,0)


        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def OVER_(self):
            return self.getToken(RSSQLParser.OVER_, 0)

        def window_defn(self):
            return self.getTypedRuleContext(RSSQLParser.Window_defnContext,0)


        def window_name(self):
            return self.getTypedRuleContext(RSSQLParser.Window_nameContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def STAR(self):
            return self.getToken(RSSQLParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Filter_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_window_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function_invocation" ):
                listener.enterWindow_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function_invocation" ):
                listener.exitWindow_function_invocation(self)




    def window_function_invocation(self):

        localctx = RSSQLParser.Window_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_window_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1762
            self.window_function()
            self.state = 1763
            self.match(RSSQLParser.OPEN_PAR)
            self.state = 1773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.OPEN_PAR, RSSQLParser.PLUS, RSSQLParser.MINUS, RSSQLParser.TILDE, RSSQLParser.ABORT_, RSSQLParser.ACTION_, RSSQLParser.ADD_, RSSQLParser.AFTER_, RSSQLParser.ALL_, RSSQLParser.ALTER_, RSSQLParser.ANALYZE_, RSSQLParser.AND_, RSSQLParser.AS_, RSSQLParser.ASC_, RSSQLParser.ATTACH_, RSSQLParser.AUTOINCREMENT_, RSSQLParser.BEFORE_, RSSQLParser.BEGIN_, RSSQLParser.BETWEEN_, RSSQLParser.BY_, RSSQLParser.CASCADE_, RSSQLParser.CASE_, RSSQLParser.CAST_, RSSQLParser.CHECK_, RSSQLParser.COLLATE_, RSSQLParser.COLUMN_, RSSQLParser.COMMIT_, RSSQLParser.CONFLICT_, RSSQLParser.CONSTRAINT_, RSSQLParser.CREATE_, RSSQLParser.CROSS_, RSSQLParser.CURRENT_DATE_, RSSQLParser.CURRENT_TIME_, RSSQLParser.CURRENT_TIMESTAMP_, RSSQLParser.DATABASE_, RSSQLParser.DEFAULT_, RSSQLParser.DEFERRABLE_, RSSQLParser.DEFERRED_, RSSQLParser.DELETE_, RSSQLParser.DESC_, RSSQLParser.DETACH_, RSSQLParser.DISTINCT_, RSSQLParser.DROP_, RSSQLParser.EACH_, RSSQLParser.ELSE_, RSSQLParser.END_, RSSQLParser.ESCAPE_, RSSQLParser.EXCEPT_, RSSQLParser.EXCLUSIVE_, RSSQLParser.EXISTS_, RSSQLParser.EXPLAIN_, RSSQLParser.FAIL_, RSSQLParser.FOR_, RSSQLParser.FOREIGN_, RSSQLParser.FROM_, RSSQLParser.FULL_, RSSQLParser.GLOB_, RSSQLParser.GROUP_, RSSQLParser.HAVING_, RSSQLParser.IF_, RSSQLParser.IGNORE_, RSSQLParser.IMMEDIATE_, RSSQLParser.IN_, RSSQLParser.INDEX_, RSSQLParser.INDEXED_, RSSQLParser.INITIALLY_, RSSQLParser.INNER_, RSSQLParser.INSERT_, RSSQLParser.INSTEAD_, RSSQLParser.INTERSECT_, RSSQLParser.INTO_, RSSQLParser.IS_, RSSQLParser.ISNULL_, RSSQLParser.JOIN_, RSSQLParser.KEY_, RSSQLParser.LEFT_, RSSQLParser.LIKE_, RSSQLParser.LIMIT_, RSSQLParser.MATCH_, RSSQLParser.NATURAL_, RSSQLParser.NO_, RSSQLParser.NOT_, RSSQLParser.NOTNULL_, RSSQLParser.NULL_, RSSQLParser.OF_, RSSQLParser.OFFSET_, RSSQLParser.ON_, RSSQLParser.OR_, RSSQLParser.ORDER_, RSSQLParser.OUTER_, RSSQLParser.PLAN_, RSSQLParser.PRAGMA_, RSSQLParser.PRIMARY_, RSSQLParser.QUERY_, RSSQLParser.RAISE_, RSSQLParser.RECURSIVE_, RSSQLParser.REFERENCES_, RSSQLParser.REGEXP_, RSSQLParser.REINDEX_, RSSQLParser.RELEASE_, RSSQLParser.RENAME_, RSSQLParser.REPLACE_, RSSQLParser.RESTRICT_, RSSQLParser.RIGHT_, RSSQLParser.ROLLBACK_, RSSQLParser.ROW_, RSSQLParser.ROWS_, RSSQLParser.SAVEPOINT_, RSSQLParser.SELECT_, RSSQLParser.SET_, RSSQLParser.TABLE_, RSSQLParser.TEMP_, RSSQLParser.TEMPORARY_, RSSQLParser.THEN_, RSSQLParser.TO_, RSSQLParser.TRANSACTION_, RSSQLParser.TRIGGER_, RSSQLParser.UNION_, RSSQLParser.UNIQUE_, RSSQLParser.UPDATE_, RSSQLParser.USING_, RSSQLParser.VACUUM_, RSSQLParser.VALUES_, RSSQLParser.VIEW_, RSSQLParser.VIRTUAL_, RSSQLParser.WHEN_, RSSQLParser.WHERE_, RSSQLParser.WITH_, RSSQLParser.WITHOUT_, RSSQLParser.FIRST_VALUE_, RSSQLParser.OVER_, RSSQLParser.PARTITION_, RSSQLParser.RANGE_, RSSQLParser.PRECEDING_, RSSQLParser.UNBOUNDED_, RSSQLParser.CURRENT_, RSSQLParser.FOLLOWING_, RSSQLParser.CUME_DIST_, RSSQLParser.DENSE_RANK_, RSSQLParser.LAG_, RSSQLParser.LAST_VALUE_, RSSQLParser.LEAD_, RSSQLParser.NTH_VALUE_, RSSQLParser.NTILE_, RSSQLParser.PERCENT_RANK_, RSSQLParser.RANK_, RSSQLParser.ROW_NUMBER_, RSSQLParser.GENERATED_, RSSQLParser.ALWAYS_, RSSQLParser.STORED_, RSSQLParser.TRUE_, RSSQLParser.FALSE_, RSSQLParser.WINDOW_, RSSQLParser.NULLS_, RSSQLParser.FIRST_, RSSQLParser.LAST_, RSSQLParser.FILTER_, RSSQLParser.GROUPS_, RSSQLParser.EXCLUDE_, RSSQLParser.IDENTIFIER, RSSQLParser.NUMERIC_LITERAL, RSSQLParser.BIND_PARAMETER, RSSQLParser.STRING_LITERAL, RSSQLParser.BLOB_LITERAL]:
                self.state = 1764
                self.expr(0)
                self.state = 1769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==RSSQLParser.COMMA:
                    self.state = 1765
                    self.match(RSSQLParser.COMMA)
                    self.state = 1766
                    self.expr(0)
                    self.state = 1771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [RSSQLParser.STAR]:
                self.state = 1772
                self.match(RSSQLParser.STAR)
                pass
            elif token in [RSSQLParser.CLOSE_PAR]:
                pass
            else:
                pass
            self.state = 1775
            self.match(RSSQLParser.CLOSE_PAR)
            self.state = 1777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.FILTER_:
                self.state = 1776
                self.filter_clause()


            self.state = 1779
            self.match(RSSQLParser.OVER_)
            self.state = 1782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 1780
                self.window_defn()
                pass

            elif la_ == 2:
                self.state = 1781
                self.window_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(RSSQLParser.WITH_, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Common_table_expressionContext,i)


        def RECURSIVE_(self):
            return self.getToken(RSSQLParser.RECURSIVE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_common_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_stmt" ):
                listener.enterCommon_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_stmt" ):
                listener.exitCommon_table_stmt(self)




    def common_table_stmt(self):

        localctx = RSSQLParser.Common_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_common_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self.match(RSSQLParser.WITH_)
            self.state = 1786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.state = 1785
                self.match(RSSQLParser.RECURSIVE_)


            self.state = 1788
            self.common_table_expression()
            self.state = 1793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.COMMA:
                self.state = 1789
                self.match(RSSQLParser.COMMA)
                self.state = 1790
                self.common_table_expression()
                self.state = 1795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(RSSQLParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(RSSQLParser.BY_, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Ordering_termContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_order_by_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_stmt" ):
                listener.enterOrder_by_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_stmt" ):
                listener.exitOrder_by_stmt(self)




    def order_by_stmt(self):

        localctx = RSSQLParser.Order_by_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_order_by_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1796
            self.match(RSSQLParser.ORDER_)
            self.state = 1797
            self.match(RSSQLParser.BY_)
            self.state = 1798
            self.ordering_term()
            self.state = 1803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.COMMA:
                self.state = 1799
                self.match(RSSQLParser.COMMA)
                self.state = 1800
                self.ordering_term()
                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_(self):
            return self.getToken(RSSQLParser.LIMIT_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def OFFSET_(self):
            return self.getToken(RSSQLParser.OFFSET_, 0)

        def COMMA(self):
            return self.getToken(RSSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_limit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_stmt" ):
                listener.enterLimit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_stmt" ):
                listener.exitLimit_stmt(self)




    def limit_stmt(self):

        localctx = RSSQLParser.Limit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_limit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1806
            self.match(RSSQLParser.LIMIT_)
            self.state = 1807
            self.expr(0)
            self.state = 1810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.COMMA or _la==RSSQLParser.OFFSET_:
                self.state = 1808
                _la = self._input.LA(1)
                if not(_la==RSSQLParser.COMMA or _la==RSSQLParser.OFFSET_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1809
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ordering_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def COLLATE_(self):
            return self.getToken(RSSQLParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(RSSQLParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(RSSQLParser.Asc_descContext,0)


        def NULLS_(self):
            return self.getToken(RSSQLParser.NULLS_, 0)

        def FIRST_(self):
            return self.getToken(RSSQLParser.FIRST_, 0)

        def LAST_(self):
            return self.getToken(RSSQLParser.LAST_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = RSSQLParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self.expr(0)
            self.state = 1815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.COLLATE_:
                self.state = 1813
                self.match(RSSQLParser.COLLATE_)
                self.state = 1814
                self.collation_name()


            self.state = 1818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.ASC_ or _la==RSSQLParser.DESC_:
                self.state = 1817
                self.asc_desc()


            self.state = 1822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.NULLS_:
                self.state = 1820
                self.match(RSSQLParser.NULLS_)
                self.state = 1821
                _la = self._input.LA(1)
                if not(_la==RSSQLParser.FIRST_ or _la==RSSQLParser.LAST_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Asc_descContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC_(self):
            return self.getToken(RSSQLParser.ASC_, 0)

        def DESC_(self):
            return self.getToken(RSSQLParser.DESC_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsc_desc" ):
                listener.enterAsc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsc_desc" ):
                listener.exitAsc_desc(self)




    def asc_desc(self):

        localctx = RSSQLParser.Asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            _la = self._input.LA(1)
            if not(_la==RSSQLParser.ASC_ or _la==RSSQLParser.DESC_):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Frame_leftContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(RSSQLParser.PRECEDING_, 0)

        def FOLLOWING_(self):
            return self.getToken(RSSQLParser.FOLLOWING_, 0)

        def CURRENT_(self):
            return self.getToken(RSSQLParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(RSSQLParser.ROW_, 0)

        def UNBOUNDED_(self):
            return self.getToken(RSSQLParser.UNBOUNDED_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_frame_left

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_left" ):
                listener.enterFrame_left(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_left" ):
                listener.exitFrame_left(self)




    def frame_left(self):

        localctx = RSSQLParser.Frame_leftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_frame_left)
        try:
            self.state = 1836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1826
                self.expr(0)
                self.state = 1827
                self.match(RSSQLParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1829
                self.expr(0)
                self.state = 1830
                self.match(RSSQLParser.FOLLOWING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1832
                self.match(RSSQLParser.CURRENT_)
                self.state = 1833
                self.match(RSSQLParser.ROW_)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1834
                self.match(RSSQLParser.UNBOUNDED_)
                self.state = 1835
                self.match(RSSQLParser.PRECEDING_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Frame_rightContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(RSSQLParser.PRECEDING_, 0)

        def FOLLOWING_(self):
            return self.getToken(RSSQLParser.FOLLOWING_, 0)

        def CURRENT_(self):
            return self.getToken(RSSQLParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(RSSQLParser.ROW_, 0)

        def UNBOUNDED_(self):
            return self.getToken(RSSQLParser.UNBOUNDED_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_frame_right

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_right" ):
                listener.enterFrame_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_right" ):
                listener.exitFrame_right(self)




    def frame_right(self):

        localctx = RSSQLParser.Frame_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_frame_right)
        try:
            self.state = 1848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1838
                self.expr(0)
                self.state = 1839
                self.match(RSSQLParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1841
                self.expr(0)
                self.state = 1842
                self.match(RSSQLParser.FOLLOWING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1844
                self.match(RSSQLParser.CURRENT_)
                self.state = 1845
                self.match(RSSQLParser.ROW_)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1846
                self.match(RSSQLParser.UNBOUNDED_)
                self.state = 1847
                self.match(RSSQLParser.FOLLOWING_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Frame_singleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(RSSQLParser.PRECEDING_, 0)

        def UNBOUNDED_(self):
            return self.getToken(RSSQLParser.UNBOUNDED_, 0)

        def CURRENT_(self):
            return self.getToken(RSSQLParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(RSSQLParser.ROW_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_frame_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_single" ):
                listener.enterFrame_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_single" ):
                listener.exitFrame_single(self)




    def frame_single(self):

        localctx = RSSQLParser.Frame_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_frame_single)
        try:
            self.state = 1857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1850
                self.expr(0)
                self.state = 1851
                self.match(RSSQLParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1853
                self.match(RSSQLParser.UNBOUNDED_)
                self.state = 1854
                self.match(RSSQLParser.PRECEDING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1855
                self.match(RSSQLParser.CURRENT_)
                self.state = 1856
                self.match(RSSQLParser.ROW_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.OPEN_PAR)
            else:
                return self.getToken(RSSQLParser.OPEN_PAR, i)

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.CLOSE_PAR)
            else:
                return self.getToken(RSSQLParser.CLOSE_PAR, i)

        def OVER_(self):
            return self.getToken(RSSQLParser.OVER_, 0)

        def order_by_expr_asc_desc(self):
            return self.getTypedRuleContext(RSSQLParser.Order_by_expr_asc_descContext,0)


        def FIRST_VALUE_(self):
            return self.getToken(RSSQLParser.FIRST_VALUE_, 0)

        def LAST_VALUE_(self):
            return self.getToken(RSSQLParser.LAST_VALUE_, 0)

        def partition_by(self):
            return self.getTypedRuleContext(RSSQLParser.Partition_byContext,0)


        def frame_clause(self):
            return self.getTypedRuleContext(RSSQLParser.Frame_clauseContext,0)


        def CUME_DIST_(self):
            return self.getToken(RSSQLParser.CUME_DIST_, 0)

        def PERCENT_RANK_(self):
            return self.getToken(RSSQLParser.PERCENT_RANK_, 0)

        def order_by_expr(self):
            return self.getTypedRuleContext(RSSQLParser.Order_by_exprContext,0)


        def DENSE_RANK_(self):
            return self.getToken(RSSQLParser.DENSE_RANK_, 0)

        def RANK_(self):
            return self.getToken(RSSQLParser.RANK_, 0)

        def ROW_NUMBER_(self):
            return self.getToken(RSSQLParser.ROW_NUMBER_, 0)

        def LAG_(self):
            return self.getToken(RSSQLParser.LAG_, 0)

        def LEAD_(self):
            return self.getToken(RSSQLParser.LEAD_, 0)

        def offset(self):
            return self.getTypedRuleContext(RSSQLParser.OffsetContext,0)


        def default_value(self):
            return self.getTypedRuleContext(RSSQLParser.Default_valueContext,0)


        def NTH_VALUE_(self):
            return self.getToken(RSSQLParser.NTH_VALUE_, 0)

        def COMMA(self):
            return self.getToken(RSSQLParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(RSSQLParser.Signed_numberContext,0)


        def NTILE_(self):
            return self.getToken(RSSQLParser.NTILE_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_window_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function" ):
                listener.enterWindow_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function" ):
                listener.exitWindow_function(self)




    def window_function(self):

        localctx = RSSQLParser.Window_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_window_function)
        self._la = 0 # Token type
        try:
            self.state = 1944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.FIRST_VALUE_, RSSQLParser.LAST_VALUE_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1859
                _la = self._input.LA(1)
                if not(_la==RSSQLParser.FIRST_VALUE_ or _la==RSSQLParser.LAST_VALUE_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1860
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1861
                self.expr(0)
                self.state = 1862
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 1863
                self.match(RSSQLParser.OVER_)
                self.state = 1864
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.PARTITION_:
                    self.state = 1865
                    self.partition_by()


                self.state = 1868
                self.order_by_expr_asc_desc()
                self.state = 1870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (RSSQLParser.ROWS_ - 128)) | (1 << (RSSQLParser.RANGE_ - 128)) | (1 << (RSSQLParser.GROUPS_ - 128)))) != 0):
                    self.state = 1869
                    self.frame_clause()


                self.state = 1872
                self.match(RSSQLParser.CLOSE_PAR)
                pass
            elif token in [RSSQLParser.CUME_DIST_, RSSQLParser.PERCENT_RANK_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1874
                _la = self._input.LA(1)
                if not(_la==RSSQLParser.CUME_DIST_ or _la==RSSQLParser.PERCENT_RANK_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1875
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1876
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 1877
                self.match(RSSQLParser.OVER_)
                self.state = 1878
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.PARTITION_:
                    self.state = 1879
                    self.partition_by()


                self.state = 1883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.ORDER_:
                    self.state = 1882
                    self.order_by_expr()


                self.state = 1885
                self.match(RSSQLParser.CLOSE_PAR)
                pass
            elif token in [RSSQLParser.DENSE_RANK_, RSSQLParser.RANK_, RSSQLParser.ROW_NUMBER_]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1886
                _la = self._input.LA(1)
                if not(((((_la - 160)) & ~0x3f) == 0 and ((1 << (_la - 160)) & ((1 << (RSSQLParser.DENSE_RANK_ - 160)) | (1 << (RSSQLParser.RANK_ - 160)) | (1 << (RSSQLParser.ROW_NUMBER_ - 160)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1887
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1888
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 1889
                self.match(RSSQLParser.OVER_)
                self.state = 1890
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.PARTITION_:
                    self.state = 1891
                    self.partition_by()


                self.state = 1894
                self.order_by_expr_asc_desc()
                self.state = 1895
                self.match(RSSQLParser.CLOSE_PAR)
                pass
            elif token in [RSSQLParser.LAG_, RSSQLParser.LEAD_]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1897
                _la = self._input.LA(1)
                if not(_la==RSSQLParser.LAG_ or _la==RSSQLParser.LEAD_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1898
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1899
                self.expr(0)
                self.state = 1901
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
                if la_ == 1:
                    self.state = 1900
                    self.offset()


                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.COMMA:
                    self.state = 1903
                    self.default_value()


                self.state = 1906
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 1907
                self.match(RSSQLParser.OVER_)
                self.state = 1908
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.PARTITION_:
                    self.state = 1909
                    self.partition_by()


                self.state = 1912
                self.order_by_expr_asc_desc()
                self.state = 1913
                self.match(RSSQLParser.CLOSE_PAR)
                pass
            elif token in [RSSQLParser.NTH_VALUE_]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1915
                self.match(RSSQLParser.NTH_VALUE_)
                self.state = 1916
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1917
                self.expr(0)
                self.state = 1918
                self.match(RSSQLParser.COMMA)
                self.state = 1919
                self.signed_number()
                self.state = 1920
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 1921
                self.match(RSSQLParser.OVER_)
                self.state = 1922
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.PARTITION_:
                    self.state = 1923
                    self.partition_by()


                self.state = 1926
                self.order_by_expr_asc_desc()
                self.state = 1928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (RSSQLParser.ROWS_ - 128)) | (1 << (RSSQLParser.RANGE_ - 128)) | (1 << (RSSQLParser.GROUPS_ - 128)))) != 0):
                    self.state = 1927
                    self.frame_clause()


                self.state = 1930
                self.match(RSSQLParser.CLOSE_PAR)
                pass
            elif token in [RSSQLParser.NTILE_]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1932
                self.match(RSSQLParser.NTILE_)
                self.state = 1933
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1934
                self.expr(0)
                self.state = 1935
                self.match(RSSQLParser.CLOSE_PAR)
                self.state = 1936
                self.match(RSSQLParser.OVER_)
                self.state = 1937
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 1939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.PARTITION_:
                    self.state = 1938
                    self.partition_by()


                self.state = 1941
                self.order_by_expr_asc_desc()
                self.state = 1942
                self.match(RSSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OffsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(RSSQLParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(RSSQLParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = RSSQLParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            self.match(RSSQLParser.COMMA)
            self.state = 1947
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(RSSQLParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(RSSQLParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = RSSQLParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_default_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1949
            self.match(RSSQLParser.COMMA)
            self.state = 1950
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_byContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_(self):
            return self.getToken(RSSQLParser.PARTITION_, 0)

        def BY_(self):
            return self.getToken(RSSQLParser.BY_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def getRuleIndex(self):
            return RSSQLParser.RULE_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by" ):
                listener.enterPartition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by" ):
                listener.exitPartition_by(self)




    def partition_by(self):

        localctx = RSSQLParser.Partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_partition_by)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1952
            self.match(RSSQLParser.PARTITION_)
            self.state = 1953
            self.match(RSSQLParser.BY_)
            self.state = 1955 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1954
                    self.expr(0)

                else:
                    raise NoViableAltException(self)
                self.state = 1957 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,289,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(RSSQLParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(RSSQLParser.BY_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def getRuleIndex(self):
            return RSSQLParser.RULE_order_by_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr" ):
                listener.enterOrder_by_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr" ):
                listener.exitOrder_by_expr(self)




    def order_by_expr(self):

        localctx = RSSQLParser.Order_by_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_order_by_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1959
            self.match(RSSQLParser.ORDER_)
            self.state = 1960
            self.match(RSSQLParser.BY_)
            self.state = 1962 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1961
                self.expr(0)
                self.state = 1964 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << RSSQLParser.OPEN_PAR) | (1 << RSSQLParser.PLUS) | (1 << RSSQLParser.MINUS) | (1 << RSSQLParser.TILDE) | (1 << RSSQLParser.ABORT_) | (1 << RSSQLParser.ACTION_) | (1 << RSSQLParser.ADD_) | (1 << RSSQLParser.AFTER_) | (1 << RSSQLParser.ALL_) | (1 << RSSQLParser.ALTER_) | (1 << RSSQLParser.ANALYZE_) | (1 << RSSQLParser.AND_) | (1 << RSSQLParser.AS_) | (1 << RSSQLParser.ASC_) | (1 << RSSQLParser.ATTACH_) | (1 << RSSQLParser.AUTOINCREMENT_) | (1 << RSSQLParser.BEFORE_) | (1 << RSSQLParser.BEGIN_) | (1 << RSSQLParser.BETWEEN_) | (1 << RSSQLParser.BY_) | (1 << RSSQLParser.CASCADE_) | (1 << RSSQLParser.CASE_) | (1 << RSSQLParser.CAST_) | (1 << RSSQLParser.CHECK_) | (1 << RSSQLParser.COLLATE_) | (1 << RSSQLParser.COLUMN_) | (1 << RSSQLParser.COMMIT_) | (1 << RSSQLParser.CONFLICT_) | (1 << RSSQLParser.CONSTRAINT_) | (1 << RSSQLParser.CREATE_) | (1 << RSSQLParser.CROSS_) | (1 << RSSQLParser.CURRENT_DATE_) | (1 << RSSQLParser.CURRENT_TIME_) | (1 << RSSQLParser.CURRENT_TIMESTAMP_) | (1 << RSSQLParser.DATABASE_) | (1 << RSSQLParser.DEFAULT_) | (1 << RSSQLParser.DEFERRABLE_) | (1 << RSSQLParser.DEFERRED_) | (1 << RSSQLParser.DELETE_) | (1 << RSSQLParser.DESC_) | (1 << RSSQLParser.DETACH_) | (1 << RSSQLParser.DISTINCT_) | (1 << RSSQLParser.DROP_))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (RSSQLParser.EACH_ - 64)) | (1 << (RSSQLParser.ELSE_ - 64)) | (1 << (RSSQLParser.END_ - 64)) | (1 << (RSSQLParser.ESCAPE_ - 64)) | (1 << (RSSQLParser.EXCEPT_ - 64)) | (1 << (RSSQLParser.EXCLUSIVE_ - 64)) | (1 << (RSSQLParser.EXISTS_ - 64)) | (1 << (RSSQLParser.EXPLAIN_ - 64)) | (1 << (RSSQLParser.FAIL_ - 64)) | (1 << (RSSQLParser.FOR_ - 64)) | (1 << (RSSQLParser.FOREIGN_ - 64)) | (1 << (RSSQLParser.FROM_ - 64)) | (1 << (RSSQLParser.FULL_ - 64)) | (1 << (RSSQLParser.GLOB_ - 64)) | (1 << (RSSQLParser.GROUP_ - 64)) | (1 << (RSSQLParser.HAVING_ - 64)) | (1 << (RSSQLParser.IF_ - 64)) | (1 << (RSSQLParser.IGNORE_ - 64)) | (1 << (RSSQLParser.IMMEDIATE_ - 64)) | (1 << (RSSQLParser.IN_ - 64)) | (1 << (RSSQLParser.INDEX_ - 64)) | (1 << (RSSQLParser.INDEXED_ - 64)) | (1 << (RSSQLParser.INITIALLY_ - 64)) | (1 << (RSSQLParser.INNER_ - 64)) | (1 << (RSSQLParser.INSERT_ - 64)) | (1 << (RSSQLParser.INSTEAD_ - 64)) | (1 << (RSSQLParser.INTERSECT_ - 64)) | (1 << (RSSQLParser.INTO_ - 64)) | (1 << (RSSQLParser.IS_ - 64)) | (1 << (RSSQLParser.ISNULL_ - 64)) | (1 << (RSSQLParser.JOIN_ - 64)) | (1 << (RSSQLParser.KEY_ - 64)) | (1 << (RSSQLParser.LEFT_ - 64)) | (1 << (RSSQLParser.LIKE_ - 64)) | (1 << (RSSQLParser.LIMIT_ - 64)) | (1 << (RSSQLParser.MATCH_ - 64)) | (1 << (RSSQLParser.NATURAL_ - 64)) | (1 << (RSSQLParser.NO_ - 64)) | (1 << (RSSQLParser.NOT_ - 64)) | (1 << (RSSQLParser.NOTNULL_ - 64)) | (1 << (RSSQLParser.NULL_ - 64)) | (1 << (RSSQLParser.OF_ - 64)) | (1 << (RSSQLParser.OFFSET_ - 64)) | (1 << (RSSQLParser.ON_ - 64)) | (1 << (RSSQLParser.OR_ - 64)) | (1 << (RSSQLParser.ORDER_ - 64)) | (1 << (RSSQLParser.OUTER_ - 64)) | (1 << (RSSQLParser.PLAN_ - 64)) | (1 << (RSSQLParser.PRAGMA_ - 64)) | (1 << (RSSQLParser.PRIMARY_ - 64)) | (1 << (RSSQLParser.QUERY_ - 64)) | (1 << (RSSQLParser.RAISE_ - 64)) | (1 << (RSSQLParser.RECURSIVE_ - 64)) | (1 << (RSSQLParser.REFERENCES_ - 64)) | (1 << (RSSQLParser.REGEXP_ - 64)) | (1 << (RSSQLParser.REINDEX_ - 64)) | (1 << (RSSQLParser.RELEASE_ - 64)) | (1 << (RSSQLParser.RENAME_ - 64)) | (1 << (RSSQLParser.REPLACE_ - 64)) | (1 << (RSSQLParser.RESTRICT_ - 64)) | (1 << (RSSQLParser.RIGHT_ - 64)) | (1 << (RSSQLParser.ROLLBACK_ - 64)) | (1 << (RSSQLParser.ROW_ - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (RSSQLParser.ROWS_ - 128)) | (1 << (RSSQLParser.SAVEPOINT_ - 128)) | (1 << (RSSQLParser.SELECT_ - 128)) | (1 << (RSSQLParser.SET_ - 128)) | (1 << (RSSQLParser.TABLE_ - 128)) | (1 << (RSSQLParser.TEMP_ - 128)) | (1 << (RSSQLParser.TEMPORARY_ - 128)) | (1 << (RSSQLParser.THEN_ - 128)) | (1 << (RSSQLParser.TO_ - 128)) | (1 << (RSSQLParser.TRANSACTION_ - 128)) | (1 << (RSSQLParser.TRIGGER_ - 128)) | (1 << (RSSQLParser.UNION_ - 128)) | (1 << (RSSQLParser.UNIQUE_ - 128)) | (1 << (RSSQLParser.UPDATE_ - 128)) | (1 << (RSSQLParser.USING_ - 128)) | (1 << (RSSQLParser.VACUUM_ - 128)) | (1 << (RSSQLParser.VALUES_ - 128)) | (1 << (RSSQLParser.VIEW_ - 128)) | (1 << (RSSQLParser.VIRTUAL_ - 128)) | (1 << (RSSQLParser.WHEN_ - 128)) | (1 << (RSSQLParser.WHERE_ - 128)) | (1 << (RSSQLParser.WITH_ - 128)) | (1 << (RSSQLParser.WITHOUT_ - 128)) | (1 << (RSSQLParser.FIRST_VALUE_ - 128)) | (1 << (RSSQLParser.OVER_ - 128)) | (1 << (RSSQLParser.PARTITION_ - 128)) | (1 << (RSSQLParser.RANGE_ - 128)) | (1 << (RSSQLParser.PRECEDING_ - 128)) | (1 << (RSSQLParser.UNBOUNDED_ - 128)) | (1 << (RSSQLParser.CURRENT_ - 128)) | (1 << (RSSQLParser.FOLLOWING_ - 128)) | (1 << (RSSQLParser.CUME_DIST_ - 128)) | (1 << (RSSQLParser.DENSE_RANK_ - 128)) | (1 << (RSSQLParser.LAG_ - 128)) | (1 << (RSSQLParser.LAST_VALUE_ - 128)) | (1 << (RSSQLParser.LEAD_ - 128)) | (1 << (RSSQLParser.NTH_VALUE_ - 128)) | (1 << (RSSQLParser.NTILE_ - 128)) | (1 << (RSSQLParser.PERCENT_RANK_ - 128)) | (1 << (RSSQLParser.RANK_ - 128)) | (1 << (RSSQLParser.ROW_NUMBER_ - 128)) | (1 << (RSSQLParser.GENERATED_ - 128)) | (1 << (RSSQLParser.ALWAYS_ - 128)) | (1 << (RSSQLParser.STORED_ - 128)) | (1 << (RSSQLParser.TRUE_ - 128)) | (1 << (RSSQLParser.FALSE_ - 128)) | (1 << (RSSQLParser.WINDOW_ - 128)) | (1 << (RSSQLParser.NULLS_ - 128)) | (1 << (RSSQLParser.FIRST_ - 128)) | (1 << (RSSQLParser.LAST_ - 128)) | (1 << (RSSQLParser.FILTER_ - 128)) | (1 << (RSSQLParser.GROUPS_ - 128)) | (1 << (RSSQLParser.EXCLUDE_ - 128)) | (1 << (RSSQLParser.IDENTIFIER - 128)) | (1 << (RSSQLParser.NUMERIC_LITERAL - 128)) | (1 << (RSSQLParser.BIND_PARAMETER - 128)) | (1 << (RSSQLParser.STRING_LITERAL - 128)) | (1 << (RSSQLParser.BLOB_LITERAL - 128)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_expr_asc_descContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(RSSQLParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(RSSQLParser.BY_, 0)

        def expr_asc_desc(self):
            return self.getTypedRuleContext(RSSQLParser.Expr_asc_descContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_order_by_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr_asc_desc" ):
                listener.enterOrder_by_expr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr_asc_desc" ):
                listener.exitOrder_by_expr_asc_desc(self)




    def order_by_expr_asc_desc(self):

        localctx = RSSQLParser.Order_by_expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_order_by_expr_asc_desc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1966
            self.match(RSSQLParser.ORDER_)
            self.state = 1967
            self.match(RSSQLParser.BY_)
            self.state = 1968
            self.expr_asc_desc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_asc_descContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.ExprContext,i)


        def asc_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RSSQLParser.Asc_descContext)
            else:
                return self.getTypedRuleContext(RSSQLParser.Asc_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RSSQLParser.COMMA)
            else:
                return self.getToken(RSSQLParser.COMMA, i)

        def getRuleIndex(self):
            return RSSQLParser.RULE_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_asc_desc" ):
                listener.enterExpr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_asc_desc" ):
                listener.exitExpr_asc_desc(self)




    def expr_asc_desc(self):

        localctx = RSSQLParser.Expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_expr_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            self.expr(0)
            self.state = 1972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==RSSQLParser.ASC_ or _la==RSSQLParser.DESC_:
                self.state = 1971
                self.asc_desc()


            self.state = 1981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==RSSQLParser.COMMA:
                self.state = 1974
                self.match(RSSQLParser.COMMA)
                self.state = 1975
                self.expr(0)
                self.state = 1977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==RSSQLParser.ASC_ or _la==RSSQLParser.DESC_:
                    self.state = 1976
                    self.asc_desc()


                self.state = 1983
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Initial_selectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_initial_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitial_select" ):
                listener.enterInitial_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitial_select" ):
                listener.exitInitial_select(self)




    def initial_select(self):

        localctx = RSSQLParser.Initial_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_initial_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Recursive_selectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(RSSQLParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_recursive_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_select" ):
                listener.enterRecursive_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_select" ):
                listener.exitRecursive_select(self)




    def recursive_select(self):

        localctx = RSSQLParser.Recursive_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_recursive_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1986
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(RSSQLParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(RSSQLParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(RSSQLParser.TILDE, 0)

        def NOT_(self):
            return self.getToken(RSSQLParser.NOT_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = RSSQLParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1988
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << RSSQLParser.PLUS) | (1 << RSSQLParser.MINUS) | (1 << RSSQLParser.TILDE))) != 0) or _la==RSSQLParser.NOT_):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_messageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RSSQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_error_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_message" ):
                listener.enterError_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_message" ):
                listener.exitError_message(self)




    def error_message(self):

        localctx = RSSQLParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self.match(RSSQLParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(RSSQLParser.ExprContext,0)


        def column_def(self):
            return self.getTypedRuleContext(RSSQLParser.Column_defContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_module_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_argument" ):
                listener.enterModule_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_argument" ):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = RSSQLParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_module_argument)
        try:
            self.state = 1994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1992
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1993
                self.column_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(RSSQLParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(RSSQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = RSSQLParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            _la = self._input.LA(1)
            if not(_la==RSSQLParser.IDENTIFIER or _la==RSSQLParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT_(self):
            return self.getToken(RSSQLParser.ABORT_, 0)

        def ACTION_(self):
            return self.getToken(RSSQLParser.ACTION_, 0)

        def ADD_(self):
            return self.getToken(RSSQLParser.ADD_, 0)

        def AFTER_(self):
            return self.getToken(RSSQLParser.AFTER_, 0)

        def ALL_(self):
            return self.getToken(RSSQLParser.ALL_, 0)

        def ALTER_(self):
            return self.getToken(RSSQLParser.ALTER_, 0)

        def ANALYZE_(self):
            return self.getToken(RSSQLParser.ANALYZE_, 0)

        def AND_(self):
            return self.getToken(RSSQLParser.AND_, 0)

        def AS_(self):
            return self.getToken(RSSQLParser.AS_, 0)

        def ASC_(self):
            return self.getToken(RSSQLParser.ASC_, 0)

        def ATTACH_(self):
            return self.getToken(RSSQLParser.ATTACH_, 0)

        def AUTOINCREMENT_(self):
            return self.getToken(RSSQLParser.AUTOINCREMENT_, 0)

        def BEFORE_(self):
            return self.getToken(RSSQLParser.BEFORE_, 0)

        def BEGIN_(self):
            return self.getToken(RSSQLParser.BEGIN_, 0)

        def BETWEEN_(self):
            return self.getToken(RSSQLParser.BETWEEN_, 0)

        def BY_(self):
            return self.getToken(RSSQLParser.BY_, 0)

        def CASCADE_(self):
            return self.getToken(RSSQLParser.CASCADE_, 0)

        def CASE_(self):
            return self.getToken(RSSQLParser.CASE_, 0)

        def CAST_(self):
            return self.getToken(RSSQLParser.CAST_, 0)

        def CHECK_(self):
            return self.getToken(RSSQLParser.CHECK_, 0)

        def COLLATE_(self):
            return self.getToken(RSSQLParser.COLLATE_, 0)

        def COLUMN_(self):
            return self.getToken(RSSQLParser.COLUMN_, 0)

        def COMMIT_(self):
            return self.getToken(RSSQLParser.COMMIT_, 0)

        def CONFLICT_(self):
            return self.getToken(RSSQLParser.CONFLICT_, 0)

        def CONSTRAINT_(self):
            return self.getToken(RSSQLParser.CONSTRAINT_, 0)

        def CREATE_(self):
            return self.getToken(RSSQLParser.CREATE_, 0)

        def CROSS_(self):
            return self.getToken(RSSQLParser.CROSS_, 0)

        def CURRENT_DATE_(self):
            return self.getToken(RSSQLParser.CURRENT_DATE_, 0)

        def CURRENT_TIME_(self):
            return self.getToken(RSSQLParser.CURRENT_TIME_, 0)

        def CURRENT_TIMESTAMP_(self):
            return self.getToken(RSSQLParser.CURRENT_TIMESTAMP_, 0)

        def DATABASE_(self):
            return self.getToken(RSSQLParser.DATABASE_, 0)

        def DEFAULT_(self):
            return self.getToken(RSSQLParser.DEFAULT_, 0)

        def DEFERRABLE_(self):
            return self.getToken(RSSQLParser.DEFERRABLE_, 0)

        def DEFERRED_(self):
            return self.getToken(RSSQLParser.DEFERRED_, 0)

        def DELETE_(self):
            return self.getToken(RSSQLParser.DELETE_, 0)

        def DESC_(self):
            return self.getToken(RSSQLParser.DESC_, 0)

        def DETACH_(self):
            return self.getToken(RSSQLParser.DETACH_, 0)

        def DISTINCT_(self):
            return self.getToken(RSSQLParser.DISTINCT_, 0)

        def DROP_(self):
            return self.getToken(RSSQLParser.DROP_, 0)

        def EACH_(self):
            return self.getToken(RSSQLParser.EACH_, 0)

        def ELSE_(self):
            return self.getToken(RSSQLParser.ELSE_, 0)

        def END_(self):
            return self.getToken(RSSQLParser.END_, 0)

        def ESCAPE_(self):
            return self.getToken(RSSQLParser.ESCAPE_, 0)

        def EXCEPT_(self):
            return self.getToken(RSSQLParser.EXCEPT_, 0)

        def EXCLUSIVE_(self):
            return self.getToken(RSSQLParser.EXCLUSIVE_, 0)

        def EXISTS_(self):
            return self.getToken(RSSQLParser.EXISTS_, 0)

        def EXPLAIN_(self):
            return self.getToken(RSSQLParser.EXPLAIN_, 0)

        def FAIL_(self):
            return self.getToken(RSSQLParser.FAIL_, 0)

        def FOR_(self):
            return self.getToken(RSSQLParser.FOR_, 0)

        def FOREIGN_(self):
            return self.getToken(RSSQLParser.FOREIGN_, 0)

        def FROM_(self):
            return self.getToken(RSSQLParser.FROM_, 0)

        def FULL_(self):
            return self.getToken(RSSQLParser.FULL_, 0)

        def GLOB_(self):
            return self.getToken(RSSQLParser.GLOB_, 0)

        def GROUP_(self):
            return self.getToken(RSSQLParser.GROUP_, 0)

        def HAVING_(self):
            return self.getToken(RSSQLParser.HAVING_, 0)

        def IF_(self):
            return self.getToken(RSSQLParser.IF_, 0)

        def IGNORE_(self):
            return self.getToken(RSSQLParser.IGNORE_, 0)

        def IMMEDIATE_(self):
            return self.getToken(RSSQLParser.IMMEDIATE_, 0)

        def IN_(self):
            return self.getToken(RSSQLParser.IN_, 0)

        def INDEX_(self):
            return self.getToken(RSSQLParser.INDEX_, 0)

        def INDEXED_(self):
            return self.getToken(RSSQLParser.INDEXED_, 0)

        def INITIALLY_(self):
            return self.getToken(RSSQLParser.INITIALLY_, 0)

        def INNER_(self):
            return self.getToken(RSSQLParser.INNER_, 0)

        def INSERT_(self):
            return self.getToken(RSSQLParser.INSERT_, 0)

        def INSTEAD_(self):
            return self.getToken(RSSQLParser.INSTEAD_, 0)

        def INTERSECT_(self):
            return self.getToken(RSSQLParser.INTERSECT_, 0)

        def INTO_(self):
            return self.getToken(RSSQLParser.INTO_, 0)

        def IS_(self):
            return self.getToken(RSSQLParser.IS_, 0)

        def ISNULL_(self):
            return self.getToken(RSSQLParser.ISNULL_, 0)

        def JOIN_(self):
            return self.getToken(RSSQLParser.JOIN_, 0)

        def KEY_(self):
            return self.getToken(RSSQLParser.KEY_, 0)

        def LEFT_(self):
            return self.getToken(RSSQLParser.LEFT_, 0)

        def LIKE_(self):
            return self.getToken(RSSQLParser.LIKE_, 0)

        def LIMIT_(self):
            return self.getToken(RSSQLParser.LIMIT_, 0)

        def MATCH_(self):
            return self.getToken(RSSQLParser.MATCH_, 0)

        def NATURAL_(self):
            return self.getToken(RSSQLParser.NATURAL_, 0)

        def NO_(self):
            return self.getToken(RSSQLParser.NO_, 0)

        def NOT_(self):
            return self.getToken(RSSQLParser.NOT_, 0)

        def NOTNULL_(self):
            return self.getToken(RSSQLParser.NOTNULL_, 0)

        def NULL_(self):
            return self.getToken(RSSQLParser.NULL_, 0)

        def OF_(self):
            return self.getToken(RSSQLParser.OF_, 0)

        def OFFSET_(self):
            return self.getToken(RSSQLParser.OFFSET_, 0)

        def ON_(self):
            return self.getToken(RSSQLParser.ON_, 0)

        def OR_(self):
            return self.getToken(RSSQLParser.OR_, 0)

        def ORDER_(self):
            return self.getToken(RSSQLParser.ORDER_, 0)

        def OUTER_(self):
            return self.getToken(RSSQLParser.OUTER_, 0)

        def PLAN_(self):
            return self.getToken(RSSQLParser.PLAN_, 0)

        def PRAGMA_(self):
            return self.getToken(RSSQLParser.PRAGMA_, 0)

        def PRIMARY_(self):
            return self.getToken(RSSQLParser.PRIMARY_, 0)

        def QUERY_(self):
            return self.getToken(RSSQLParser.QUERY_, 0)

        def RAISE_(self):
            return self.getToken(RSSQLParser.RAISE_, 0)

        def RECURSIVE_(self):
            return self.getToken(RSSQLParser.RECURSIVE_, 0)

        def REFERENCES_(self):
            return self.getToken(RSSQLParser.REFERENCES_, 0)

        def REGEXP_(self):
            return self.getToken(RSSQLParser.REGEXP_, 0)

        def REINDEX_(self):
            return self.getToken(RSSQLParser.REINDEX_, 0)

        def RELEASE_(self):
            return self.getToken(RSSQLParser.RELEASE_, 0)

        def RENAME_(self):
            return self.getToken(RSSQLParser.RENAME_, 0)

        def REPLACE_(self):
            return self.getToken(RSSQLParser.REPLACE_, 0)

        def RESTRICT_(self):
            return self.getToken(RSSQLParser.RESTRICT_, 0)

        def RIGHT_(self):
            return self.getToken(RSSQLParser.RIGHT_, 0)

        def ROLLBACK_(self):
            return self.getToken(RSSQLParser.ROLLBACK_, 0)

        def ROW_(self):
            return self.getToken(RSSQLParser.ROW_, 0)

        def ROWS_(self):
            return self.getToken(RSSQLParser.ROWS_, 0)

        def SAVEPOINT_(self):
            return self.getToken(RSSQLParser.SAVEPOINT_, 0)

        def SELECT_(self):
            return self.getToken(RSSQLParser.SELECT_, 0)

        def SET_(self):
            return self.getToken(RSSQLParser.SET_, 0)

        def TABLE_(self):
            return self.getToken(RSSQLParser.TABLE_, 0)

        def TEMP_(self):
            return self.getToken(RSSQLParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(RSSQLParser.TEMPORARY_, 0)

        def THEN_(self):
            return self.getToken(RSSQLParser.THEN_, 0)

        def TO_(self):
            return self.getToken(RSSQLParser.TO_, 0)

        def TRANSACTION_(self):
            return self.getToken(RSSQLParser.TRANSACTION_, 0)

        def TRIGGER_(self):
            return self.getToken(RSSQLParser.TRIGGER_, 0)

        def UNION_(self):
            return self.getToken(RSSQLParser.UNION_, 0)

        def UNIQUE_(self):
            return self.getToken(RSSQLParser.UNIQUE_, 0)

        def UPDATE_(self):
            return self.getToken(RSSQLParser.UPDATE_, 0)

        def USING_(self):
            return self.getToken(RSSQLParser.USING_, 0)

        def VACUUM_(self):
            return self.getToken(RSSQLParser.VACUUM_, 0)

        def VALUES_(self):
            return self.getToken(RSSQLParser.VALUES_, 0)

        def VIEW_(self):
            return self.getToken(RSSQLParser.VIEW_, 0)

        def VIRTUAL_(self):
            return self.getToken(RSSQLParser.VIRTUAL_, 0)

        def WHEN_(self):
            return self.getToken(RSSQLParser.WHEN_, 0)

        def WHERE_(self):
            return self.getToken(RSSQLParser.WHERE_, 0)

        def WITH_(self):
            return self.getToken(RSSQLParser.WITH_, 0)

        def WITHOUT_(self):
            return self.getToken(RSSQLParser.WITHOUT_, 0)

        def FIRST_VALUE_(self):
            return self.getToken(RSSQLParser.FIRST_VALUE_, 0)

        def OVER_(self):
            return self.getToken(RSSQLParser.OVER_, 0)

        def PARTITION_(self):
            return self.getToken(RSSQLParser.PARTITION_, 0)

        def RANGE_(self):
            return self.getToken(RSSQLParser.RANGE_, 0)

        def PRECEDING_(self):
            return self.getToken(RSSQLParser.PRECEDING_, 0)

        def UNBOUNDED_(self):
            return self.getToken(RSSQLParser.UNBOUNDED_, 0)

        def CURRENT_(self):
            return self.getToken(RSSQLParser.CURRENT_, 0)

        def FOLLOWING_(self):
            return self.getToken(RSSQLParser.FOLLOWING_, 0)

        def CUME_DIST_(self):
            return self.getToken(RSSQLParser.CUME_DIST_, 0)

        def DENSE_RANK_(self):
            return self.getToken(RSSQLParser.DENSE_RANK_, 0)

        def LAG_(self):
            return self.getToken(RSSQLParser.LAG_, 0)

        def LAST_VALUE_(self):
            return self.getToken(RSSQLParser.LAST_VALUE_, 0)

        def LEAD_(self):
            return self.getToken(RSSQLParser.LEAD_, 0)

        def NTH_VALUE_(self):
            return self.getToken(RSSQLParser.NTH_VALUE_, 0)

        def NTILE_(self):
            return self.getToken(RSSQLParser.NTILE_, 0)

        def PERCENT_RANK_(self):
            return self.getToken(RSSQLParser.PERCENT_RANK_, 0)

        def RANK_(self):
            return self.getToken(RSSQLParser.RANK_, 0)

        def ROW_NUMBER_(self):
            return self.getToken(RSSQLParser.ROW_NUMBER_, 0)

        def GENERATED_(self):
            return self.getToken(RSSQLParser.GENERATED_, 0)

        def ALWAYS_(self):
            return self.getToken(RSSQLParser.ALWAYS_, 0)

        def STORED_(self):
            return self.getToken(RSSQLParser.STORED_, 0)

        def TRUE_(self):
            return self.getToken(RSSQLParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(RSSQLParser.FALSE_, 0)

        def WINDOW_(self):
            return self.getToken(RSSQLParser.WINDOW_, 0)

        def NULLS_(self):
            return self.getToken(RSSQLParser.NULLS_, 0)

        def FIRST_(self):
            return self.getToken(RSSQLParser.FIRST_, 0)

        def LAST_(self):
            return self.getToken(RSSQLParser.LAST_, 0)

        def FILTER_(self):
            return self.getToken(RSSQLParser.FILTER_, 0)

        def GROUPS_(self):
            return self.getToken(RSSQLParser.GROUPS_, 0)

        def EXCLUDE_(self):
            return self.getToken(RSSQLParser.EXCLUDE_, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = RSSQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << RSSQLParser.ABORT_) | (1 << RSSQLParser.ACTION_) | (1 << RSSQLParser.ADD_) | (1 << RSSQLParser.AFTER_) | (1 << RSSQLParser.ALL_) | (1 << RSSQLParser.ALTER_) | (1 << RSSQLParser.ANALYZE_) | (1 << RSSQLParser.AND_) | (1 << RSSQLParser.AS_) | (1 << RSSQLParser.ASC_) | (1 << RSSQLParser.ATTACH_) | (1 << RSSQLParser.AUTOINCREMENT_) | (1 << RSSQLParser.BEFORE_) | (1 << RSSQLParser.BEGIN_) | (1 << RSSQLParser.BETWEEN_) | (1 << RSSQLParser.BY_) | (1 << RSSQLParser.CASCADE_) | (1 << RSSQLParser.CASE_) | (1 << RSSQLParser.CAST_) | (1 << RSSQLParser.CHECK_) | (1 << RSSQLParser.COLLATE_) | (1 << RSSQLParser.COLUMN_) | (1 << RSSQLParser.COMMIT_) | (1 << RSSQLParser.CONFLICT_) | (1 << RSSQLParser.CONSTRAINT_) | (1 << RSSQLParser.CREATE_) | (1 << RSSQLParser.CROSS_) | (1 << RSSQLParser.CURRENT_DATE_) | (1 << RSSQLParser.CURRENT_TIME_) | (1 << RSSQLParser.CURRENT_TIMESTAMP_) | (1 << RSSQLParser.DATABASE_) | (1 << RSSQLParser.DEFAULT_) | (1 << RSSQLParser.DEFERRABLE_) | (1 << RSSQLParser.DEFERRED_) | (1 << RSSQLParser.DELETE_) | (1 << RSSQLParser.DESC_) | (1 << RSSQLParser.DETACH_) | (1 << RSSQLParser.DISTINCT_) | (1 << RSSQLParser.DROP_))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (RSSQLParser.EACH_ - 64)) | (1 << (RSSQLParser.ELSE_ - 64)) | (1 << (RSSQLParser.END_ - 64)) | (1 << (RSSQLParser.ESCAPE_ - 64)) | (1 << (RSSQLParser.EXCEPT_ - 64)) | (1 << (RSSQLParser.EXCLUSIVE_ - 64)) | (1 << (RSSQLParser.EXISTS_ - 64)) | (1 << (RSSQLParser.EXPLAIN_ - 64)) | (1 << (RSSQLParser.FAIL_ - 64)) | (1 << (RSSQLParser.FOR_ - 64)) | (1 << (RSSQLParser.FOREIGN_ - 64)) | (1 << (RSSQLParser.FROM_ - 64)) | (1 << (RSSQLParser.FULL_ - 64)) | (1 << (RSSQLParser.GLOB_ - 64)) | (1 << (RSSQLParser.GROUP_ - 64)) | (1 << (RSSQLParser.HAVING_ - 64)) | (1 << (RSSQLParser.IF_ - 64)) | (1 << (RSSQLParser.IGNORE_ - 64)) | (1 << (RSSQLParser.IMMEDIATE_ - 64)) | (1 << (RSSQLParser.IN_ - 64)) | (1 << (RSSQLParser.INDEX_ - 64)) | (1 << (RSSQLParser.INDEXED_ - 64)) | (1 << (RSSQLParser.INITIALLY_ - 64)) | (1 << (RSSQLParser.INNER_ - 64)) | (1 << (RSSQLParser.INSERT_ - 64)) | (1 << (RSSQLParser.INSTEAD_ - 64)) | (1 << (RSSQLParser.INTERSECT_ - 64)) | (1 << (RSSQLParser.INTO_ - 64)) | (1 << (RSSQLParser.IS_ - 64)) | (1 << (RSSQLParser.ISNULL_ - 64)) | (1 << (RSSQLParser.JOIN_ - 64)) | (1 << (RSSQLParser.KEY_ - 64)) | (1 << (RSSQLParser.LEFT_ - 64)) | (1 << (RSSQLParser.LIKE_ - 64)) | (1 << (RSSQLParser.LIMIT_ - 64)) | (1 << (RSSQLParser.MATCH_ - 64)) | (1 << (RSSQLParser.NATURAL_ - 64)) | (1 << (RSSQLParser.NO_ - 64)) | (1 << (RSSQLParser.NOT_ - 64)) | (1 << (RSSQLParser.NOTNULL_ - 64)) | (1 << (RSSQLParser.NULL_ - 64)) | (1 << (RSSQLParser.OF_ - 64)) | (1 << (RSSQLParser.OFFSET_ - 64)) | (1 << (RSSQLParser.ON_ - 64)) | (1 << (RSSQLParser.OR_ - 64)) | (1 << (RSSQLParser.ORDER_ - 64)) | (1 << (RSSQLParser.OUTER_ - 64)) | (1 << (RSSQLParser.PLAN_ - 64)) | (1 << (RSSQLParser.PRAGMA_ - 64)) | (1 << (RSSQLParser.PRIMARY_ - 64)) | (1 << (RSSQLParser.QUERY_ - 64)) | (1 << (RSSQLParser.RAISE_ - 64)) | (1 << (RSSQLParser.RECURSIVE_ - 64)) | (1 << (RSSQLParser.REFERENCES_ - 64)) | (1 << (RSSQLParser.REGEXP_ - 64)) | (1 << (RSSQLParser.REINDEX_ - 64)) | (1 << (RSSQLParser.RELEASE_ - 64)) | (1 << (RSSQLParser.RENAME_ - 64)) | (1 << (RSSQLParser.REPLACE_ - 64)) | (1 << (RSSQLParser.RESTRICT_ - 64)) | (1 << (RSSQLParser.RIGHT_ - 64)) | (1 << (RSSQLParser.ROLLBACK_ - 64)) | (1 << (RSSQLParser.ROW_ - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (RSSQLParser.ROWS_ - 128)) | (1 << (RSSQLParser.SAVEPOINT_ - 128)) | (1 << (RSSQLParser.SELECT_ - 128)) | (1 << (RSSQLParser.SET_ - 128)) | (1 << (RSSQLParser.TABLE_ - 128)) | (1 << (RSSQLParser.TEMP_ - 128)) | (1 << (RSSQLParser.TEMPORARY_ - 128)) | (1 << (RSSQLParser.THEN_ - 128)) | (1 << (RSSQLParser.TO_ - 128)) | (1 << (RSSQLParser.TRANSACTION_ - 128)) | (1 << (RSSQLParser.TRIGGER_ - 128)) | (1 << (RSSQLParser.UNION_ - 128)) | (1 << (RSSQLParser.UNIQUE_ - 128)) | (1 << (RSSQLParser.UPDATE_ - 128)) | (1 << (RSSQLParser.USING_ - 128)) | (1 << (RSSQLParser.VACUUM_ - 128)) | (1 << (RSSQLParser.VALUES_ - 128)) | (1 << (RSSQLParser.VIEW_ - 128)) | (1 << (RSSQLParser.VIRTUAL_ - 128)) | (1 << (RSSQLParser.WHEN_ - 128)) | (1 << (RSSQLParser.WHERE_ - 128)) | (1 << (RSSQLParser.WITH_ - 128)) | (1 << (RSSQLParser.WITHOUT_ - 128)) | (1 << (RSSQLParser.FIRST_VALUE_ - 128)) | (1 << (RSSQLParser.OVER_ - 128)) | (1 << (RSSQLParser.PARTITION_ - 128)) | (1 << (RSSQLParser.RANGE_ - 128)) | (1 << (RSSQLParser.PRECEDING_ - 128)) | (1 << (RSSQLParser.UNBOUNDED_ - 128)) | (1 << (RSSQLParser.CURRENT_ - 128)) | (1 << (RSSQLParser.FOLLOWING_ - 128)) | (1 << (RSSQLParser.CUME_DIST_ - 128)) | (1 << (RSSQLParser.DENSE_RANK_ - 128)) | (1 << (RSSQLParser.LAG_ - 128)) | (1 << (RSSQLParser.LAST_VALUE_ - 128)) | (1 << (RSSQLParser.LEAD_ - 128)) | (1 << (RSSQLParser.NTH_VALUE_ - 128)) | (1 << (RSSQLParser.NTILE_ - 128)) | (1 << (RSSQLParser.PERCENT_RANK_ - 128)) | (1 << (RSSQLParser.RANK_ - 128)) | (1 << (RSSQLParser.ROW_NUMBER_ - 128)) | (1 << (RSSQLParser.GENERATED_ - 128)) | (1 << (RSSQLParser.ALWAYS_ - 128)) | (1 << (RSSQLParser.STORED_ - 128)) | (1 << (RSSQLParser.TRUE_ - 128)) | (1 << (RSSQLParser.FALSE_ - 128)) | (1 << (RSSQLParser.WINDOW_ - 128)) | (1 << (RSSQLParser.NULLS_ - 128)) | (1 << (RSSQLParser.FIRST_ - 128)) | (1 << (RSSQLParser.LAST_ - 128)) | (1 << (RSSQLParser.FILTER_ - 128)) | (1 << (RSSQLParser.GROUPS_ - 128)) | (1 << (RSSQLParser.EXCLUDE_ - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = RSSQLParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = RSSQLParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = RSSQLParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2004
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = RSSQLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2006
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_table_or_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_index_name" ):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_index_name" ):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = RSSQLParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = RSSQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2010
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collation_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = RSSQLParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2012
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Foreign_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = RSSQLParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2014
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = RSSQLParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = RSSQLParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2018
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)




    def view_name(self):

        localctx = RSSQLParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_module_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_name" ):
                listener.enterModule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_name" ):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = RSSQLParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_pragma_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_name" ):
                listener.enterPragma_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_name" ):
                listener.exitPragma_name(self)




    def pragma_name(self):

        localctx = RSSQLParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = RSSQLParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = RSSQLParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_transaction_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_name" ):
                listener.enterTransaction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_name" ):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = RSSQLParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_name" ):
                listener.enterWindow_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_name" ):
                listener.exitWindow_name(self)




    def window_name(self):

        localctx = RSSQLParser.Window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = RSSQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FilenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_filename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilename" ):
                listener.enterFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilename" ):
                listener.exitFilename(self)




    def filename(self):

        localctx = RSSQLParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_filename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2036
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Base_window_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_base_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_window_name" ):
                listener.enterBase_window_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_window_name" ):
                listener.exitBase_window_name(self)




    def base_window_name(self):

        localctx = RSSQLParser.Base_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_base_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_funcContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_simple_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_func" ):
                listener.enterSimple_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_func" ):
                listener.exitSimple_func(self)




    def simple_func(self):

        localctx = RSSQLParser.Simple_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_simple_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2040
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_funcContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_aggregate_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_func" ):
                listener.enterAggregate_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_func" ):
                listener.exitAggregate_func(self)




    def aggregate_func(self):

        localctx = RSSQLParser.Aggregate_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_aggregate_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2042
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RSSQLParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)




    def table_function_name(self):

        localctx = RSSQLParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2044
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(RSSQLParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(RSSQLParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(RSSQLParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(RSSQLParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(RSSQLParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(RSSQLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return RSSQLParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = RSSQLParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_any_name)
        try:
            self.state = 2053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [RSSQLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2046
                self.match(RSSQLParser.IDENTIFIER)
                pass
            elif token in [RSSQLParser.ABORT_, RSSQLParser.ACTION_, RSSQLParser.ADD_, RSSQLParser.AFTER_, RSSQLParser.ALL_, RSSQLParser.ALTER_, RSSQLParser.ANALYZE_, RSSQLParser.AND_, RSSQLParser.AS_, RSSQLParser.ASC_, RSSQLParser.ATTACH_, RSSQLParser.AUTOINCREMENT_, RSSQLParser.BEFORE_, RSSQLParser.BEGIN_, RSSQLParser.BETWEEN_, RSSQLParser.BY_, RSSQLParser.CASCADE_, RSSQLParser.CASE_, RSSQLParser.CAST_, RSSQLParser.CHECK_, RSSQLParser.COLLATE_, RSSQLParser.COLUMN_, RSSQLParser.COMMIT_, RSSQLParser.CONFLICT_, RSSQLParser.CONSTRAINT_, RSSQLParser.CREATE_, RSSQLParser.CROSS_, RSSQLParser.CURRENT_DATE_, RSSQLParser.CURRENT_TIME_, RSSQLParser.CURRENT_TIMESTAMP_, RSSQLParser.DATABASE_, RSSQLParser.DEFAULT_, RSSQLParser.DEFERRABLE_, RSSQLParser.DEFERRED_, RSSQLParser.DELETE_, RSSQLParser.DESC_, RSSQLParser.DETACH_, RSSQLParser.DISTINCT_, RSSQLParser.DROP_, RSSQLParser.EACH_, RSSQLParser.ELSE_, RSSQLParser.END_, RSSQLParser.ESCAPE_, RSSQLParser.EXCEPT_, RSSQLParser.EXCLUSIVE_, RSSQLParser.EXISTS_, RSSQLParser.EXPLAIN_, RSSQLParser.FAIL_, RSSQLParser.FOR_, RSSQLParser.FOREIGN_, RSSQLParser.FROM_, RSSQLParser.FULL_, RSSQLParser.GLOB_, RSSQLParser.GROUP_, RSSQLParser.HAVING_, RSSQLParser.IF_, RSSQLParser.IGNORE_, RSSQLParser.IMMEDIATE_, RSSQLParser.IN_, RSSQLParser.INDEX_, RSSQLParser.INDEXED_, RSSQLParser.INITIALLY_, RSSQLParser.INNER_, RSSQLParser.INSERT_, RSSQLParser.INSTEAD_, RSSQLParser.INTERSECT_, RSSQLParser.INTO_, RSSQLParser.IS_, RSSQLParser.ISNULL_, RSSQLParser.JOIN_, RSSQLParser.KEY_, RSSQLParser.LEFT_, RSSQLParser.LIKE_, RSSQLParser.LIMIT_, RSSQLParser.MATCH_, RSSQLParser.NATURAL_, RSSQLParser.NO_, RSSQLParser.NOT_, RSSQLParser.NOTNULL_, RSSQLParser.NULL_, RSSQLParser.OF_, RSSQLParser.OFFSET_, RSSQLParser.ON_, RSSQLParser.OR_, RSSQLParser.ORDER_, RSSQLParser.OUTER_, RSSQLParser.PLAN_, RSSQLParser.PRAGMA_, RSSQLParser.PRIMARY_, RSSQLParser.QUERY_, RSSQLParser.RAISE_, RSSQLParser.RECURSIVE_, RSSQLParser.REFERENCES_, RSSQLParser.REGEXP_, RSSQLParser.REINDEX_, RSSQLParser.RELEASE_, RSSQLParser.RENAME_, RSSQLParser.REPLACE_, RSSQLParser.RESTRICT_, RSSQLParser.RIGHT_, RSSQLParser.ROLLBACK_, RSSQLParser.ROW_, RSSQLParser.ROWS_, RSSQLParser.SAVEPOINT_, RSSQLParser.SELECT_, RSSQLParser.SET_, RSSQLParser.TABLE_, RSSQLParser.TEMP_, RSSQLParser.TEMPORARY_, RSSQLParser.THEN_, RSSQLParser.TO_, RSSQLParser.TRANSACTION_, RSSQLParser.TRIGGER_, RSSQLParser.UNION_, RSSQLParser.UNIQUE_, RSSQLParser.UPDATE_, RSSQLParser.USING_, RSSQLParser.VACUUM_, RSSQLParser.VALUES_, RSSQLParser.VIEW_, RSSQLParser.VIRTUAL_, RSSQLParser.WHEN_, RSSQLParser.WHERE_, RSSQLParser.WITH_, RSSQLParser.WITHOUT_, RSSQLParser.FIRST_VALUE_, RSSQLParser.OVER_, RSSQLParser.PARTITION_, RSSQLParser.RANGE_, RSSQLParser.PRECEDING_, RSSQLParser.UNBOUNDED_, RSSQLParser.CURRENT_, RSSQLParser.FOLLOWING_, RSSQLParser.CUME_DIST_, RSSQLParser.DENSE_RANK_, RSSQLParser.LAG_, RSSQLParser.LAST_VALUE_, RSSQLParser.LEAD_, RSSQLParser.NTH_VALUE_, RSSQLParser.NTILE_, RSSQLParser.PERCENT_RANK_, RSSQLParser.RANK_, RSSQLParser.ROW_NUMBER_, RSSQLParser.GENERATED_, RSSQLParser.ALWAYS_, RSSQLParser.STORED_, RSSQLParser.TRUE_, RSSQLParser.FALSE_, RSSQLParser.WINDOW_, RSSQLParser.NULLS_, RSSQLParser.FIRST_, RSSQLParser.LAST_, RSSQLParser.FILTER_, RSSQLParser.GROUPS_, RSSQLParser.EXCLUDE_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2047
                self.keyword()
                pass
            elif token in [RSSQLParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2048
                self.match(RSSQLParser.STRING_LITERAL)
                pass
            elif token in [RSSQLParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2049
                self.match(RSSQLParser.OPEN_PAR)
                self.state = 2050
                self.any_name()
                self.state = 2051
                self.match(RSSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[32] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         




